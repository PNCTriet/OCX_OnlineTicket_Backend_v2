import { Controller, Get, Post, Put, Delete, Param, Body, UseGuards, Request } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger';
import { JwtAuthGuard } from '@/common/guards/jwt-auth.guard';
import { PaymentsService } from './payments.service';
import { CreatePaymentDto, UpdatePaymentDto, PaymentResponseDto } from './dto/payment.dto';

@ApiTags('üí≥ Payments')
@ApiBearerAuth()
@UseGuards(JwtAuthGuard)
@Controller('payments')
export class PaymentsController {
  constructor(private readonly paymentsService: PaymentsService) {}

  @Get()
  @ApiOperation({ summary: 'L·∫•y danh s√°ch t·∫•t c·∫£ thanh to√°n (Admin only)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch thanh to√°n',
    type: [PaymentResponseDto] 
  })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async findAll(@Request() req): Promise<PaymentResponseDto[]> {
    return this.paymentsService.findAll(req.user);
  }

  @Get('revenue')
  @ApiOperation({ summary: 'L·∫•y t·ªïng doanh thu (Admin only)' })
  @ApiResponse({ 
    status: 200, 
    description: 'T·ªïng doanh thu',
    type: Number 
  })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async getRevenue(@Request() req): Promise<number> {
    return this.paymentsService.getRevenue(req.user);
  }

  @Get('revenue/debug')
  @ApiOperation({ summary: 'Debug revenue calculation (Admin only)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Debug information',
    type: Object 
  })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async debugRevenue(@Request() req): Promise<any> {
    return this.paymentsService.debugRevenue(req.user);
  }

  @Get('revenue/:period')
  @ApiOperation({ summary: 'L·∫•y doanh thu theo th·ªùi gian (Admin only)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Doanh thu theo th·ªùi gian',
    schema: {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              label: { type: 'string' },
              value: { type: 'number' }
            }
          }
        }
      }
    }
  })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async getRevenueByPeriod(
    @Param('period') period: string,
    @Request() req
  ): Promise<{ data: { label: string; value: number }[] }> {
    return this.paymentsService.getRevenueByPeriod(period, req.user);
  }

  @Get('count')
  @ApiOperation({ summary: 'L·∫•y s·ªë l∆∞·ª£ng thanh to√°n (Admin only)' })
  @ApiResponse({ 
    status: 200, 
    description: 'S·ªë l∆∞·ª£ng thanh to√°n',
    type: Number 
  })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async getCount(@Request() req): Promise<number> {
    return this.paymentsService.getCount(req.user);
  }

  @Get(':id')
  @ApiOperation({ summary: 'L·∫•y th√¥ng tin thanh to√°n theo ID' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th√¥ng tin thanh to√°n',
    type: PaymentResponseDto 
  })
  @ApiResponse({ status: 404, description: 'Thanh to√°n kh√¥ng t·ªìn t·∫°i' })
  async findById(@Param('id') id: string): Promise<PaymentResponseDto> {
    return this.paymentsService.findById(parseInt(id));
  }

  @Post()
  @ApiOperation({ summary: 'T·∫°o thanh to√°n m·ªõi (Admin only)' })
  @ApiResponse({ 
    status: 201, 
    description: 'T·∫°o thanh to√°n th√†nh c√¥ng',
    type: PaymentResponseDto 
  })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn t·∫°o thanh to√°n' })
  async create(@Body() createPaymentDto: CreatePaymentDto, @Request() req): Promise<PaymentResponseDto> {
    return this.paymentsService.create(createPaymentDto, req.user);
  }

  @Put(':id')
  @ApiOperation({ summary: 'C·∫≠p nh·∫≠t thanh to√°n (Admin only)' })
  @ApiResponse({ 
    status: 200, 
    description: 'C·∫≠p nh·∫≠t th√†nh c√¥ng',
    type: PaymentResponseDto 
  })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t' })
  @ApiResponse({ status: 404, description: 'Thanh to√°n kh√¥ng t·ªìn t·∫°i' })
  async update(
    @Param('id') id: string,
    @Body() updatePaymentDto: UpdatePaymentDto,
    @Request() req
  ): Promise<PaymentResponseDto> {
    return this.paymentsService.update(parseInt(id), updatePaymentDto, req.user);
  }

  @Delete(':id')
  @ApiOperation({ summary: 'X√≥a thanh to√°n (Admin only)' })
  @ApiResponse({ 
    status: 200, 
    description: 'X√≥a th√†nh c√¥ng' 
  })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn x√≥a' })
  @ApiResponse({ status: 404, description: 'Thanh to√°n kh√¥ng t·ªìn t·∫°i' })
  async delete(@Param('id') id: string, @Request() req): Promise<{ message: string }> {
    return this.paymentsService.delete(parseInt(id), req.user);
  }
} 