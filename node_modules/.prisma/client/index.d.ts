
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Organization
 * 
 */
export type Organization = $Result.DefaultSelection<Prisma.$OrganizationPayload>
/**
 * Model PromoCode
 * 
 */
export type PromoCode = $Result.DefaultSelection<Prisma.$PromoCodePayload>
/**
 * Model OrderPromo
 * 
 */
export type OrderPromo = $Result.DefaultSelection<Prisma.$OrderPromoPayload>
/**
 * Model ReferralCode
 * 
 */
export type ReferralCode = $Result.DefaultSelection<Prisma.$ReferralCodePayload>
/**
 * Model EmailLog
 * 
 */
export type EmailLog = $Result.DefaultSelection<Prisma.$EmailLogPayload>
/**
 * Model WebhookLog
 * 
 */
export type WebhookLog = $Result.DefaultSelection<Prisma.$WebhookLogPayload>
/**
 * Model WebhookSubscription
 * 
 */
export type WebhookSubscription = $Result.DefaultSelection<Prisma.$WebhookSubscriptionPayload>
/**
 * Model TrackingVisit
 * 
 */
export type TrackingVisit = $Result.DefaultSelection<Prisma.$TrackingVisitPayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model Ticket
 * 
 */
export type Ticket = $Result.DefaultSelection<Prisma.$TicketPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model OrderItem
 * 
 */
export type OrderItem = $Result.DefaultSelection<Prisma.$OrderItemPayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model CheckinLog
 * 
 */
export type CheckinLog = $Result.DefaultSelection<Prisma.$CheckinLogPayload>
/**
 * Model UserOrganization
 * 
 */
export type UserOrganization = $Result.DefaultSelection<Prisma.$UserOrganizationPayload>
/**
 * Model EventSetting
 * 
 */
export type EventSetting = $Result.DefaultSelection<Prisma.$EventSettingPayload>
/**
 * Model Image
 * 
 */
export type Image = $Result.DefaultSelection<Prisma.$ImagePayload>
/**
 * Model ImageLink
 * 
 */
export type ImageLink = $Result.DefaultSelection<Prisma.$ImageLinkPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  USER: 'USER',
  OWNER_ORGANIZER: 'OWNER_ORGANIZER',
  ADMIN_ORGANIZER: 'ADMIN_ORGANIZER',
  ADMIN: 'ADMIN',
  SUPERADMIN: 'SUPERADMIN'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.promoCode`: Exposes CRUD operations for the **PromoCode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PromoCodes
    * const promoCodes = await prisma.promoCode.findMany()
    * ```
    */
  get promoCode(): Prisma.PromoCodeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderPromo`: Exposes CRUD operations for the **OrderPromo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderPromos
    * const orderPromos = await prisma.orderPromo.findMany()
    * ```
    */
  get orderPromo(): Prisma.OrderPromoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.referralCode`: Exposes CRUD operations for the **ReferralCode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReferralCodes
    * const referralCodes = await prisma.referralCode.findMany()
    * ```
    */
  get referralCode(): Prisma.ReferralCodeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailLog`: Exposes CRUD operations for the **EmailLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailLogs
    * const emailLogs = await prisma.emailLog.findMany()
    * ```
    */
  get emailLog(): Prisma.EmailLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.webhookLog`: Exposes CRUD operations for the **WebhookLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WebhookLogs
    * const webhookLogs = await prisma.webhookLog.findMany()
    * ```
    */
  get webhookLog(): Prisma.WebhookLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.webhookSubscription`: Exposes CRUD operations for the **WebhookSubscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WebhookSubscriptions
    * const webhookSubscriptions = await prisma.webhookSubscription.findMany()
    * ```
    */
  get webhookSubscription(): Prisma.WebhookSubscriptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.trackingVisit`: Exposes CRUD operations for the **TrackingVisit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TrackingVisits
    * const trackingVisits = await prisma.trackingVisit.findMany()
    * ```
    */
  get trackingVisit(): Prisma.TrackingVisitDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ticket`: Exposes CRUD operations for the **Ticket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tickets
    * const tickets = await prisma.ticket.findMany()
    * ```
    */
  get ticket(): Prisma.TicketDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderItem`: Exposes CRUD operations for the **OrderItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderItems
    * const orderItems = await prisma.orderItem.findMany()
    * ```
    */
  get orderItem(): Prisma.OrderItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.checkinLog`: Exposes CRUD operations for the **CheckinLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CheckinLogs
    * const checkinLogs = await prisma.checkinLog.findMany()
    * ```
    */
  get checkinLog(): Prisma.CheckinLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userOrganization`: Exposes CRUD operations for the **UserOrganization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserOrganizations
    * const userOrganizations = await prisma.userOrganization.findMany()
    * ```
    */
  get userOrganization(): Prisma.UserOrganizationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.eventSetting`: Exposes CRUD operations for the **EventSetting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventSettings
    * const eventSettings = await prisma.eventSetting.findMany()
    * ```
    */
  get eventSetting(): Prisma.EventSettingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **Image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.ImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.imageLink`: Exposes CRUD operations for the **ImageLink** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ImageLinks
    * const imageLinks = await prisma.imageLink.findMany()
    * ```
    */
  get imageLink(): Prisma.ImageLinkDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.1
   * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Organization: 'Organization',
    PromoCode: 'PromoCode',
    OrderPromo: 'OrderPromo',
    ReferralCode: 'ReferralCode',
    EmailLog: 'EmailLog',
    WebhookLog: 'WebhookLog',
    WebhookSubscription: 'WebhookSubscription',
    TrackingVisit: 'TrackingVisit',
    Event: 'Event',
    Ticket: 'Ticket',
    Order: 'Order',
    OrderItem: 'OrderItem',
    Payment: 'Payment',
    CheckinLog: 'CheckinLog',
    UserOrganization: 'UserOrganization',
    EventSetting: 'EventSetting',
    Image: 'Image',
    ImageLink: 'ImageLink'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "organization" | "promoCode" | "orderPromo" | "referralCode" | "emailLog" | "webhookLog" | "webhookSubscription" | "trackingVisit" | "event" | "ticket" | "order" | "orderItem" | "payment" | "checkinLog" | "userOrganization" | "eventSetting" | "image" | "imageLink"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Organization: {
        payload: Prisma.$OrganizationPayload<ExtArgs>
        fields: Prisma.OrganizationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrganizationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findFirst: {
            args: Prisma.OrganizationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findMany: {
            args: Prisma.OrganizationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          create: {
            args: Prisma.OrganizationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          createMany: {
            args: Prisma.OrganizationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrganizationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          delete: {
            args: Prisma.OrganizationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          update: {
            args: Prisma.OrganizationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          deleteMany: {
            args: Prisma.OrganizationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrganizationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrganizationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          upsert: {
            args: Prisma.OrganizationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          aggregate: {
            args: Prisma.OrganizationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrganization>
          }
          groupBy: {
            args: Prisma.OrganizationGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrganizationGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrganizationCountArgs<ExtArgs>
            result: $Utils.Optional<OrganizationCountAggregateOutputType> | number
          }
        }
      }
      PromoCode: {
        payload: Prisma.$PromoCodePayload<ExtArgs>
        fields: Prisma.PromoCodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PromoCodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoCodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PromoCodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoCodePayload>
          }
          findFirst: {
            args: Prisma.PromoCodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoCodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PromoCodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoCodePayload>
          }
          findMany: {
            args: Prisma.PromoCodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoCodePayload>[]
          }
          create: {
            args: Prisma.PromoCodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoCodePayload>
          }
          createMany: {
            args: Prisma.PromoCodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PromoCodeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoCodePayload>[]
          }
          delete: {
            args: Prisma.PromoCodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoCodePayload>
          }
          update: {
            args: Prisma.PromoCodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoCodePayload>
          }
          deleteMany: {
            args: Prisma.PromoCodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PromoCodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PromoCodeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoCodePayload>[]
          }
          upsert: {
            args: Prisma.PromoCodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoCodePayload>
          }
          aggregate: {
            args: Prisma.PromoCodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePromoCode>
          }
          groupBy: {
            args: Prisma.PromoCodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<PromoCodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.PromoCodeCountArgs<ExtArgs>
            result: $Utils.Optional<PromoCodeCountAggregateOutputType> | number
          }
        }
      }
      OrderPromo: {
        payload: Prisma.$OrderPromoPayload<ExtArgs>
        fields: Prisma.OrderPromoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderPromoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPromoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderPromoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPromoPayload>
          }
          findFirst: {
            args: Prisma.OrderPromoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPromoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderPromoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPromoPayload>
          }
          findMany: {
            args: Prisma.OrderPromoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPromoPayload>[]
          }
          create: {
            args: Prisma.OrderPromoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPromoPayload>
          }
          createMany: {
            args: Prisma.OrderPromoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderPromoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPromoPayload>[]
          }
          delete: {
            args: Prisma.OrderPromoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPromoPayload>
          }
          update: {
            args: Prisma.OrderPromoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPromoPayload>
          }
          deleteMany: {
            args: Prisma.OrderPromoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderPromoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderPromoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPromoPayload>[]
          }
          upsert: {
            args: Prisma.OrderPromoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPromoPayload>
          }
          aggregate: {
            args: Prisma.OrderPromoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderPromo>
          }
          groupBy: {
            args: Prisma.OrderPromoGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderPromoGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderPromoCountArgs<ExtArgs>
            result: $Utils.Optional<OrderPromoCountAggregateOutputType> | number
          }
        }
      }
      ReferralCode: {
        payload: Prisma.$ReferralCodePayload<ExtArgs>
        fields: Prisma.ReferralCodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReferralCodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReferralCodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>
          }
          findFirst: {
            args: Prisma.ReferralCodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReferralCodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>
          }
          findMany: {
            args: Prisma.ReferralCodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>[]
          }
          create: {
            args: Prisma.ReferralCodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>
          }
          createMany: {
            args: Prisma.ReferralCodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReferralCodeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>[]
          }
          delete: {
            args: Prisma.ReferralCodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>
          }
          update: {
            args: Prisma.ReferralCodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>
          }
          deleteMany: {
            args: Prisma.ReferralCodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReferralCodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReferralCodeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>[]
          }
          upsert: {
            args: Prisma.ReferralCodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>
          }
          aggregate: {
            args: Prisma.ReferralCodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReferralCode>
          }
          groupBy: {
            args: Prisma.ReferralCodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReferralCodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReferralCodeCountArgs<ExtArgs>
            result: $Utils.Optional<ReferralCodeCountAggregateOutputType> | number
          }
        }
      }
      EmailLog: {
        payload: Prisma.$EmailLogPayload<ExtArgs>
        fields: Prisma.EmailLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          findFirst: {
            args: Prisma.EmailLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          findMany: {
            args: Prisma.EmailLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>[]
          }
          create: {
            args: Prisma.EmailLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          createMany: {
            args: Prisma.EmailLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>[]
          }
          delete: {
            args: Prisma.EmailLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          update: {
            args: Prisma.EmailLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          deleteMany: {
            args: Prisma.EmailLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>[]
          }
          upsert: {
            args: Prisma.EmailLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          aggregate: {
            args: Prisma.EmailLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailLog>
          }
          groupBy: {
            args: Prisma.EmailLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailLogCountArgs<ExtArgs>
            result: $Utils.Optional<EmailLogCountAggregateOutputType> | number
          }
        }
      }
      WebhookLog: {
        payload: Prisma.$WebhookLogPayload<ExtArgs>
        fields: Prisma.WebhookLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WebhookLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WebhookLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookLogPayload>
          }
          findFirst: {
            args: Prisma.WebhookLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WebhookLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookLogPayload>
          }
          findMany: {
            args: Prisma.WebhookLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookLogPayload>[]
          }
          create: {
            args: Prisma.WebhookLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookLogPayload>
          }
          createMany: {
            args: Prisma.WebhookLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WebhookLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookLogPayload>[]
          }
          delete: {
            args: Prisma.WebhookLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookLogPayload>
          }
          update: {
            args: Prisma.WebhookLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookLogPayload>
          }
          deleteMany: {
            args: Prisma.WebhookLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WebhookLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WebhookLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookLogPayload>[]
          }
          upsert: {
            args: Prisma.WebhookLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookLogPayload>
          }
          aggregate: {
            args: Prisma.WebhookLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWebhookLog>
          }
          groupBy: {
            args: Prisma.WebhookLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<WebhookLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.WebhookLogCountArgs<ExtArgs>
            result: $Utils.Optional<WebhookLogCountAggregateOutputType> | number
          }
        }
      }
      WebhookSubscription: {
        payload: Prisma.$WebhookSubscriptionPayload<ExtArgs>
        fields: Prisma.WebhookSubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WebhookSubscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookSubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WebhookSubscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookSubscriptionPayload>
          }
          findFirst: {
            args: Prisma.WebhookSubscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookSubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WebhookSubscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookSubscriptionPayload>
          }
          findMany: {
            args: Prisma.WebhookSubscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookSubscriptionPayload>[]
          }
          create: {
            args: Prisma.WebhookSubscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookSubscriptionPayload>
          }
          createMany: {
            args: Prisma.WebhookSubscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WebhookSubscriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookSubscriptionPayload>[]
          }
          delete: {
            args: Prisma.WebhookSubscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookSubscriptionPayload>
          }
          update: {
            args: Prisma.WebhookSubscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookSubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.WebhookSubscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WebhookSubscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WebhookSubscriptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookSubscriptionPayload>[]
          }
          upsert: {
            args: Prisma.WebhookSubscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookSubscriptionPayload>
          }
          aggregate: {
            args: Prisma.WebhookSubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWebhookSubscription>
          }
          groupBy: {
            args: Prisma.WebhookSubscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<WebhookSubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.WebhookSubscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<WebhookSubscriptionCountAggregateOutputType> | number
          }
        }
      }
      TrackingVisit: {
        payload: Prisma.$TrackingVisitPayload<ExtArgs>
        fields: Prisma.TrackingVisitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrackingVisitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackingVisitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrackingVisitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackingVisitPayload>
          }
          findFirst: {
            args: Prisma.TrackingVisitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackingVisitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrackingVisitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackingVisitPayload>
          }
          findMany: {
            args: Prisma.TrackingVisitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackingVisitPayload>[]
          }
          create: {
            args: Prisma.TrackingVisitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackingVisitPayload>
          }
          createMany: {
            args: Prisma.TrackingVisitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TrackingVisitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackingVisitPayload>[]
          }
          delete: {
            args: Prisma.TrackingVisitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackingVisitPayload>
          }
          update: {
            args: Prisma.TrackingVisitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackingVisitPayload>
          }
          deleteMany: {
            args: Prisma.TrackingVisitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TrackingVisitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TrackingVisitUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackingVisitPayload>[]
          }
          upsert: {
            args: Prisma.TrackingVisitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackingVisitPayload>
          }
          aggregate: {
            args: Prisma.TrackingVisitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrackingVisit>
          }
          groupBy: {
            args: Prisma.TrackingVisitGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrackingVisitGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrackingVisitCountArgs<ExtArgs>
            result: $Utils.Optional<TrackingVisitCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      Ticket: {
        payload: Prisma.$TicketPayload<ExtArgs>
        fields: Prisma.TicketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TicketFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TicketFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          findFirst: {
            args: Prisma.TicketFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TicketFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          findMany: {
            args: Prisma.TicketFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>[]
          }
          create: {
            args: Prisma.TicketCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          createMany: {
            args: Prisma.TicketCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TicketCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>[]
          }
          delete: {
            args: Prisma.TicketDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          update: {
            args: Prisma.TicketUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          deleteMany: {
            args: Prisma.TicketDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TicketUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TicketUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>[]
          }
          upsert: {
            args: Prisma.TicketUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          aggregate: {
            args: Prisma.TicketAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicket>
          }
          groupBy: {
            args: Prisma.TicketGroupByArgs<ExtArgs>
            result: $Utils.Optional<TicketGroupByOutputType>[]
          }
          count: {
            args: Prisma.TicketCountArgs<ExtArgs>
            result: $Utils.Optional<TicketCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      OrderItem: {
        payload: Prisma.$OrderItemPayload<ExtArgs>
        fields: Prisma.OrderItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findFirst: {
            args: Prisma.OrderItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findMany: {
            args: Prisma.OrderItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          create: {
            args: Prisma.OrderItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          createMany: {
            args: Prisma.OrderItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          delete: {
            args: Prisma.OrderItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          update: {
            args: Prisma.OrderItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          deleteMany: {
            args: Prisma.OrderItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          upsert: {
            args: Prisma.OrderItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          aggregate: {
            args: Prisma.OrderItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderItem>
          }
          groupBy: {
            args: Prisma.OrderItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderItemCountArgs<ExtArgs>
            result: $Utils.Optional<OrderItemCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      CheckinLog: {
        payload: Prisma.$CheckinLogPayload<ExtArgs>
        fields: Prisma.CheckinLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CheckinLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckinLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CheckinLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckinLogPayload>
          }
          findFirst: {
            args: Prisma.CheckinLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckinLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CheckinLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckinLogPayload>
          }
          findMany: {
            args: Prisma.CheckinLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckinLogPayload>[]
          }
          create: {
            args: Prisma.CheckinLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckinLogPayload>
          }
          createMany: {
            args: Prisma.CheckinLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CheckinLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckinLogPayload>[]
          }
          delete: {
            args: Prisma.CheckinLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckinLogPayload>
          }
          update: {
            args: Prisma.CheckinLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckinLogPayload>
          }
          deleteMany: {
            args: Prisma.CheckinLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CheckinLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CheckinLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckinLogPayload>[]
          }
          upsert: {
            args: Prisma.CheckinLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckinLogPayload>
          }
          aggregate: {
            args: Prisma.CheckinLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCheckinLog>
          }
          groupBy: {
            args: Prisma.CheckinLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<CheckinLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.CheckinLogCountArgs<ExtArgs>
            result: $Utils.Optional<CheckinLogCountAggregateOutputType> | number
          }
        }
      }
      UserOrganization: {
        payload: Prisma.$UserOrganizationPayload<ExtArgs>
        fields: Prisma.UserOrganizationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserOrganizationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserOrganizationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserOrganizationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserOrganizationPayload>
          }
          findFirst: {
            args: Prisma.UserOrganizationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserOrganizationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserOrganizationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserOrganizationPayload>
          }
          findMany: {
            args: Prisma.UserOrganizationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserOrganizationPayload>[]
          }
          create: {
            args: Prisma.UserOrganizationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserOrganizationPayload>
          }
          createMany: {
            args: Prisma.UserOrganizationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserOrganizationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserOrganizationPayload>[]
          }
          delete: {
            args: Prisma.UserOrganizationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserOrganizationPayload>
          }
          update: {
            args: Prisma.UserOrganizationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserOrganizationPayload>
          }
          deleteMany: {
            args: Prisma.UserOrganizationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserOrganizationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserOrganizationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserOrganizationPayload>[]
          }
          upsert: {
            args: Prisma.UserOrganizationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserOrganizationPayload>
          }
          aggregate: {
            args: Prisma.UserOrganizationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserOrganization>
          }
          groupBy: {
            args: Prisma.UserOrganizationGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserOrganizationGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserOrganizationCountArgs<ExtArgs>
            result: $Utils.Optional<UserOrganizationCountAggregateOutputType> | number
          }
        }
      }
      EventSetting: {
        payload: Prisma.$EventSettingPayload<ExtArgs>
        fields: Prisma.EventSettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventSettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventSettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSettingPayload>
          }
          findFirst: {
            args: Prisma.EventSettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventSettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSettingPayload>
          }
          findMany: {
            args: Prisma.EventSettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSettingPayload>[]
          }
          create: {
            args: Prisma.EventSettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSettingPayload>
          }
          createMany: {
            args: Prisma.EventSettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventSettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSettingPayload>[]
          }
          delete: {
            args: Prisma.EventSettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSettingPayload>
          }
          update: {
            args: Prisma.EventSettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSettingPayload>
          }
          deleteMany: {
            args: Prisma.EventSettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventSettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventSettingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSettingPayload>[]
          }
          upsert: {
            args: Prisma.EventSettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventSettingPayload>
          }
          aggregate: {
            args: Prisma.EventSettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventSetting>
          }
          groupBy: {
            args: Prisma.EventSettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventSettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventSettingCountArgs<ExtArgs>
            result: $Utils.Optional<EventSettingCountAggregateOutputType> | number
          }
        }
      }
      Image: {
        payload: Prisma.$ImagePayload<ExtArgs>
        fields: Prisma.ImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findFirst: {
            args: Prisma.ImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findMany: {
            args: Prisma.ImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          create: {
            args: Prisma.ImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          createMany: {
            args: Prisma.ImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          delete: {
            args: Prisma.ImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          update: {
            args: Prisma.ImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          deleteMany: {
            args: Prisma.ImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ImageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          upsert: {
            args: Prisma.ImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          aggregate: {
            args: Prisma.ImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImage>
          }
          groupBy: {
            args: Prisma.ImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImageCountArgs<ExtArgs>
            result: $Utils.Optional<ImageCountAggregateOutputType> | number
          }
        }
      }
      ImageLink: {
        payload: Prisma.$ImageLinkPayload<ExtArgs>
        fields: Prisma.ImageLinkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImageLinkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImageLinkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImageLinkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImageLinkPayload>
          }
          findFirst: {
            args: Prisma.ImageLinkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImageLinkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImageLinkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImageLinkPayload>
          }
          findMany: {
            args: Prisma.ImageLinkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImageLinkPayload>[]
          }
          create: {
            args: Prisma.ImageLinkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImageLinkPayload>
          }
          createMany: {
            args: Prisma.ImageLinkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ImageLinkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImageLinkPayload>[]
          }
          delete: {
            args: Prisma.ImageLinkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImageLinkPayload>
          }
          update: {
            args: Prisma.ImageLinkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImageLinkPayload>
          }
          deleteMany: {
            args: Prisma.ImageLinkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ImageLinkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ImageLinkUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImageLinkPayload>[]
          }
          upsert: {
            args: Prisma.ImageLinkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImageLinkPayload>
          }
          aggregate: {
            args: Prisma.ImageLinkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImageLink>
          }
          groupBy: {
            args: Prisma.ImageLinkGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImageLinkGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImageLinkCountArgs<ExtArgs>
            result: $Utils.Optional<ImageLinkCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    organization?: OrganizationOmit
    promoCode?: PromoCodeOmit
    orderPromo?: OrderPromoOmit
    referralCode?: ReferralCodeOmit
    emailLog?: EmailLogOmit
    webhookLog?: WebhookLogOmit
    webhookSubscription?: WebhookSubscriptionOmit
    trackingVisit?: TrackingVisitOmit
    event?: EventOmit
    ticket?: TicketOmit
    order?: OrderOmit
    orderItem?: OrderItemOmit
    payment?: PaymentOmit
    checkinLog?: CheckinLogOmit
    userOrganization?: UserOrganizationOmit
    eventSetting?: EventSettingOmit
    image?: ImageOmit
    imageLink?: ImageLinkOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    referral_codes: number
    email_logs: number
    orders: number
    checkin_logs: number
    user_organizations: number
    tracking_visits: number
    webhook_logs: number
    images: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referral_codes?: boolean | UserCountOutputTypeCountReferral_codesArgs
    email_logs?: boolean | UserCountOutputTypeCountEmail_logsArgs
    orders?: boolean | UserCountOutputTypeCountOrdersArgs
    checkin_logs?: boolean | UserCountOutputTypeCountCheckin_logsArgs
    user_organizations?: boolean | UserCountOutputTypeCountUser_organizationsArgs
    tracking_visits?: boolean | UserCountOutputTypeCountTracking_visitsArgs
    webhook_logs?: boolean | UserCountOutputTypeCountWebhook_logsArgs
    images?: boolean | UserCountOutputTypeCountImagesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReferral_codesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferralCodeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEmail_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCheckin_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CheckinLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUser_organizationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserOrganizationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTracking_visitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrackingVisitWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWebhook_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebhookLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
  }


  /**
   * Count Type OrganizationCountOutputType
   */

  export type OrganizationCountOutputType = {
    events: number
    webhook_subscriptions: number
    user_organizations: number
    image_links: number
  }

  export type OrganizationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | OrganizationCountOutputTypeCountEventsArgs
    webhook_subscriptions?: boolean | OrganizationCountOutputTypeCountWebhook_subscriptionsArgs
    user_organizations?: boolean | OrganizationCountOutputTypeCountUser_organizationsArgs
    image_links?: boolean | OrganizationCountOutputTypeCountImage_linksArgs
  }

  // Custom InputTypes
  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationCountOutputType
     */
    select?: OrganizationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountWebhook_subscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebhookSubscriptionWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountUser_organizationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserOrganizationWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountImage_linksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageLinkWhereInput
  }


  /**
   * Count Type PromoCodeCountOutputType
   */

  export type PromoCodeCountOutputType = {
    order_promos: number
  }

  export type PromoCodeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order_promos?: boolean | PromoCodeCountOutputTypeCountOrder_promosArgs
  }

  // Custom InputTypes
  /**
   * PromoCodeCountOutputType without action
   */
  export type PromoCodeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoCodeCountOutputType
     */
    select?: PromoCodeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PromoCodeCountOutputType without action
   */
  export type PromoCodeCountOutputTypeCountOrder_promosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderPromoWhereInput
  }


  /**
   * Count Type EventCountOutputType
   */

  export type EventCountOutputType = {
    tickets: number
    email_logs: number
    webhook_logs: number
    checkin_logs: number
    tracking_visits: number
    event_settings: number
    image_links: number
  }

  export type EventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | EventCountOutputTypeCountTicketsArgs
    email_logs?: boolean | EventCountOutputTypeCountEmail_logsArgs
    webhook_logs?: boolean | EventCountOutputTypeCountWebhook_logsArgs
    checkin_logs?: boolean | EventCountOutputTypeCountCheckin_logsArgs
    tracking_visits?: boolean | EventCountOutputTypeCountTracking_visitsArgs
    event_settings?: boolean | EventCountOutputTypeCountEvent_settingsArgs
    image_links?: boolean | EventCountOutputTypeCountImage_linksArgs
  }

  // Custom InputTypes
  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountEmail_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailLogWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountWebhook_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebhookLogWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountCheckin_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CheckinLogWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountTracking_visitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrackingVisitWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountEvent_settingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventSettingWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountImage_linksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageLinkWhereInput
  }


  /**
   * Count Type TicketCountOutputType
   */

  export type TicketCountOutputType = {
    order_items: number
    checkin_logs: number
  }

  export type TicketCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order_items?: boolean | TicketCountOutputTypeCountOrder_itemsArgs
    checkin_logs?: boolean | TicketCountOutputTypeCountCheckin_logsArgs
  }

  // Custom InputTypes
  /**
   * TicketCountOutputType without action
   */
  export type TicketCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketCountOutputType
     */
    select?: TicketCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TicketCountOutputType without action
   */
  export type TicketCountOutputTypeCountOrder_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }

  /**
   * TicketCountOutputType without action
   */
  export type TicketCountOutputTypeCountCheckin_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CheckinLogWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    order_items: number
    order_promos: number
    payments: number
    webhook_logs: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order_items?: boolean | OrderCountOutputTypeCountOrder_itemsArgs
    order_promos?: boolean | OrderCountOutputTypeCountOrder_promosArgs
    payments?: boolean | OrderCountOutputTypeCountPaymentsArgs
    webhook_logs?: boolean | OrderCountOutputTypeCountWebhook_logsArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountOrder_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountOrder_promosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderPromoWhereInput
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountWebhook_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebhookLogWhereInput
  }


  /**
   * Count Type ImageCountOutputType
   */

  export type ImageCountOutputType = {
    image_links: number
  }

  export type ImageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    image_links?: boolean | ImageCountOutputTypeCountImage_linksArgs
  }

  // Custom InputTypes
  /**
   * ImageCountOutputType without action
   */
  export type ImageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageCountOutputType
     */
    select?: ImageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ImageCountOutputType without action
   */
  export type ImageCountOutputTypeCountImage_linksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageLinkWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    role: $Enums.UserRole | null
    is_verified: boolean | null
    supabase_id: string | null
    phone: string | null
    avatar_url: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    role: $Enums.UserRole | null
    is_verified: boolean | null
    supabase_id: string | null
    phone: string | null
    avatar_url: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    role: number
    is_verified: number
    supabase_id: number
    phone: number
    avatar_url: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    role?: true
    is_verified?: true
    supabase_id?: true
    phone?: true
    avatar_url?: true
    created_at?: true
    updated_at?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    role?: true
    is_verified?: true
    supabase_id?: true
    phone?: true
    avatar_url?: true
    created_at?: true
    updated_at?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    role?: true
    is_verified?: true
    supabase_id?: true
    phone?: true
    avatar_url?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string | null
    role: $Enums.UserRole
    is_verified: boolean
    supabase_id: string | null
    phone: string | null
    avatar_url: string | null
    created_at: Date
    updated_at: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    is_verified?: boolean
    supabase_id?: boolean
    phone?: boolean
    avatar_url?: boolean
    created_at?: boolean
    updated_at?: boolean
    referral_codes?: boolean | User$referral_codesArgs<ExtArgs>
    email_logs?: boolean | User$email_logsArgs<ExtArgs>
    orders?: boolean | User$ordersArgs<ExtArgs>
    checkin_logs?: boolean | User$checkin_logsArgs<ExtArgs>
    user_organizations?: boolean | User$user_organizationsArgs<ExtArgs>
    tracking_visits?: boolean | User$tracking_visitsArgs<ExtArgs>
    webhook_logs?: boolean | User$webhook_logsArgs<ExtArgs>
    images?: boolean | User$imagesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    is_verified?: boolean
    supabase_id?: boolean
    phone?: boolean
    avatar_url?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    is_verified?: boolean
    supabase_id?: boolean
    phone?: boolean
    avatar_url?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    is_verified?: boolean
    supabase_id?: boolean
    phone?: boolean
    avatar_url?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "role" | "is_verified" | "supabase_id" | "phone" | "avatar_url" | "created_at" | "updated_at", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referral_codes?: boolean | User$referral_codesArgs<ExtArgs>
    email_logs?: boolean | User$email_logsArgs<ExtArgs>
    orders?: boolean | User$ordersArgs<ExtArgs>
    checkin_logs?: boolean | User$checkin_logsArgs<ExtArgs>
    user_organizations?: boolean | User$user_organizationsArgs<ExtArgs>
    tracking_visits?: boolean | User$tracking_visitsArgs<ExtArgs>
    webhook_logs?: boolean | User$webhook_logsArgs<ExtArgs>
    images?: boolean | User$imagesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      referral_codes: Prisma.$ReferralCodePayload<ExtArgs>[]
      email_logs: Prisma.$EmailLogPayload<ExtArgs>[]
      orders: Prisma.$OrderPayload<ExtArgs>[]
      checkin_logs: Prisma.$CheckinLogPayload<ExtArgs>[]
      user_organizations: Prisma.$UserOrganizationPayload<ExtArgs>[]
      tracking_visits: Prisma.$TrackingVisitPayload<ExtArgs>[]
      webhook_logs: Prisma.$WebhookLogPayload<ExtArgs>[]
      images: Prisma.$ImagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string | null
      role: $Enums.UserRole
      is_verified: boolean
      supabase_id: string | null
      phone: string | null
      avatar_url: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    referral_codes<T extends User$referral_codesArgs<ExtArgs> = {}>(args?: Subset<T, User$referral_codesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    email_logs<T extends User$email_logsArgs<ExtArgs> = {}>(args?: Subset<T, User$email_logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orders<T extends User$ordersArgs<ExtArgs> = {}>(args?: Subset<T, User$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    checkin_logs<T extends User$checkin_logsArgs<ExtArgs> = {}>(args?: Subset<T, User$checkin_logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckinLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user_organizations<T extends User$user_organizationsArgs<ExtArgs> = {}>(args?: Subset<T, User$user_organizationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserOrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tracking_visits<T extends User$tracking_visitsArgs<ExtArgs> = {}>(args?: Subset<T, User$tracking_visitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackingVisitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    webhook_logs<T extends User$webhook_logsArgs<ExtArgs> = {}>(args?: Subset<T, User$webhook_logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    images<T extends User$imagesArgs<ExtArgs> = {}>(args?: Subset<T, User$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly is_verified: FieldRef<"User", 'Boolean'>
    readonly supabase_id: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly avatar_url: FieldRef<"User", 'String'>
    readonly created_at: FieldRef<"User", 'DateTime'>
    readonly updated_at: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.referral_codes
   */
  export type User$referral_codesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    where?: ReferralCodeWhereInput
    orderBy?: ReferralCodeOrderByWithRelationInput | ReferralCodeOrderByWithRelationInput[]
    cursor?: ReferralCodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReferralCodeScalarFieldEnum | ReferralCodeScalarFieldEnum[]
  }

  /**
   * User.email_logs
   */
  export type User$email_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    where?: EmailLogWhereInput
    orderBy?: EmailLogOrderByWithRelationInput | EmailLogOrderByWithRelationInput[]
    cursor?: EmailLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailLogScalarFieldEnum | EmailLogScalarFieldEnum[]
  }

  /**
   * User.orders
   */
  export type User$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * User.checkin_logs
   */
  export type User$checkin_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckinLog
     */
    select?: CheckinLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckinLog
     */
    omit?: CheckinLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckinLogInclude<ExtArgs> | null
    where?: CheckinLogWhereInput
    orderBy?: CheckinLogOrderByWithRelationInput | CheckinLogOrderByWithRelationInput[]
    cursor?: CheckinLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CheckinLogScalarFieldEnum | CheckinLogScalarFieldEnum[]
  }

  /**
   * User.user_organizations
   */
  export type User$user_organizationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOrganization
     */
    select?: UserOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserOrganization
     */
    omit?: UserOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOrganizationInclude<ExtArgs> | null
    where?: UserOrganizationWhereInput
    orderBy?: UserOrganizationOrderByWithRelationInput | UserOrganizationOrderByWithRelationInput[]
    cursor?: UserOrganizationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserOrganizationScalarFieldEnum | UserOrganizationScalarFieldEnum[]
  }

  /**
   * User.tracking_visits
   */
  export type User$tracking_visitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackingVisit
     */
    select?: TrackingVisitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackingVisit
     */
    omit?: TrackingVisitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackingVisitInclude<ExtArgs> | null
    where?: TrackingVisitWhereInput
    orderBy?: TrackingVisitOrderByWithRelationInput | TrackingVisitOrderByWithRelationInput[]
    cursor?: TrackingVisitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrackingVisitScalarFieldEnum | TrackingVisitScalarFieldEnum[]
  }

  /**
   * User.webhook_logs
   */
  export type User$webhook_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookLog
     */
    select?: WebhookLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookLog
     */
    omit?: WebhookLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookLogInclude<ExtArgs> | null
    where?: WebhookLogWhereInput
    orderBy?: WebhookLogOrderByWithRelationInput | WebhookLogOrderByWithRelationInput[]
    cursor?: WebhookLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WebhookLogScalarFieldEnum | WebhookLogScalarFieldEnum[]
  }

  /**
   * User.images
   */
  export type User$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    cursor?: ImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Organization
   */

  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationAvgAggregateOutputType = {
    id: number | null
  }

  export type OrganizationSumAggregateOutputType = {
    id: number | null
  }

  export type OrganizationMinAggregateOutputType = {
    id: number | null
    name: string | null
    contact_email: string | null
    phone: string | null
    address: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type OrganizationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    contact_email: string | null
    phone: string | null
    address: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type OrganizationCountAggregateOutputType = {
    id: number
    name: number
    contact_email: number
    phone: number
    address: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type OrganizationAvgAggregateInputType = {
    id?: true
  }

  export type OrganizationSumAggregateInputType = {
    id?: true
  }

  export type OrganizationMinAggregateInputType = {
    id?: true
    name?: true
    contact_email?: true
    phone?: true
    address?: true
    created_at?: true
    updated_at?: true
  }

  export type OrganizationMaxAggregateInputType = {
    id?: true
    name?: true
    contact_email?: true
    phone?: true
    address?: true
    created_at?: true
    updated_at?: true
  }

  export type OrganizationCountAggregateInputType = {
    id?: true
    name?: true
    contact_email?: true
    phone?: true
    address?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type OrganizationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organization to aggregate.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrganizationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrganizationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }




  export type OrganizationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationWhereInput
    orderBy?: OrganizationOrderByWithAggregationInput | OrganizationOrderByWithAggregationInput[]
    by: OrganizationScalarFieldEnum[] | OrganizationScalarFieldEnum
    having?: OrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _avg?: OrganizationAvgAggregateInputType
    _sum?: OrganizationSumAggregateInputType
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }

  export type OrganizationGroupByOutputType = {
    id: number
    name: string
    contact_email: string | null
    phone: string | null
    address: string | null
    created_at: Date
    updated_at: Date
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contact_email?: boolean
    phone?: boolean
    address?: boolean
    created_at?: boolean
    updated_at?: boolean
    events?: boolean | Organization$eventsArgs<ExtArgs>
    webhook_subscriptions?: boolean | Organization$webhook_subscriptionsArgs<ExtArgs>
    user_organizations?: boolean | Organization$user_organizationsArgs<ExtArgs>
    image_links?: boolean | Organization$image_linksArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contact_email?: boolean
    phone?: boolean
    address?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contact_email?: boolean
    phone?: boolean
    address?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectScalar = {
    id?: boolean
    name?: boolean
    contact_email?: boolean
    phone?: boolean
    address?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type OrganizationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "contact_email" | "phone" | "address" | "created_at" | "updated_at", ExtArgs["result"]["organization"]>
  export type OrganizationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | Organization$eventsArgs<ExtArgs>
    webhook_subscriptions?: boolean | Organization$webhook_subscriptionsArgs<ExtArgs>
    user_organizations?: boolean | Organization$user_organizationsArgs<ExtArgs>
    image_links?: boolean | Organization$image_linksArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrganizationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type OrganizationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OrganizationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Organization"
    objects: {
      events: Prisma.$EventPayload<ExtArgs>[]
      webhook_subscriptions: Prisma.$WebhookSubscriptionPayload<ExtArgs>[]
      user_organizations: Prisma.$UserOrganizationPayload<ExtArgs>[]
      image_links: Prisma.$ImageLinkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      contact_email: string | null
      phone: string | null
      address: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["organization"]>
    composites: {}
  }

  type OrganizationGetPayload<S extends boolean | null | undefined | OrganizationDefaultArgs> = $Result.GetResult<Prisma.$OrganizationPayload, S>

  type OrganizationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrganizationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrganizationCountAggregateInputType | true
    }

  export interface OrganizationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Organization'], meta: { name: 'Organization' } }
    /**
     * Find zero or one Organization that matches the filter.
     * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrganizationFindUniqueArgs>(args: SelectSubset<T, OrganizationFindUniqueArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Organization that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrganizationFindUniqueOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrganizationFindUniqueOrThrowArgs>(args: SelectSubset<T, OrganizationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrganizationFindFirstArgs>(args?: SelectSubset<T, OrganizationFindFirstArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrganizationFindFirstOrThrowArgs>(args?: SelectSubset<T, OrganizationFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrganizationFindManyArgs>(args?: SelectSubset<T, OrganizationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
     */
    create<T extends OrganizationCreateArgs>(args: SelectSubset<T, OrganizationCreateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Organizations.
     * @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrganizationCreateManyArgs>(args?: SelectSubset<T, OrganizationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Organizations and returns the data saved in the database.
     * @param {OrganizationCreateManyAndReturnArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrganizationCreateManyAndReturnArgs>(args?: SelectSubset<T, OrganizationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
     */
    delete<T extends OrganizationDeleteArgs>(args: SelectSubset<T, OrganizationDeleteArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrganizationUpdateArgs>(args: SelectSubset<T, OrganizationUpdateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrganizationDeleteManyArgs>(args?: SelectSubset<T, OrganizationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrganizationUpdateManyArgs>(args: SelectSubset<T, OrganizationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations and returns the data updated in the database.
     * @param {OrganizationUpdateManyAndReturnArgs} args - Arguments to update many Organizations.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrganizationUpdateManyAndReturnArgs>(args: SelectSubset<T, OrganizationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
     */
    upsert<T extends OrganizationUpsertArgs>(args: SelectSubset<T, OrganizationUpsertArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationCountArgs>(
      args?: Subset<T, OrganizationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): Prisma.PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Organization model
   */
  readonly fields: OrganizationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrganizationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    events<T extends Organization$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    webhook_subscriptions<T extends Organization$webhook_subscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$webhook_subscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookSubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user_organizations<T extends Organization$user_organizationsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$user_organizationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserOrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    image_links<T extends Organization$image_linksArgs<ExtArgs> = {}>(args?: Subset<T, Organization$image_linksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImageLinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Organization model
   */
  interface OrganizationFieldRefs {
    readonly id: FieldRef<"Organization", 'Int'>
    readonly name: FieldRef<"Organization", 'String'>
    readonly contact_email: FieldRef<"Organization", 'String'>
    readonly phone: FieldRef<"Organization", 'String'>
    readonly address: FieldRef<"Organization", 'String'>
    readonly created_at: FieldRef<"Organization", 'DateTime'>
    readonly updated_at: FieldRef<"Organization", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Organization findUnique
   */
  export type OrganizationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findUniqueOrThrow
   */
  export type OrganizationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findFirst
   */
  export type OrganizationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findFirstOrThrow
   */
  export type OrganizationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findMany
   */
  export type OrganizationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organizations to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization create
   */
  export type OrganizationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to create a Organization.
     */
    data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
  }

  /**
   * Organization createMany
   */
  export type OrganizationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization createManyAndReturn
   */
  export type OrganizationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization update
   */
  export type OrganizationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to update a Organization.
     */
    data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    /**
     * Choose, which Organization to update.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
  }

  /**
   * Organization updateManyAndReturn
   */
  export type OrganizationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
  }

  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The filter to search for the Organization to update in case it exists.
     */
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
     */
    create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
  }

  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter which Organization to delete.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organizations to delete
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to delete.
     */
    limit?: number
  }

  /**
   * Organization.events
   */
  export type Organization$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Organization.webhook_subscriptions
   */
  export type Organization$webhook_subscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookSubscription
     */
    omit?: WebhookSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookSubscriptionInclude<ExtArgs> | null
    where?: WebhookSubscriptionWhereInput
    orderBy?: WebhookSubscriptionOrderByWithRelationInput | WebhookSubscriptionOrderByWithRelationInput[]
    cursor?: WebhookSubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WebhookSubscriptionScalarFieldEnum | WebhookSubscriptionScalarFieldEnum[]
  }

  /**
   * Organization.user_organizations
   */
  export type Organization$user_organizationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOrganization
     */
    select?: UserOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserOrganization
     */
    omit?: UserOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOrganizationInclude<ExtArgs> | null
    where?: UserOrganizationWhereInput
    orderBy?: UserOrganizationOrderByWithRelationInput | UserOrganizationOrderByWithRelationInput[]
    cursor?: UserOrganizationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserOrganizationScalarFieldEnum | UserOrganizationScalarFieldEnum[]
  }

  /**
   * Organization.image_links
   */
  export type Organization$image_linksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageLink
     */
    select?: ImageLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImageLink
     */
    omit?: ImageLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageLinkInclude<ExtArgs> | null
    where?: ImageLinkWhereInput
    orderBy?: ImageLinkOrderByWithRelationInput | ImageLinkOrderByWithRelationInput[]
    cursor?: ImageLinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImageLinkScalarFieldEnum | ImageLinkScalarFieldEnum[]
  }

  /**
   * Organization without action
   */
  export type OrganizationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
  }


  /**
   * Model PromoCode
   */

  export type AggregatePromoCode = {
    _count: PromoCodeCountAggregateOutputType | null
    _avg: PromoCodeAvgAggregateOutputType | null
    _sum: PromoCodeSumAggregateOutputType | null
    _min: PromoCodeMinAggregateOutputType | null
    _max: PromoCodeMaxAggregateOutputType | null
  }

  export type PromoCodeAvgAggregateOutputType = {
    id: number | null
    discount_value: Decimal | null
    max_uses: number | null
    uses: number | null
  }

  export type PromoCodeSumAggregateOutputType = {
    id: number | null
    discount_value: Decimal | null
    max_uses: number | null
    uses: number | null
  }

  export type PromoCodeMinAggregateOutputType = {
    id: number | null
    code: string | null
    description: string | null
    discount_type: string | null
    discount_value: Decimal | null
    max_uses: number | null
    uses: number | null
    valid_from: Date | null
    valid_until: Date | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PromoCodeMaxAggregateOutputType = {
    id: number | null
    code: string | null
    description: string | null
    discount_type: string | null
    discount_value: Decimal | null
    max_uses: number | null
    uses: number | null
    valid_from: Date | null
    valid_until: Date | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PromoCodeCountAggregateOutputType = {
    id: number
    code: number
    description: number
    discount_type: number
    discount_value: number
    max_uses: number
    uses: number
    valid_from: number
    valid_until: number
    is_active: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type PromoCodeAvgAggregateInputType = {
    id?: true
    discount_value?: true
    max_uses?: true
    uses?: true
  }

  export type PromoCodeSumAggregateInputType = {
    id?: true
    discount_value?: true
    max_uses?: true
    uses?: true
  }

  export type PromoCodeMinAggregateInputType = {
    id?: true
    code?: true
    description?: true
    discount_type?: true
    discount_value?: true
    max_uses?: true
    uses?: true
    valid_from?: true
    valid_until?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type PromoCodeMaxAggregateInputType = {
    id?: true
    code?: true
    description?: true
    discount_type?: true
    discount_value?: true
    max_uses?: true
    uses?: true
    valid_from?: true
    valid_until?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type PromoCodeCountAggregateInputType = {
    id?: true
    code?: true
    description?: true
    discount_type?: true
    discount_value?: true
    max_uses?: true
    uses?: true
    valid_from?: true
    valid_until?: true
    is_active?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type PromoCodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PromoCode to aggregate.
     */
    where?: PromoCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromoCodes to fetch.
     */
    orderBy?: PromoCodeOrderByWithRelationInput | PromoCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PromoCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromoCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromoCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PromoCodes
    **/
    _count?: true | PromoCodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PromoCodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PromoCodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PromoCodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PromoCodeMaxAggregateInputType
  }

  export type GetPromoCodeAggregateType<T extends PromoCodeAggregateArgs> = {
        [P in keyof T & keyof AggregatePromoCode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePromoCode[P]>
      : GetScalarType<T[P], AggregatePromoCode[P]>
  }




  export type PromoCodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromoCodeWhereInput
    orderBy?: PromoCodeOrderByWithAggregationInput | PromoCodeOrderByWithAggregationInput[]
    by: PromoCodeScalarFieldEnum[] | PromoCodeScalarFieldEnum
    having?: PromoCodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PromoCodeCountAggregateInputType | true
    _avg?: PromoCodeAvgAggregateInputType
    _sum?: PromoCodeSumAggregateInputType
    _min?: PromoCodeMinAggregateInputType
    _max?: PromoCodeMaxAggregateInputType
  }

  export type PromoCodeGroupByOutputType = {
    id: number
    code: string
    description: string | null
    discount_type: string
    discount_value: Decimal
    max_uses: number
    uses: number
    valid_from: Date | null
    valid_until: Date | null
    is_active: boolean
    created_at: Date
    updated_at: Date
    _count: PromoCodeCountAggregateOutputType | null
    _avg: PromoCodeAvgAggregateOutputType | null
    _sum: PromoCodeSumAggregateOutputType | null
    _min: PromoCodeMinAggregateOutputType | null
    _max: PromoCodeMaxAggregateOutputType | null
  }

  type GetPromoCodeGroupByPayload<T extends PromoCodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PromoCodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PromoCodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PromoCodeGroupByOutputType[P]>
            : GetScalarType<T[P], PromoCodeGroupByOutputType[P]>
        }
      >
    >


  export type PromoCodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    description?: boolean
    discount_type?: boolean
    discount_value?: boolean
    max_uses?: boolean
    uses?: boolean
    valid_from?: boolean
    valid_until?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
    order_promos?: boolean | PromoCode$order_promosArgs<ExtArgs>
    _count?: boolean | PromoCodeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["promoCode"]>

  export type PromoCodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    description?: boolean
    discount_type?: boolean
    discount_value?: boolean
    max_uses?: boolean
    uses?: boolean
    valid_from?: boolean
    valid_until?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["promoCode"]>

  export type PromoCodeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    description?: boolean
    discount_type?: boolean
    discount_value?: boolean
    max_uses?: boolean
    uses?: boolean
    valid_from?: boolean
    valid_until?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["promoCode"]>

  export type PromoCodeSelectScalar = {
    id?: boolean
    code?: boolean
    description?: boolean
    discount_type?: boolean
    discount_value?: boolean
    max_uses?: boolean
    uses?: boolean
    valid_from?: boolean
    valid_until?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type PromoCodeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "description" | "discount_type" | "discount_value" | "max_uses" | "uses" | "valid_from" | "valid_until" | "is_active" | "created_at" | "updated_at", ExtArgs["result"]["promoCode"]>
  export type PromoCodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order_promos?: boolean | PromoCode$order_promosArgs<ExtArgs>
    _count?: boolean | PromoCodeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PromoCodeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PromoCodeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PromoCodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PromoCode"
    objects: {
      order_promos: Prisma.$OrderPromoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      description: string | null
      discount_type: string
      discount_value: Prisma.Decimal
      max_uses: number
      uses: number
      valid_from: Date | null
      valid_until: Date | null
      is_active: boolean
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["promoCode"]>
    composites: {}
  }

  type PromoCodeGetPayload<S extends boolean | null | undefined | PromoCodeDefaultArgs> = $Result.GetResult<Prisma.$PromoCodePayload, S>

  type PromoCodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PromoCodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PromoCodeCountAggregateInputType | true
    }

  export interface PromoCodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PromoCode'], meta: { name: 'PromoCode' } }
    /**
     * Find zero or one PromoCode that matches the filter.
     * @param {PromoCodeFindUniqueArgs} args - Arguments to find a PromoCode
     * @example
     * // Get one PromoCode
     * const promoCode = await prisma.promoCode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PromoCodeFindUniqueArgs>(args: SelectSubset<T, PromoCodeFindUniqueArgs<ExtArgs>>): Prisma__PromoCodeClient<$Result.GetResult<Prisma.$PromoCodePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PromoCode that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PromoCodeFindUniqueOrThrowArgs} args - Arguments to find a PromoCode
     * @example
     * // Get one PromoCode
     * const promoCode = await prisma.promoCode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PromoCodeFindUniqueOrThrowArgs>(args: SelectSubset<T, PromoCodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PromoCodeClient<$Result.GetResult<Prisma.$PromoCodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PromoCode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoCodeFindFirstArgs} args - Arguments to find a PromoCode
     * @example
     * // Get one PromoCode
     * const promoCode = await prisma.promoCode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PromoCodeFindFirstArgs>(args?: SelectSubset<T, PromoCodeFindFirstArgs<ExtArgs>>): Prisma__PromoCodeClient<$Result.GetResult<Prisma.$PromoCodePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PromoCode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoCodeFindFirstOrThrowArgs} args - Arguments to find a PromoCode
     * @example
     * // Get one PromoCode
     * const promoCode = await prisma.promoCode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PromoCodeFindFirstOrThrowArgs>(args?: SelectSubset<T, PromoCodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__PromoCodeClient<$Result.GetResult<Prisma.$PromoCodePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PromoCodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoCodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PromoCodes
     * const promoCodes = await prisma.promoCode.findMany()
     * 
     * // Get first 10 PromoCodes
     * const promoCodes = await prisma.promoCode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const promoCodeWithIdOnly = await prisma.promoCode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PromoCodeFindManyArgs>(args?: SelectSubset<T, PromoCodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromoCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PromoCode.
     * @param {PromoCodeCreateArgs} args - Arguments to create a PromoCode.
     * @example
     * // Create one PromoCode
     * const PromoCode = await prisma.promoCode.create({
     *   data: {
     *     // ... data to create a PromoCode
     *   }
     * })
     * 
     */
    create<T extends PromoCodeCreateArgs>(args: SelectSubset<T, PromoCodeCreateArgs<ExtArgs>>): Prisma__PromoCodeClient<$Result.GetResult<Prisma.$PromoCodePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PromoCodes.
     * @param {PromoCodeCreateManyArgs} args - Arguments to create many PromoCodes.
     * @example
     * // Create many PromoCodes
     * const promoCode = await prisma.promoCode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PromoCodeCreateManyArgs>(args?: SelectSubset<T, PromoCodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PromoCodes and returns the data saved in the database.
     * @param {PromoCodeCreateManyAndReturnArgs} args - Arguments to create many PromoCodes.
     * @example
     * // Create many PromoCodes
     * const promoCode = await prisma.promoCode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PromoCodes and only return the `id`
     * const promoCodeWithIdOnly = await prisma.promoCode.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PromoCodeCreateManyAndReturnArgs>(args?: SelectSubset<T, PromoCodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromoCodePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PromoCode.
     * @param {PromoCodeDeleteArgs} args - Arguments to delete one PromoCode.
     * @example
     * // Delete one PromoCode
     * const PromoCode = await prisma.promoCode.delete({
     *   where: {
     *     // ... filter to delete one PromoCode
     *   }
     * })
     * 
     */
    delete<T extends PromoCodeDeleteArgs>(args: SelectSubset<T, PromoCodeDeleteArgs<ExtArgs>>): Prisma__PromoCodeClient<$Result.GetResult<Prisma.$PromoCodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PromoCode.
     * @param {PromoCodeUpdateArgs} args - Arguments to update one PromoCode.
     * @example
     * // Update one PromoCode
     * const promoCode = await prisma.promoCode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PromoCodeUpdateArgs>(args: SelectSubset<T, PromoCodeUpdateArgs<ExtArgs>>): Prisma__PromoCodeClient<$Result.GetResult<Prisma.$PromoCodePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PromoCodes.
     * @param {PromoCodeDeleteManyArgs} args - Arguments to filter PromoCodes to delete.
     * @example
     * // Delete a few PromoCodes
     * const { count } = await prisma.promoCode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PromoCodeDeleteManyArgs>(args?: SelectSubset<T, PromoCodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PromoCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoCodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PromoCodes
     * const promoCode = await prisma.promoCode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PromoCodeUpdateManyArgs>(args: SelectSubset<T, PromoCodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PromoCodes and returns the data updated in the database.
     * @param {PromoCodeUpdateManyAndReturnArgs} args - Arguments to update many PromoCodes.
     * @example
     * // Update many PromoCodes
     * const promoCode = await prisma.promoCode.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PromoCodes and only return the `id`
     * const promoCodeWithIdOnly = await prisma.promoCode.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PromoCodeUpdateManyAndReturnArgs>(args: SelectSubset<T, PromoCodeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromoCodePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PromoCode.
     * @param {PromoCodeUpsertArgs} args - Arguments to update or create a PromoCode.
     * @example
     * // Update or create a PromoCode
     * const promoCode = await prisma.promoCode.upsert({
     *   create: {
     *     // ... data to create a PromoCode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PromoCode we want to update
     *   }
     * })
     */
    upsert<T extends PromoCodeUpsertArgs>(args: SelectSubset<T, PromoCodeUpsertArgs<ExtArgs>>): Prisma__PromoCodeClient<$Result.GetResult<Prisma.$PromoCodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PromoCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoCodeCountArgs} args - Arguments to filter PromoCodes to count.
     * @example
     * // Count the number of PromoCodes
     * const count = await prisma.promoCode.count({
     *   where: {
     *     // ... the filter for the PromoCodes we want to count
     *   }
     * })
    **/
    count<T extends PromoCodeCountArgs>(
      args?: Subset<T, PromoCodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PromoCodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PromoCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PromoCodeAggregateArgs>(args: Subset<T, PromoCodeAggregateArgs>): Prisma.PrismaPromise<GetPromoCodeAggregateType<T>>

    /**
     * Group by PromoCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoCodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PromoCodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PromoCodeGroupByArgs['orderBy'] }
        : { orderBy?: PromoCodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PromoCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromoCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PromoCode model
   */
  readonly fields: PromoCodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PromoCode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PromoCodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order_promos<T extends PromoCode$order_promosArgs<ExtArgs> = {}>(args?: Subset<T, PromoCode$order_promosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPromoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PromoCode model
   */
  interface PromoCodeFieldRefs {
    readonly id: FieldRef<"PromoCode", 'Int'>
    readonly code: FieldRef<"PromoCode", 'String'>
    readonly description: FieldRef<"PromoCode", 'String'>
    readonly discount_type: FieldRef<"PromoCode", 'String'>
    readonly discount_value: FieldRef<"PromoCode", 'Decimal'>
    readonly max_uses: FieldRef<"PromoCode", 'Int'>
    readonly uses: FieldRef<"PromoCode", 'Int'>
    readonly valid_from: FieldRef<"PromoCode", 'DateTime'>
    readonly valid_until: FieldRef<"PromoCode", 'DateTime'>
    readonly is_active: FieldRef<"PromoCode", 'Boolean'>
    readonly created_at: FieldRef<"PromoCode", 'DateTime'>
    readonly updated_at: FieldRef<"PromoCode", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PromoCode findUnique
   */
  export type PromoCodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoCode
     */
    select?: PromoCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromoCode
     */
    omit?: PromoCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoCodeInclude<ExtArgs> | null
    /**
     * Filter, which PromoCode to fetch.
     */
    where: PromoCodeWhereUniqueInput
  }

  /**
   * PromoCode findUniqueOrThrow
   */
  export type PromoCodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoCode
     */
    select?: PromoCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromoCode
     */
    omit?: PromoCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoCodeInclude<ExtArgs> | null
    /**
     * Filter, which PromoCode to fetch.
     */
    where: PromoCodeWhereUniqueInput
  }

  /**
   * PromoCode findFirst
   */
  export type PromoCodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoCode
     */
    select?: PromoCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromoCode
     */
    omit?: PromoCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoCodeInclude<ExtArgs> | null
    /**
     * Filter, which PromoCode to fetch.
     */
    where?: PromoCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromoCodes to fetch.
     */
    orderBy?: PromoCodeOrderByWithRelationInput | PromoCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PromoCodes.
     */
    cursor?: PromoCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromoCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromoCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PromoCodes.
     */
    distinct?: PromoCodeScalarFieldEnum | PromoCodeScalarFieldEnum[]
  }

  /**
   * PromoCode findFirstOrThrow
   */
  export type PromoCodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoCode
     */
    select?: PromoCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromoCode
     */
    omit?: PromoCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoCodeInclude<ExtArgs> | null
    /**
     * Filter, which PromoCode to fetch.
     */
    where?: PromoCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromoCodes to fetch.
     */
    orderBy?: PromoCodeOrderByWithRelationInput | PromoCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PromoCodes.
     */
    cursor?: PromoCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromoCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromoCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PromoCodes.
     */
    distinct?: PromoCodeScalarFieldEnum | PromoCodeScalarFieldEnum[]
  }

  /**
   * PromoCode findMany
   */
  export type PromoCodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoCode
     */
    select?: PromoCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromoCode
     */
    omit?: PromoCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoCodeInclude<ExtArgs> | null
    /**
     * Filter, which PromoCodes to fetch.
     */
    where?: PromoCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromoCodes to fetch.
     */
    orderBy?: PromoCodeOrderByWithRelationInput | PromoCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PromoCodes.
     */
    cursor?: PromoCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromoCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromoCodes.
     */
    skip?: number
    distinct?: PromoCodeScalarFieldEnum | PromoCodeScalarFieldEnum[]
  }

  /**
   * PromoCode create
   */
  export type PromoCodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoCode
     */
    select?: PromoCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromoCode
     */
    omit?: PromoCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoCodeInclude<ExtArgs> | null
    /**
     * The data needed to create a PromoCode.
     */
    data: XOR<PromoCodeCreateInput, PromoCodeUncheckedCreateInput>
  }

  /**
   * PromoCode createMany
   */
  export type PromoCodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PromoCodes.
     */
    data: PromoCodeCreateManyInput | PromoCodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PromoCode createManyAndReturn
   */
  export type PromoCodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoCode
     */
    select?: PromoCodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PromoCode
     */
    omit?: PromoCodeOmit<ExtArgs> | null
    /**
     * The data used to create many PromoCodes.
     */
    data: PromoCodeCreateManyInput | PromoCodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PromoCode update
   */
  export type PromoCodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoCode
     */
    select?: PromoCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromoCode
     */
    omit?: PromoCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoCodeInclude<ExtArgs> | null
    /**
     * The data needed to update a PromoCode.
     */
    data: XOR<PromoCodeUpdateInput, PromoCodeUncheckedUpdateInput>
    /**
     * Choose, which PromoCode to update.
     */
    where: PromoCodeWhereUniqueInput
  }

  /**
   * PromoCode updateMany
   */
  export type PromoCodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PromoCodes.
     */
    data: XOR<PromoCodeUpdateManyMutationInput, PromoCodeUncheckedUpdateManyInput>
    /**
     * Filter which PromoCodes to update
     */
    where?: PromoCodeWhereInput
    /**
     * Limit how many PromoCodes to update.
     */
    limit?: number
  }

  /**
   * PromoCode updateManyAndReturn
   */
  export type PromoCodeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoCode
     */
    select?: PromoCodeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PromoCode
     */
    omit?: PromoCodeOmit<ExtArgs> | null
    /**
     * The data used to update PromoCodes.
     */
    data: XOR<PromoCodeUpdateManyMutationInput, PromoCodeUncheckedUpdateManyInput>
    /**
     * Filter which PromoCodes to update
     */
    where?: PromoCodeWhereInput
    /**
     * Limit how many PromoCodes to update.
     */
    limit?: number
  }

  /**
   * PromoCode upsert
   */
  export type PromoCodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoCode
     */
    select?: PromoCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromoCode
     */
    omit?: PromoCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoCodeInclude<ExtArgs> | null
    /**
     * The filter to search for the PromoCode to update in case it exists.
     */
    where: PromoCodeWhereUniqueInput
    /**
     * In case the PromoCode found by the `where` argument doesn't exist, create a new PromoCode with this data.
     */
    create: XOR<PromoCodeCreateInput, PromoCodeUncheckedCreateInput>
    /**
     * In case the PromoCode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PromoCodeUpdateInput, PromoCodeUncheckedUpdateInput>
  }

  /**
   * PromoCode delete
   */
  export type PromoCodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoCode
     */
    select?: PromoCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromoCode
     */
    omit?: PromoCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoCodeInclude<ExtArgs> | null
    /**
     * Filter which PromoCode to delete.
     */
    where: PromoCodeWhereUniqueInput
  }

  /**
   * PromoCode deleteMany
   */
  export type PromoCodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PromoCodes to delete
     */
    where?: PromoCodeWhereInput
    /**
     * Limit how many PromoCodes to delete.
     */
    limit?: number
  }

  /**
   * PromoCode.order_promos
   */
  export type PromoCode$order_promosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPromo
     */
    select?: OrderPromoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderPromo
     */
    omit?: OrderPromoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPromoInclude<ExtArgs> | null
    where?: OrderPromoWhereInput
    orderBy?: OrderPromoOrderByWithRelationInput | OrderPromoOrderByWithRelationInput[]
    cursor?: OrderPromoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderPromoScalarFieldEnum | OrderPromoScalarFieldEnum[]
  }

  /**
   * PromoCode without action
   */
  export type PromoCodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoCode
     */
    select?: PromoCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromoCode
     */
    omit?: PromoCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoCodeInclude<ExtArgs> | null
  }


  /**
   * Model OrderPromo
   */

  export type AggregateOrderPromo = {
    _count: OrderPromoCountAggregateOutputType | null
    _avg: OrderPromoAvgAggregateOutputType | null
    _sum: OrderPromoSumAggregateOutputType | null
    _min: OrderPromoMinAggregateOutputType | null
    _max: OrderPromoMaxAggregateOutputType | null
  }

  export type OrderPromoAvgAggregateOutputType = {
    id: number | null
    order_id: number | null
    promo_code_id: number | null
    discount_applied: Decimal | null
  }

  export type OrderPromoSumAggregateOutputType = {
    id: number | null
    order_id: number | null
    promo_code_id: number | null
    discount_applied: Decimal | null
  }

  export type OrderPromoMinAggregateOutputType = {
    id: number | null
    order_id: number | null
    promo_code_id: number | null
    discount_applied: Decimal | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type OrderPromoMaxAggregateOutputType = {
    id: number | null
    order_id: number | null
    promo_code_id: number | null
    discount_applied: Decimal | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type OrderPromoCountAggregateOutputType = {
    id: number
    order_id: number
    promo_code_id: number
    discount_applied: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type OrderPromoAvgAggregateInputType = {
    id?: true
    order_id?: true
    promo_code_id?: true
    discount_applied?: true
  }

  export type OrderPromoSumAggregateInputType = {
    id?: true
    order_id?: true
    promo_code_id?: true
    discount_applied?: true
  }

  export type OrderPromoMinAggregateInputType = {
    id?: true
    order_id?: true
    promo_code_id?: true
    discount_applied?: true
    created_at?: true
    updated_at?: true
  }

  export type OrderPromoMaxAggregateInputType = {
    id?: true
    order_id?: true
    promo_code_id?: true
    discount_applied?: true
    created_at?: true
    updated_at?: true
  }

  export type OrderPromoCountAggregateInputType = {
    id?: true
    order_id?: true
    promo_code_id?: true
    discount_applied?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type OrderPromoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderPromo to aggregate.
     */
    where?: OrderPromoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderPromos to fetch.
     */
    orderBy?: OrderPromoOrderByWithRelationInput | OrderPromoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderPromoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderPromos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderPromos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderPromos
    **/
    _count?: true | OrderPromoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderPromoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderPromoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderPromoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderPromoMaxAggregateInputType
  }

  export type GetOrderPromoAggregateType<T extends OrderPromoAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderPromo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderPromo[P]>
      : GetScalarType<T[P], AggregateOrderPromo[P]>
  }




  export type OrderPromoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderPromoWhereInput
    orderBy?: OrderPromoOrderByWithAggregationInput | OrderPromoOrderByWithAggregationInput[]
    by: OrderPromoScalarFieldEnum[] | OrderPromoScalarFieldEnum
    having?: OrderPromoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderPromoCountAggregateInputType | true
    _avg?: OrderPromoAvgAggregateInputType
    _sum?: OrderPromoSumAggregateInputType
    _min?: OrderPromoMinAggregateInputType
    _max?: OrderPromoMaxAggregateInputType
  }

  export type OrderPromoGroupByOutputType = {
    id: number
    order_id: number
    promo_code_id: number
    discount_applied: Decimal
    created_at: Date
    updated_at: Date
    _count: OrderPromoCountAggregateOutputType | null
    _avg: OrderPromoAvgAggregateOutputType | null
    _sum: OrderPromoSumAggregateOutputType | null
    _min: OrderPromoMinAggregateOutputType | null
    _max: OrderPromoMaxAggregateOutputType | null
  }

  type GetOrderPromoGroupByPayload<T extends OrderPromoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderPromoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderPromoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderPromoGroupByOutputType[P]>
            : GetScalarType<T[P], OrderPromoGroupByOutputType[P]>
        }
      >
    >


  export type OrderPromoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order_id?: boolean
    promo_code_id?: boolean
    discount_applied?: boolean
    created_at?: boolean
    updated_at?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    promo_code?: boolean | PromoCodeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderPromo"]>

  export type OrderPromoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order_id?: boolean
    promo_code_id?: boolean
    discount_applied?: boolean
    created_at?: boolean
    updated_at?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    promo_code?: boolean | PromoCodeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderPromo"]>

  export type OrderPromoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order_id?: boolean
    promo_code_id?: boolean
    discount_applied?: boolean
    created_at?: boolean
    updated_at?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    promo_code?: boolean | PromoCodeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderPromo"]>

  export type OrderPromoSelectScalar = {
    id?: boolean
    order_id?: boolean
    promo_code_id?: boolean
    discount_applied?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type OrderPromoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "order_id" | "promo_code_id" | "discount_applied" | "created_at" | "updated_at", ExtArgs["result"]["orderPromo"]>
  export type OrderPromoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    promo_code?: boolean | PromoCodeDefaultArgs<ExtArgs>
  }
  export type OrderPromoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    promo_code?: boolean | PromoCodeDefaultArgs<ExtArgs>
  }
  export type OrderPromoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    promo_code?: boolean | PromoCodeDefaultArgs<ExtArgs>
  }

  export type $OrderPromoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderPromo"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      promo_code: Prisma.$PromoCodePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      order_id: number
      promo_code_id: number
      discount_applied: Prisma.Decimal
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["orderPromo"]>
    composites: {}
  }

  type OrderPromoGetPayload<S extends boolean | null | undefined | OrderPromoDefaultArgs> = $Result.GetResult<Prisma.$OrderPromoPayload, S>

  type OrderPromoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderPromoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderPromoCountAggregateInputType | true
    }

  export interface OrderPromoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderPromo'], meta: { name: 'OrderPromo' } }
    /**
     * Find zero or one OrderPromo that matches the filter.
     * @param {OrderPromoFindUniqueArgs} args - Arguments to find a OrderPromo
     * @example
     * // Get one OrderPromo
     * const orderPromo = await prisma.orderPromo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderPromoFindUniqueArgs>(args: SelectSubset<T, OrderPromoFindUniqueArgs<ExtArgs>>): Prisma__OrderPromoClient<$Result.GetResult<Prisma.$OrderPromoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrderPromo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderPromoFindUniqueOrThrowArgs} args - Arguments to find a OrderPromo
     * @example
     * // Get one OrderPromo
     * const orderPromo = await prisma.orderPromo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderPromoFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderPromoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderPromoClient<$Result.GetResult<Prisma.$OrderPromoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderPromo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderPromoFindFirstArgs} args - Arguments to find a OrderPromo
     * @example
     * // Get one OrderPromo
     * const orderPromo = await prisma.orderPromo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderPromoFindFirstArgs>(args?: SelectSubset<T, OrderPromoFindFirstArgs<ExtArgs>>): Prisma__OrderPromoClient<$Result.GetResult<Prisma.$OrderPromoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderPromo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderPromoFindFirstOrThrowArgs} args - Arguments to find a OrderPromo
     * @example
     * // Get one OrderPromo
     * const orderPromo = await prisma.orderPromo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderPromoFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderPromoFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderPromoClient<$Result.GetResult<Prisma.$OrderPromoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrderPromos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderPromoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderPromos
     * const orderPromos = await prisma.orderPromo.findMany()
     * 
     * // Get first 10 OrderPromos
     * const orderPromos = await prisma.orderPromo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderPromoWithIdOnly = await prisma.orderPromo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderPromoFindManyArgs>(args?: SelectSubset<T, OrderPromoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPromoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrderPromo.
     * @param {OrderPromoCreateArgs} args - Arguments to create a OrderPromo.
     * @example
     * // Create one OrderPromo
     * const OrderPromo = await prisma.orderPromo.create({
     *   data: {
     *     // ... data to create a OrderPromo
     *   }
     * })
     * 
     */
    create<T extends OrderPromoCreateArgs>(args: SelectSubset<T, OrderPromoCreateArgs<ExtArgs>>): Prisma__OrderPromoClient<$Result.GetResult<Prisma.$OrderPromoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrderPromos.
     * @param {OrderPromoCreateManyArgs} args - Arguments to create many OrderPromos.
     * @example
     * // Create many OrderPromos
     * const orderPromo = await prisma.orderPromo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderPromoCreateManyArgs>(args?: SelectSubset<T, OrderPromoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderPromos and returns the data saved in the database.
     * @param {OrderPromoCreateManyAndReturnArgs} args - Arguments to create many OrderPromos.
     * @example
     * // Create many OrderPromos
     * const orderPromo = await prisma.orderPromo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderPromos and only return the `id`
     * const orderPromoWithIdOnly = await prisma.orderPromo.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderPromoCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderPromoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPromoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OrderPromo.
     * @param {OrderPromoDeleteArgs} args - Arguments to delete one OrderPromo.
     * @example
     * // Delete one OrderPromo
     * const OrderPromo = await prisma.orderPromo.delete({
     *   where: {
     *     // ... filter to delete one OrderPromo
     *   }
     * })
     * 
     */
    delete<T extends OrderPromoDeleteArgs>(args: SelectSubset<T, OrderPromoDeleteArgs<ExtArgs>>): Prisma__OrderPromoClient<$Result.GetResult<Prisma.$OrderPromoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrderPromo.
     * @param {OrderPromoUpdateArgs} args - Arguments to update one OrderPromo.
     * @example
     * // Update one OrderPromo
     * const orderPromo = await prisma.orderPromo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderPromoUpdateArgs>(args: SelectSubset<T, OrderPromoUpdateArgs<ExtArgs>>): Prisma__OrderPromoClient<$Result.GetResult<Prisma.$OrderPromoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrderPromos.
     * @param {OrderPromoDeleteManyArgs} args - Arguments to filter OrderPromos to delete.
     * @example
     * // Delete a few OrderPromos
     * const { count } = await prisma.orderPromo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderPromoDeleteManyArgs>(args?: SelectSubset<T, OrderPromoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderPromos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderPromoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderPromos
     * const orderPromo = await prisma.orderPromo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderPromoUpdateManyArgs>(args: SelectSubset<T, OrderPromoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderPromos and returns the data updated in the database.
     * @param {OrderPromoUpdateManyAndReturnArgs} args - Arguments to update many OrderPromos.
     * @example
     * // Update many OrderPromos
     * const orderPromo = await prisma.orderPromo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrderPromos and only return the `id`
     * const orderPromoWithIdOnly = await prisma.orderPromo.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderPromoUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderPromoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPromoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OrderPromo.
     * @param {OrderPromoUpsertArgs} args - Arguments to update or create a OrderPromo.
     * @example
     * // Update or create a OrderPromo
     * const orderPromo = await prisma.orderPromo.upsert({
     *   create: {
     *     // ... data to create a OrderPromo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderPromo we want to update
     *   }
     * })
     */
    upsert<T extends OrderPromoUpsertArgs>(args: SelectSubset<T, OrderPromoUpsertArgs<ExtArgs>>): Prisma__OrderPromoClient<$Result.GetResult<Prisma.$OrderPromoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrderPromos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderPromoCountArgs} args - Arguments to filter OrderPromos to count.
     * @example
     * // Count the number of OrderPromos
     * const count = await prisma.orderPromo.count({
     *   where: {
     *     // ... the filter for the OrderPromos we want to count
     *   }
     * })
    **/
    count<T extends OrderPromoCountArgs>(
      args?: Subset<T, OrderPromoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderPromoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderPromo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderPromoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderPromoAggregateArgs>(args: Subset<T, OrderPromoAggregateArgs>): Prisma.PrismaPromise<GetOrderPromoAggregateType<T>>

    /**
     * Group by OrderPromo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderPromoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderPromoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderPromoGroupByArgs['orderBy'] }
        : { orderBy?: OrderPromoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderPromoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderPromoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderPromo model
   */
  readonly fields: OrderPromoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderPromo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderPromoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    promo_code<T extends PromoCodeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PromoCodeDefaultArgs<ExtArgs>>): Prisma__PromoCodeClient<$Result.GetResult<Prisma.$PromoCodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderPromo model
   */
  interface OrderPromoFieldRefs {
    readonly id: FieldRef<"OrderPromo", 'Int'>
    readonly order_id: FieldRef<"OrderPromo", 'Int'>
    readonly promo_code_id: FieldRef<"OrderPromo", 'Int'>
    readonly discount_applied: FieldRef<"OrderPromo", 'Decimal'>
    readonly created_at: FieldRef<"OrderPromo", 'DateTime'>
    readonly updated_at: FieldRef<"OrderPromo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OrderPromo findUnique
   */
  export type OrderPromoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPromo
     */
    select?: OrderPromoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderPromo
     */
    omit?: OrderPromoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPromoInclude<ExtArgs> | null
    /**
     * Filter, which OrderPromo to fetch.
     */
    where: OrderPromoWhereUniqueInput
  }

  /**
   * OrderPromo findUniqueOrThrow
   */
  export type OrderPromoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPromo
     */
    select?: OrderPromoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderPromo
     */
    omit?: OrderPromoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPromoInclude<ExtArgs> | null
    /**
     * Filter, which OrderPromo to fetch.
     */
    where: OrderPromoWhereUniqueInput
  }

  /**
   * OrderPromo findFirst
   */
  export type OrderPromoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPromo
     */
    select?: OrderPromoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderPromo
     */
    omit?: OrderPromoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPromoInclude<ExtArgs> | null
    /**
     * Filter, which OrderPromo to fetch.
     */
    where?: OrderPromoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderPromos to fetch.
     */
    orderBy?: OrderPromoOrderByWithRelationInput | OrderPromoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderPromos.
     */
    cursor?: OrderPromoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderPromos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderPromos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderPromos.
     */
    distinct?: OrderPromoScalarFieldEnum | OrderPromoScalarFieldEnum[]
  }

  /**
   * OrderPromo findFirstOrThrow
   */
  export type OrderPromoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPromo
     */
    select?: OrderPromoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderPromo
     */
    omit?: OrderPromoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPromoInclude<ExtArgs> | null
    /**
     * Filter, which OrderPromo to fetch.
     */
    where?: OrderPromoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderPromos to fetch.
     */
    orderBy?: OrderPromoOrderByWithRelationInput | OrderPromoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderPromos.
     */
    cursor?: OrderPromoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderPromos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderPromos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderPromos.
     */
    distinct?: OrderPromoScalarFieldEnum | OrderPromoScalarFieldEnum[]
  }

  /**
   * OrderPromo findMany
   */
  export type OrderPromoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPromo
     */
    select?: OrderPromoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderPromo
     */
    omit?: OrderPromoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPromoInclude<ExtArgs> | null
    /**
     * Filter, which OrderPromos to fetch.
     */
    where?: OrderPromoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderPromos to fetch.
     */
    orderBy?: OrderPromoOrderByWithRelationInput | OrderPromoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderPromos.
     */
    cursor?: OrderPromoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderPromos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderPromos.
     */
    skip?: number
    distinct?: OrderPromoScalarFieldEnum | OrderPromoScalarFieldEnum[]
  }

  /**
   * OrderPromo create
   */
  export type OrderPromoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPromo
     */
    select?: OrderPromoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderPromo
     */
    omit?: OrderPromoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPromoInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderPromo.
     */
    data: XOR<OrderPromoCreateInput, OrderPromoUncheckedCreateInput>
  }

  /**
   * OrderPromo createMany
   */
  export type OrderPromoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderPromos.
     */
    data: OrderPromoCreateManyInput | OrderPromoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderPromo createManyAndReturn
   */
  export type OrderPromoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPromo
     */
    select?: OrderPromoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderPromo
     */
    omit?: OrderPromoOmit<ExtArgs> | null
    /**
     * The data used to create many OrderPromos.
     */
    data: OrderPromoCreateManyInput | OrderPromoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPromoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderPromo update
   */
  export type OrderPromoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPromo
     */
    select?: OrderPromoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderPromo
     */
    omit?: OrderPromoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPromoInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderPromo.
     */
    data: XOR<OrderPromoUpdateInput, OrderPromoUncheckedUpdateInput>
    /**
     * Choose, which OrderPromo to update.
     */
    where: OrderPromoWhereUniqueInput
  }

  /**
   * OrderPromo updateMany
   */
  export type OrderPromoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderPromos.
     */
    data: XOR<OrderPromoUpdateManyMutationInput, OrderPromoUncheckedUpdateManyInput>
    /**
     * Filter which OrderPromos to update
     */
    where?: OrderPromoWhereInput
    /**
     * Limit how many OrderPromos to update.
     */
    limit?: number
  }

  /**
   * OrderPromo updateManyAndReturn
   */
  export type OrderPromoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPromo
     */
    select?: OrderPromoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderPromo
     */
    omit?: OrderPromoOmit<ExtArgs> | null
    /**
     * The data used to update OrderPromos.
     */
    data: XOR<OrderPromoUpdateManyMutationInput, OrderPromoUncheckedUpdateManyInput>
    /**
     * Filter which OrderPromos to update
     */
    where?: OrderPromoWhereInput
    /**
     * Limit how many OrderPromos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPromoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderPromo upsert
   */
  export type OrderPromoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPromo
     */
    select?: OrderPromoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderPromo
     */
    omit?: OrderPromoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPromoInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderPromo to update in case it exists.
     */
    where: OrderPromoWhereUniqueInput
    /**
     * In case the OrderPromo found by the `where` argument doesn't exist, create a new OrderPromo with this data.
     */
    create: XOR<OrderPromoCreateInput, OrderPromoUncheckedCreateInput>
    /**
     * In case the OrderPromo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderPromoUpdateInput, OrderPromoUncheckedUpdateInput>
  }

  /**
   * OrderPromo delete
   */
  export type OrderPromoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPromo
     */
    select?: OrderPromoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderPromo
     */
    omit?: OrderPromoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPromoInclude<ExtArgs> | null
    /**
     * Filter which OrderPromo to delete.
     */
    where: OrderPromoWhereUniqueInput
  }

  /**
   * OrderPromo deleteMany
   */
  export type OrderPromoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderPromos to delete
     */
    where?: OrderPromoWhereInput
    /**
     * Limit how many OrderPromos to delete.
     */
    limit?: number
  }

  /**
   * OrderPromo without action
   */
  export type OrderPromoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPromo
     */
    select?: OrderPromoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderPromo
     */
    omit?: OrderPromoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPromoInclude<ExtArgs> | null
  }


  /**
   * Model ReferralCode
   */

  export type AggregateReferralCode = {
    _count: ReferralCodeCountAggregateOutputType | null
    _avg: ReferralCodeAvgAggregateOutputType | null
    _sum: ReferralCodeSumAggregateOutputType | null
    _min: ReferralCodeMinAggregateOutputType | null
    _max: ReferralCodeMaxAggregateOutputType | null
  }

  export type ReferralCodeAvgAggregateOutputType = {
    id: number | null
  }

  export type ReferralCodeSumAggregateOutputType = {
    id: number | null
  }

  export type ReferralCodeMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    code: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ReferralCodeMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    code: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ReferralCodeCountAggregateOutputType = {
    id: number
    user_id: number
    code: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ReferralCodeAvgAggregateInputType = {
    id?: true
  }

  export type ReferralCodeSumAggregateInputType = {
    id?: true
  }

  export type ReferralCodeMinAggregateInputType = {
    id?: true
    user_id?: true
    code?: true
    created_at?: true
    updated_at?: true
  }

  export type ReferralCodeMaxAggregateInputType = {
    id?: true
    user_id?: true
    code?: true
    created_at?: true
    updated_at?: true
  }

  export type ReferralCodeCountAggregateInputType = {
    id?: true
    user_id?: true
    code?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ReferralCodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReferralCode to aggregate.
     */
    where?: ReferralCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralCodes to fetch.
     */
    orderBy?: ReferralCodeOrderByWithRelationInput | ReferralCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReferralCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReferralCodes
    **/
    _count?: true | ReferralCodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReferralCodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReferralCodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReferralCodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReferralCodeMaxAggregateInputType
  }

  export type GetReferralCodeAggregateType<T extends ReferralCodeAggregateArgs> = {
        [P in keyof T & keyof AggregateReferralCode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReferralCode[P]>
      : GetScalarType<T[P], AggregateReferralCode[P]>
  }




  export type ReferralCodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferralCodeWhereInput
    orderBy?: ReferralCodeOrderByWithAggregationInput | ReferralCodeOrderByWithAggregationInput[]
    by: ReferralCodeScalarFieldEnum[] | ReferralCodeScalarFieldEnum
    having?: ReferralCodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReferralCodeCountAggregateInputType | true
    _avg?: ReferralCodeAvgAggregateInputType
    _sum?: ReferralCodeSumAggregateInputType
    _min?: ReferralCodeMinAggregateInputType
    _max?: ReferralCodeMaxAggregateInputType
  }

  export type ReferralCodeGroupByOutputType = {
    id: number
    user_id: string
    code: string
    created_at: Date
    updated_at: Date
    _count: ReferralCodeCountAggregateOutputType | null
    _avg: ReferralCodeAvgAggregateOutputType | null
    _sum: ReferralCodeSumAggregateOutputType | null
    _min: ReferralCodeMinAggregateOutputType | null
    _max: ReferralCodeMaxAggregateOutputType | null
  }

  type GetReferralCodeGroupByPayload<T extends ReferralCodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReferralCodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReferralCodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReferralCodeGroupByOutputType[P]>
            : GetScalarType<T[P], ReferralCodeGroupByOutputType[P]>
        }
      >
    >


  export type ReferralCodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    code?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referralCode"]>

  export type ReferralCodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    code?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referralCode"]>

  export type ReferralCodeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    code?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referralCode"]>

  export type ReferralCodeSelectScalar = {
    id?: boolean
    user_id?: boolean
    code?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ReferralCodeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "code" | "created_at" | "updated_at", ExtArgs["result"]["referralCode"]>
  export type ReferralCodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReferralCodeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReferralCodeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ReferralCodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReferralCode"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: string
      code: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["referralCode"]>
    composites: {}
  }

  type ReferralCodeGetPayload<S extends boolean | null | undefined | ReferralCodeDefaultArgs> = $Result.GetResult<Prisma.$ReferralCodePayload, S>

  type ReferralCodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReferralCodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReferralCodeCountAggregateInputType | true
    }

  export interface ReferralCodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReferralCode'], meta: { name: 'ReferralCode' } }
    /**
     * Find zero or one ReferralCode that matches the filter.
     * @param {ReferralCodeFindUniqueArgs} args - Arguments to find a ReferralCode
     * @example
     * // Get one ReferralCode
     * const referralCode = await prisma.referralCode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReferralCodeFindUniqueArgs>(args: SelectSubset<T, ReferralCodeFindUniqueArgs<ExtArgs>>): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReferralCode that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReferralCodeFindUniqueOrThrowArgs} args - Arguments to find a ReferralCode
     * @example
     * // Get one ReferralCode
     * const referralCode = await prisma.referralCode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReferralCodeFindUniqueOrThrowArgs>(args: SelectSubset<T, ReferralCodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReferralCode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeFindFirstArgs} args - Arguments to find a ReferralCode
     * @example
     * // Get one ReferralCode
     * const referralCode = await prisma.referralCode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReferralCodeFindFirstArgs>(args?: SelectSubset<T, ReferralCodeFindFirstArgs<ExtArgs>>): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReferralCode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeFindFirstOrThrowArgs} args - Arguments to find a ReferralCode
     * @example
     * // Get one ReferralCode
     * const referralCode = await prisma.referralCode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReferralCodeFindFirstOrThrowArgs>(args?: SelectSubset<T, ReferralCodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReferralCodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReferralCodes
     * const referralCodes = await prisma.referralCode.findMany()
     * 
     * // Get first 10 ReferralCodes
     * const referralCodes = await prisma.referralCode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const referralCodeWithIdOnly = await prisma.referralCode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReferralCodeFindManyArgs>(args?: SelectSubset<T, ReferralCodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReferralCode.
     * @param {ReferralCodeCreateArgs} args - Arguments to create a ReferralCode.
     * @example
     * // Create one ReferralCode
     * const ReferralCode = await prisma.referralCode.create({
     *   data: {
     *     // ... data to create a ReferralCode
     *   }
     * })
     * 
     */
    create<T extends ReferralCodeCreateArgs>(args: SelectSubset<T, ReferralCodeCreateArgs<ExtArgs>>): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReferralCodes.
     * @param {ReferralCodeCreateManyArgs} args - Arguments to create many ReferralCodes.
     * @example
     * // Create many ReferralCodes
     * const referralCode = await prisma.referralCode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReferralCodeCreateManyArgs>(args?: SelectSubset<T, ReferralCodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReferralCodes and returns the data saved in the database.
     * @param {ReferralCodeCreateManyAndReturnArgs} args - Arguments to create many ReferralCodes.
     * @example
     * // Create many ReferralCodes
     * const referralCode = await prisma.referralCode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReferralCodes and only return the `id`
     * const referralCodeWithIdOnly = await prisma.referralCode.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReferralCodeCreateManyAndReturnArgs>(args?: SelectSubset<T, ReferralCodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReferralCode.
     * @param {ReferralCodeDeleteArgs} args - Arguments to delete one ReferralCode.
     * @example
     * // Delete one ReferralCode
     * const ReferralCode = await prisma.referralCode.delete({
     *   where: {
     *     // ... filter to delete one ReferralCode
     *   }
     * })
     * 
     */
    delete<T extends ReferralCodeDeleteArgs>(args: SelectSubset<T, ReferralCodeDeleteArgs<ExtArgs>>): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReferralCode.
     * @param {ReferralCodeUpdateArgs} args - Arguments to update one ReferralCode.
     * @example
     * // Update one ReferralCode
     * const referralCode = await prisma.referralCode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReferralCodeUpdateArgs>(args: SelectSubset<T, ReferralCodeUpdateArgs<ExtArgs>>): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReferralCodes.
     * @param {ReferralCodeDeleteManyArgs} args - Arguments to filter ReferralCodes to delete.
     * @example
     * // Delete a few ReferralCodes
     * const { count } = await prisma.referralCode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReferralCodeDeleteManyArgs>(args?: SelectSubset<T, ReferralCodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReferralCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReferralCodes
     * const referralCode = await prisma.referralCode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReferralCodeUpdateManyArgs>(args: SelectSubset<T, ReferralCodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReferralCodes and returns the data updated in the database.
     * @param {ReferralCodeUpdateManyAndReturnArgs} args - Arguments to update many ReferralCodes.
     * @example
     * // Update many ReferralCodes
     * const referralCode = await prisma.referralCode.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReferralCodes and only return the `id`
     * const referralCodeWithIdOnly = await prisma.referralCode.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReferralCodeUpdateManyAndReturnArgs>(args: SelectSubset<T, ReferralCodeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReferralCode.
     * @param {ReferralCodeUpsertArgs} args - Arguments to update or create a ReferralCode.
     * @example
     * // Update or create a ReferralCode
     * const referralCode = await prisma.referralCode.upsert({
     *   create: {
     *     // ... data to create a ReferralCode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReferralCode we want to update
     *   }
     * })
     */
    upsert<T extends ReferralCodeUpsertArgs>(args: SelectSubset<T, ReferralCodeUpsertArgs<ExtArgs>>): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReferralCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeCountArgs} args - Arguments to filter ReferralCodes to count.
     * @example
     * // Count the number of ReferralCodes
     * const count = await prisma.referralCode.count({
     *   where: {
     *     // ... the filter for the ReferralCodes we want to count
     *   }
     * })
    **/
    count<T extends ReferralCodeCountArgs>(
      args?: Subset<T, ReferralCodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReferralCodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReferralCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReferralCodeAggregateArgs>(args: Subset<T, ReferralCodeAggregateArgs>): Prisma.PrismaPromise<GetReferralCodeAggregateType<T>>

    /**
     * Group by ReferralCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReferralCodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReferralCodeGroupByArgs['orderBy'] }
        : { orderBy?: ReferralCodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReferralCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReferralCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReferralCode model
   */
  readonly fields: ReferralCodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReferralCode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReferralCodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReferralCode model
   */
  interface ReferralCodeFieldRefs {
    readonly id: FieldRef<"ReferralCode", 'Int'>
    readonly user_id: FieldRef<"ReferralCode", 'String'>
    readonly code: FieldRef<"ReferralCode", 'String'>
    readonly created_at: FieldRef<"ReferralCode", 'DateTime'>
    readonly updated_at: FieldRef<"ReferralCode", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReferralCode findUnique
   */
  export type ReferralCodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter, which ReferralCode to fetch.
     */
    where: ReferralCodeWhereUniqueInput
  }

  /**
   * ReferralCode findUniqueOrThrow
   */
  export type ReferralCodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter, which ReferralCode to fetch.
     */
    where: ReferralCodeWhereUniqueInput
  }

  /**
   * ReferralCode findFirst
   */
  export type ReferralCodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter, which ReferralCode to fetch.
     */
    where?: ReferralCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralCodes to fetch.
     */
    orderBy?: ReferralCodeOrderByWithRelationInput | ReferralCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReferralCodes.
     */
    cursor?: ReferralCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReferralCodes.
     */
    distinct?: ReferralCodeScalarFieldEnum | ReferralCodeScalarFieldEnum[]
  }

  /**
   * ReferralCode findFirstOrThrow
   */
  export type ReferralCodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter, which ReferralCode to fetch.
     */
    where?: ReferralCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralCodes to fetch.
     */
    orderBy?: ReferralCodeOrderByWithRelationInput | ReferralCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReferralCodes.
     */
    cursor?: ReferralCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReferralCodes.
     */
    distinct?: ReferralCodeScalarFieldEnum | ReferralCodeScalarFieldEnum[]
  }

  /**
   * ReferralCode findMany
   */
  export type ReferralCodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter, which ReferralCodes to fetch.
     */
    where?: ReferralCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralCodes to fetch.
     */
    orderBy?: ReferralCodeOrderByWithRelationInput | ReferralCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReferralCodes.
     */
    cursor?: ReferralCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralCodes.
     */
    skip?: number
    distinct?: ReferralCodeScalarFieldEnum | ReferralCodeScalarFieldEnum[]
  }

  /**
   * ReferralCode create
   */
  export type ReferralCodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * The data needed to create a ReferralCode.
     */
    data: XOR<ReferralCodeCreateInput, ReferralCodeUncheckedCreateInput>
  }

  /**
   * ReferralCode createMany
   */
  export type ReferralCodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReferralCodes.
     */
    data: ReferralCodeCreateManyInput | ReferralCodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReferralCode createManyAndReturn
   */
  export type ReferralCodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * The data used to create many ReferralCodes.
     */
    data: ReferralCodeCreateManyInput | ReferralCodeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReferralCode update
   */
  export type ReferralCodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * The data needed to update a ReferralCode.
     */
    data: XOR<ReferralCodeUpdateInput, ReferralCodeUncheckedUpdateInput>
    /**
     * Choose, which ReferralCode to update.
     */
    where: ReferralCodeWhereUniqueInput
  }

  /**
   * ReferralCode updateMany
   */
  export type ReferralCodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReferralCodes.
     */
    data: XOR<ReferralCodeUpdateManyMutationInput, ReferralCodeUncheckedUpdateManyInput>
    /**
     * Filter which ReferralCodes to update
     */
    where?: ReferralCodeWhereInput
    /**
     * Limit how many ReferralCodes to update.
     */
    limit?: number
  }

  /**
   * ReferralCode updateManyAndReturn
   */
  export type ReferralCodeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * The data used to update ReferralCodes.
     */
    data: XOR<ReferralCodeUpdateManyMutationInput, ReferralCodeUncheckedUpdateManyInput>
    /**
     * Filter which ReferralCodes to update
     */
    where?: ReferralCodeWhereInput
    /**
     * Limit how many ReferralCodes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReferralCode upsert
   */
  export type ReferralCodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * The filter to search for the ReferralCode to update in case it exists.
     */
    where: ReferralCodeWhereUniqueInput
    /**
     * In case the ReferralCode found by the `where` argument doesn't exist, create a new ReferralCode with this data.
     */
    create: XOR<ReferralCodeCreateInput, ReferralCodeUncheckedCreateInput>
    /**
     * In case the ReferralCode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReferralCodeUpdateInput, ReferralCodeUncheckedUpdateInput>
  }

  /**
   * ReferralCode delete
   */
  export type ReferralCodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter which ReferralCode to delete.
     */
    where: ReferralCodeWhereUniqueInput
  }

  /**
   * ReferralCode deleteMany
   */
  export type ReferralCodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReferralCodes to delete
     */
    where?: ReferralCodeWhereInput
    /**
     * Limit how many ReferralCodes to delete.
     */
    limit?: number
  }

  /**
   * ReferralCode without action
   */
  export type ReferralCodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
  }


  /**
   * Model EmailLog
   */

  export type AggregateEmailLog = {
    _count: EmailLogCountAggregateOutputType | null
    _avg: EmailLogAvgAggregateOutputType | null
    _sum: EmailLogSumAggregateOutputType | null
    _min: EmailLogMinAggregateOutputType | null
    _max: EmailLogMaxAggregateOutputType | null
  }

  export type EmailLogAvgAggregateOutputType = {
    id: number | null
    event_id: number | null
  }

  export type EmailLogSumAggregateOutputType = {
    id: number | null
    event_id: number | null
  }

  export type EmailLogMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    event_id: number | null
    email_type: string | null
    subject: string | null
    status: string | null
    sent_at: Date | null
    error_message: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type EmailLogMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    event_id: number | null
    email_type: string | null
    subject: string | null
    status: string | null
    sent_at: Date | null
    error_message: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type EmailLogCountAggregateOutputType = {
    id: number
    user_id: number
    event_id: number
    email_type: number
    subject: number
    status: number
    sent_at: number
    error_message: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type EmailLogAvgAggregateInputType = {
    id?: true
    event_id?: true
  }

  export type EmailLogSumAggregateInputType = {
    id?: true
    event_id?: true
  }

  export type EmailLogMinAggregateInputType = {
    id?: true
    user_id?: true
    event_id?: true
    email_type?: true
    subject?: true
    status?: true
    sent_at?: true
    error_message?: true
    created_at?: true
    updated_at?: true
  }

  export type EmailLogMaxAggregateInputType = {
    id?: true
    user_id?: true
    event_id?: true
    email_type?: true
    subject?: true
    status?: true
    sent_at?: true
    error_message?: true
    created_at?: true
    updated_at?: true
  }

  export type EmailLogCountAggregateInputType = {
    id?: true
    user_id?: true
    event_id?: true
    email_type?: true
    subject?: true
    status?: true
    sent_at?: true
    error_message?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type EmailLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailLog to aggregate.
     */
    where?: EmailLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailLogs to fetch.
     */
    orderBy?: EmailLogOrderByWithRelationInput | EmailLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailLogs
    **/
    _count?: true | EmailLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailLogMaxAggregateInputType
  }

  export type GetEmailLogAggregateType<T extends EmailLogAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailLog[P]>
      : GetScalarType<T[P], AggregateEmailLog[P]>
  }




  export type EmailLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailLogWhereInput
    orderBy?: EmailLogOrderByWithAggregationInput | EmailLogOrderByWithAggregationInput[]
    by: EmailLogScalarFieldEnum[] | EmailLogScalarFieldEnum
    having?: EmailLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailLogCountAggregateInputType | true
    _avg?: EmailLogAvgAggregateInputType
    _sum?: EmailLogSumAggregateInputType
    _min?: EmailLogMinAggregateInputType
    _max?: EmailLogMaxAggregateInputType
  }

  export type EmailLogGroupByOutputType = {
    id: number
    user_id: string
    event_id: number | null
    email_type: string
    subject: string
    status: string
    sent_at: Date | null
    error_message: string | null
    created_at: Date
    updated_at: Date
    _count: EmailLogCountAggregateOutputType | null
    _avg: EmailLogAvgAggregateOutputType | null
    _sum: EmailLogSumAggregateOutputType | null
    _min: EmailLogMinAggregateOutputType | null
    _max: EmailLogMaxAggregateOutputType | null
  }

  type GetEmailLogGroupByPayload<T extends EmailLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailLogGroupByOutputType[P]>
            : GetScalarType<T[P], EmailLogGroupByOutputType[P]>
        }
      >
    >


  export type EmailLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    event_id?: boolean
    email_type?: boolean
    subject?: boolean
    status?: boolean
    sent_at?: boolean
    error_message?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | EmailLog$eventArgs<ExtArgs>
  }, ExtArgs["result"]["emailLog"]>

  export type EmailLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    event_id?: boolean
    email_type?: boolean
    subject?: boolean
    status?: boolean
    sent_at?: boolean
    error_message?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | EmailLog$eventArgs<ExtArgs>
  }, ExtArgs["result"]["emailLog"]>

  export type EmailLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    event_id?: boolean
    email_type?: boolean
    subject?: boolean
    status?: boolean
    sent_at?: boolean
    error_message?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | EmailLog$eventArgs<ExtArgs>
  }, ExtArgs["result"]["emailLog"]>

  export type EmailLogSelectScalar = {
    id?: boolean
    user_id?: boolean
    event_id?: boolean
    email_type?: boolean
    subject?: boolean
    status?: boolean
    sent_at?: boolean
    error_message?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type EmailLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "event_id" | "email_type" | "subject" | "status" | "sent_at" | "error_message" | "created_at" | "updated_at", ExtArgs["result"]["emailLog"]>
  export type EmailLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | EmailLog$eventArgs<ExtArgs>
  }
  export type EmailLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | EmailLog$eventArgs<ExtArgs>
  }
  export type EmailLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    event?: boolean | EmailLog$eventArgs<ExtArgs>
  }

  export type $EmailLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      event: Prisma.$EventPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: string
      event_id: number | null
      email_type: string
      subject: string
      status: string
      sent_at: Date | null
      error_message: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["emailLog"]>
    composites: {}
  }

  type EmailLogGetPayload<S extends boolean | null | undefined | EmailLogDefaultArgs> = $Result.GetResult<Prisma.$EmailLogPayload, S>

  type EmailLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailLogCountAggregateInputType | true
    }

  export interface EmailLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailLog'], meta: { name: 'EmailLog' } }
    /**
     * Find zero or one EmailLog that matches the filter.
     * @param {EmailLogFindUniqueArgs} args - Arguments to find a EmailLog
     * @example
     * // Get one EmailLog
     * const emailLog = await prisma.emailLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailLogFindUniqueArgs>(args: SelectSubset<T, EmailLogFindUniqueArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailLogFindUniqueOrThrowArgs} args - Arguments to find a EmailLog
     * @example
     * // Get one EmailLog
     * const emailLog = await prisma.emailLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailLogFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogFindFirstArgs} args - Arguments to find a EmailLog
     * @example
     * // Get one EmailLog
     * const emailLog = await prisma.emailLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailLogFindFirstArgs>(args?: SelectSubset<T, EmailLogFindFirstArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogFindFirstOrThrowArgs} args - Arguments to find a EmailLog
     * @example
     * // Get one EmailLog
     * const emailLog = await prisma.emailLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailLogFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailLogs
     * const emailLogs = await prisma.emailLog.findMany()
     * 
     * // Get first 10 EmailLogs
     * const emailLogs = await prisma.emailLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailLogWithIdOnly = await prisma.emailLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailLogFindManyArgs>(args?: SelectSubset<T, EmailLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailLog.
     * @param {EmailLogCreateArgs} args - Arguments to create a EmailLog.
     * @example
     * // Create one EmailLog
     * const EmailLog = await prisma.emailLog.create({
     *   data: {
     *     // ... data to create a EmailLog
     *   }
     * })
     * 
     */
    create<T extends EmailLogCreateArgs>(args: SelectSubset<T, EmailLogCreateArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailLogs.
     * @param {EmailLogCreateManyArgs} args - Arguments to create many EmailLogs.
     * @example
     * // Create many EmailLogs
     * const emailLog = await prisma.emailLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailLogCreateManyArgs>(args?: SelectSubset<T, EmailLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailLogs and returns the data saved in the database.
     * @param {EmailLogCreateManyAndReturnArgs} args - Arguments to create many EmailLogs.
     * @example
     * // Create many EmailLogs
     * const emailLog = await prisma.emailLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailLogs and only return the `id`
     * const emailLogWithIdOnly = await prisma.emailLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailLogCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmailLog.
     * @param {EmailLogDeleteArgs} args - Arguments to delete one EmailLog.
     * @example
     * // Delete one EmailLog
     * const EmailLog = await prisma.emailLog.delete({
     *   where: {
     *     // ... filter to delete one EmailLog
     *   }
     * })
     * 
     */
    delete<T extends EmailLogDeleteArgs>(args: SelectSubset<T, EmailLogDeleteArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailLog.
     * @param {EmailLogUpdateArgs} args - Arguments to update one EmailLog.
     * @example
     * // Update one EmailLog
     * const emailLog = await prisma.emailLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailLogUpdateArgs>(args: SelectSubset<T, EmailLogUpdateArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailLogs.
     * @param {EmailLogDeleteManyArgs} args - Arguments to filter EmailLogs to delete.
     * @example
     * // Delete a few EmailLogs
     * const { count } = await prisma.emailLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailLogDeleteManyArgs>(args?: SelectSubset<T, EmailLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailLogs
     * const emailLog = await prisma.emailLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailLogUpdateManyArgs>(args: SelectSubset<T, EmailLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailLogs and returns the data updated in the database.
     * @param {EmailLogUpdateManyAndReturnArgs} args - Arguments to update many EmailLogs.
     * @example
     * // Update many EmailLogs
     * const emailLog = await prisma.emailLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailLogs and only return the `id`
     * const emailLogWithIdOnly = await prisma.emailLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailLogUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmailLog.
     * @param {EmailLogUpsertArgs} args - Arguments to update or create a EmailLog.
     * @example
     * // Update or create a EmailLog
     * const emailLog = await prisma.emailLog.upsert({
     *   create: {
     *     // ... data to create a EmailLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailLog we want to update
     *   }
     * })
     */
    upsert<T extends EmailLogUpsertArgs>(args: SelectSubset<T, EmailLogUpsertArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogCountArgs} args - Arguments to filter EmailLogs to count.
     * @example
     * // Count the number of EmailLogs
     * const count = await prisma.emailLog.count({
     *   where: {
     *     // ... the filter for the EmailLogs we want to count
     *   }
     * })
    **/
    count<T extends EmailLogCountArgs>(
      args?: Subset<T, EmailLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailLogAggregateArgs>(args: Subset<T, EmailLogAggregateArgs>): Prisma.PrismaPromise<GetEmailLogAggregateType<T>>

    /**
     * Group by EmailLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailLogGroupByArgs['orderBy'] }
        : { orderBy?: EmailLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailLog model
   */
  readonly fields: EmailLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    event<T extends EmailLog$eventArgs<ExtArgs> = {}>(args?: Subset<T, EmailLog$eventArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailLog model
   */
  interface EmailLogFieldRefs {
    readonly id: FieldRef<"EmailLog", 'Int'>
    readonly user_id: FieldRef<"EmailLog", 'String'>
    readonly event_id: FieldRef<"EmailLog", 'Int'>
    readonly email_type: FieldRef<"EmailLog", 'String'>
    readonly subject: FieldRef<"EmailLog", 'String'>
    readonly status: FieldRef<"EmailLog", 'String'>
    readonly sent_at: FieldRef<"EmailLog", 'DateTime'>
    readonly error_message: FieldRef<"EmailLog", 'String'>
    readonly created_at: FieldRef<"EmailLog", 'DateTime'>
    readonly updated_at: FieldRef<"EmailLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailLog findUnique
   */
  export type EmailLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * Filter, which EmailLog to fetch.
     */
    where: EmailLogWhereUniqueInput
  }

  /**
   * EmailLog findUniqueOrThrow
   */
  export type EmailLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * Filter, which EmailLog to fetch.
     */
    where: EmailLogWhereUniqueInput
  }

  /**
   * EmailLog findFirst
   */
  export type EmailLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * Filter, which EmailLog to fetch.
     */
    where?: EmailLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailLogs to fetch.
     */
    orderBy?: EmailLogOrderByWithRelationInput | EmailLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailLogs.
     */
    cursor?: EmailLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailLogs.
     */
    distinct?: EmailLogScalarFieldEnum | EmailLogScalarFieldEnum[]
  }

  /**
   * EmailLog findFirstOrThrow
   */
  export type EmailLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * Filter, which EmailLog to fetch.
     */
    where?: EmailLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailLogs to fetch.
     */
    orderBy?: EmailLogOrderByWithRelationInput | EmailLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailLogs.
     */
    cursor?: EmailLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailLogs.
     */
    distinct?: EmailLogScalarFieldEnum | EmailLogScalarFieldEnum[]
  }

  /**
   * EmailLog findMany
   */
  export type EmailLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * Filter, which EmailLogs to fetch.
     */
    where?: EmailLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailLogs to fetch.
     */
    orderBy?: EmailLogOrderByWithRelationInput | EmailLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailLogs.
     */
    cursor?: EmailLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailLogs.
     */
    skip?: number
    distinct?: EmailLogScalarFieldEnum | EmailLogScalarFieldEnum[]
  }

  /**
   * EmailLog create
   */
  export type EmailLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * The data needed to create a EmailLog.
     */
    data: XOR<EmailLogCreateInput, EmailLogUncheckedCreateInput>
  }

  /**
   * EmailLog createMany
   */
  export type EmailLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailLogs.
     */
    data: EmailLogCreateManyInput | EmailLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailLog createManyAndReturn
   */
  export type EmailLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * The data used to create many EmailLogs.
     */
    data: EmailLogCreateManyInput | EmailLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailLog update
   */
  export type EmailLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * The data needed to update a EmailLog.
     */
    data: XOR<EmailLogUpdateInput, EmailLogUncheckedUpdateInput>
    /**
     * Choose, which EmailLog to update.
     */
    where: EmailLogWhereUniqueInput
  }

  /**
   * EmailLog updateMany
   */
  export type EmailLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailLogs.
     */
    data: XOR<EmailLogUpdateManyMutationInput, EmailLogUncheckedUpdateManyInput>
    /**
     * Filter which EmailLogs to update
     */
    where?: EmailLogWhereInput
    /**
     * Limit how many EmailLogs to update.
     */
    limit?: number
  }

  /**
   * EmailLog updateManyAndReturn
   */
  export type EmailLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * The data used to update EmailLogs.
     */
    data: XOR<EmailLogUpdateManyMutationInput, EmailLogUncheckedUpdateManyInput>
    /**
     * Filter which EmailLogs to update
     */
    where?: EmailLogWhereInput
    /**
     * Limit how many EmailLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailLog upsert
   */
  export type EmailLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * The filter to search for the EmailLog to update in case it exists.
     */
    where: EmailLogWhereUniqueInput
    /**
     * In case the EmailLog found by the `where` argument doesn't exist, create a new EmailLog with this data.
     */
    create: XOR<EmailLogCreateInput, EmailLogUncheckedCreateInput>
    /**
     * In case the EmailLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailLogUpdateInput, EmailLogUncheckedUpdateInput>
  }

  /**
   * EmailLog delete
   */
  export type EmailLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * Filter which EmailLog to delete.
     */
    where: EmailLogWhereUniqueInput
  }

  /**
   * EmailLog deleteMany
   */
  export type EmailLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailLogs to delete
     */
    where?: EmailLogWhereInput
    /**
     * Limit how many EmailLogs to delete.
     */
    limit?: number
  }

  /**
   * EmailLog.event
   */
  export type EmailLog$eventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
  }

  /**
   * EmailLog without action
   */
  export type EmailLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
  }


  /**
   * Model WebhookLog
   */

  export type AggregateWebhookLog = {
    _count: WebhookLogCountAggregateOutputType | null
    _avg: WebhookLogAvgAggregateOutputType | null
    _sum: WebhookLogSumAggregateOutputType | null
    _min: WebhookLogMinAggregateOutputType | null
    _max: WebhookLogMaxAggregateOutputType | null
  }

  export type WebhookLogAvgAggregateOutputType = {
    id: number | null
    order_id: number | null
    event_id: number | null
    status_code: number | null
  }

  export type WebhookLogSumAggregateOutputType = {
    id: number | null
    order_id: number | null
    event_id: number | null
    status_code: number | null
  }

  export type WebhookLogMinAggregateOutputType = {
    id: number | null
    target_url: string | null
    event_type: string | null
    order_id: number | null
    event_id: number | null
    user_id: string | null
    payload: string | null
    status_code: number | null
    response_text: string | null
    triggered_at: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type WebhookLogMaxAggregateOutputType = {
    id: number | null
    target_url: string | null
    event_type: string | null
    order_id: number | null
    event_id: number | null
    user_id: string | null
    payload: string | null
    status_code: number | null
    response_text: string | null
    triggered_at: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type WebhookLogCountAggregateOutputType = {
    id: number
    target_url: number
    event_type: number
    order_id: number
    event_id: number
    user_id: number
    payload: number
    status_code: number
    response_text: number
    triggered_at: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type WebhookLogAvgAggregateInputType = {
    id?: true
    order_id?: true
    event_id?: true
    status_code?: true
  }

  export type WebhookLogSumAggregateInputType = {
    id?: true
    order_id?: true
    event_id?: true
    status_code?: true
  }

  export type WebhookLogMinAggregateInputType = {
    id?: true
    target_url?: true
    event_type?: true
    order_id?: true
    event_id?: true
    user_id?: true
    payload?: true
    status_code?: true
    response_text?: true
    triggered_at?: true
    created_at?: true
    updated_at?: true
  }

  export type WebhookLogMaxAggregateInputType = {
    id?: true
    target_url?: true
    event_type?: true
    order_id?: true
    event_id?: true
    user_id?: true
    payload?: true
    status_code?: true
    response_text?: true
    triggered_at?: true
    created_at?: true
    updated_at?: true
  }

  export type WebhookLogCountAggregateInputType = {
    id?: true
    target_url?: true
    event_type?: true
    order_id?: true
    event_id?: true
    user_id?: true
    payload?: true
    status_code?: true
    response_text?: true
    triggered_at?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type WebhookLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebhookLog to aggregate.
     */
    where?: WebhookLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookLogs to fetch.
     */
    orderBy?: WebhookLogOrderByWithRelationInput | WebhookLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WebhookLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WebhookLogs
    **/
    _count?: true | WebhookLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WebhookLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WebhookLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebhookLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebhookLogMaxAggregateInputType
  }

  export type GetWebhookLogAggregateType<T extends WebhookLogAggregateArgs> = {
        [P in keyof T & keyof AggregateWebhookLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebhookLog[P]>
      : GetScalarType<T[P], AggregateWebhookLog[P]>
  }




  export type WebhookLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebhookLogWhereInput
    orderBy?: WebhookLogOrderByWithAggregationInput | WebhookLogOrderByWithAggregationInput[]
    by: WebhookLogScalarFieldEnum[] | WebhookLogScalarFieldEnum
    having?: WebhookLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebhookLogCountAggregateInputType | true
    _avg?: WebhookLogAvgAggregateInputType
    _sum?: WebhookLogSumAggregateInputType
    _min?: WebhookLogMinAggregateInputType
    _max?: WebhookLogMaxAggregateInputType
  }

  export type WebhookLogGroupByOutputType = {
    id: number
    target_url: string
    event_type: string
    order_id: number | null
    event_id: number | null
    user_id: string | null
    payload: string
    status_code: number
    response_text: string | null
    triggered_at: Date
    created_at: Date
    updated_at: Date
    _count: WebhookLogCountAggregateOutputType | null
    _avg: WebhookLogAvgAggregateOutputType | null
    _sum: WebhookLogSumAggregateOutputType | null
    _min: WebhookLogMinAggregateOutputType | null
    _max: WebhookLogMaxAggregateOutputType | null
  }

  type GetWebhookLogGroupByPayload<T extends WebhookLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WebhookLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebhookLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebhookLogGroupByOutputType[P]>
            : GetScalarType<T[P], WebhookLogGroupByOutputType[P]>
        }
      >
    >


  export type WebhookLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    target_url?: boolean
    event_type?: boolean
    order_id?: boolean
    event_id?: boolean
    user_id?: boolean
    payload?: boolean
    status_code?: boolean
    response_text?: boolean
    triggered_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    order?: boolean | WebhookLog$orderArgs<ExtArgs>
    event?: boolean | WebhookLog$eventArgs<ExtArgs>
    user?: boolean | WebhookLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["webhookLog"]>

  export type WebhookLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    target_url?: boolean
    event_type?: boolean
    order_id?: boolean
    event_id?: boolean
    user_id?: boolean
    payload?: boolean
    status_code?: boolean
    response_text?: boolean
    triggered_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    order?: boolean | WebhookLog$orderArgs<ExtArgs>
    event?: boolean | WebhookLog$eventArgs<ExtArgs>
    user?: boolean | WebhookLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["webhookLog"]>

  export type WebhookLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    target_url?: boolean
    event_type?: boolean
    order_id?: boolean
    event_id?: boolean
    user_id?: boolean
    payload?: boolean
    status_code?: boolean
    response_text?: boolean
    triggered_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    order?: boolean | WebhookLog$orderArgs<ExtArgs>
    event?: boolean | WebhookLog$eventArgs<ExtArgs>
    user?: boolean | WebhookLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["webhookLog"]>

  export type WebhookLogSelectScalar = {
    id?: boolean
    target_url?: boolean
    event_type?: boolean
    order_id?: boolean
    event_id?: boolean
    user_id?: boolean
    payload?: boolean
    status_code?: boolean
    response_text?: boolean
    triggered_at?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type WebhookLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "target_url" | "event_type" | "order_id" | "event_id" | "user_id" | "payload" | "status_code" | "response_text" | "triggered_at" | "created_at" | "updated_at", ExtArgs["result"]["webhookLog"]>
  export type WebhookLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | WebhookLog$orderArgs<ExtArgs>
    event?: boolean | WebhookLog$eventArgs<ExtArgs>
    user?: boolean | WebhookLog$userArgs<ExtArgs>
  }
  export type WebhookLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | WebhookLog$orderArgs<ExtArgs>
    event?: boolean | WebhookLog$eventArgs<ExtArgs>
    user?: boolean | WebhookLog$userArgs<ExtArgs>
  }
  export type WebhookLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | WebhookLog$orderArgs<ExtArgs>
    event?: boolean | WebhookLog$eventArgs<ExtArgs>
    user?: boolean | WebhookLog$userArgs<ExtArgs>
  }

  export type $WebhookLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WebhookLog"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs> | null
      event: Prisma.$EventPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      target_url: string
      event_type: string
      order_id: number | null
      event_id: number | null
      user_id: string | null
      payload: string
      status_code: number
      response_text: string | null
      triggered_at: Date
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["webhookLog"]>
    composites: {}
  }

  type WebhookLogGetPayload<S extends boolean | null | undefined | WebhookLogDefaultArgs> = $Result.GetResult<Prisma.$WebhookLogPayload, S>

  type WebhookLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WebhookLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WebhookLogCountAggregateInputType | true
    }

  export interface WebhookLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WebhookLog'], meta: { name: 'WebhookLog' } }
    /**
     * Find zero or one WebhookLog that matches the filter.
     * @param {WebhookLogFindUniqueArgs} args - Arguments to find a WebhookLog
     * @example
     * // Get one WebhookLog
     * const webhookLog = await prisma.webhookLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WebhookLogFindUniqueArgs>(args: SelectSubset<T, WebhookLogFindUniqueArgs<ExtArgs>>): Prisma__WebhookLogClient<$Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WebhookLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WebhookLogFindUniqueOrThrowArgs} args - Arguments to find a WebhookLog
     * @example
     * // Get one WebhookLog
     * const webhookLog = await prisma.webhookLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WebhookLogFindUniqueOrThrowArgs>(args: SelectSubset<T, WebhookLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WebhookLogClient<$Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WebhookLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookLogFindFirstArgs} args - Arguments to find a WebhookLog
     * @example
     * // Get one WebhookLog
     * const webhookLog = await prisma.webhookLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WebhookLogFindFirstArgs>(args?: SelectSubset<T, WebhookLogFindFirstArgs<ExtArgs>>): Prisma__WebhookLogClient<$Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WebhookLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookLogFindFirstOrThrowArgs} args - Arguments to find a WebhookLog
     * @example
     * // Get one WebhookLog
     * const webhookLog = await prisma.webhookLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WebhookLogFindFirstOrThrowArgs>(args?: SelectSubset<T, WebhookLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__WebhookLogClient<$Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WebhookLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WebhookLogs
     * const webhookLogs = await prisma.webhookLog.findMany()
     * 
     * // Get first 10 WebhookLogs
     * const webhookLogs = await prisma.webhookLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const webhookLogWithIdOnly = await prisma.webhookLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WebhookLogFindManyArgs>(args?: SelectSubset<T, WebhookLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WebhookLog.
     * @param {WebhookLogCreateArgs} args - Arguments to create a WebhookLog.
     * @example
     * // Create one WebhookLog
     * const WebhookLog = await prisma.webhookLog.create({
     *   data: {
     *     // ... data to create a WebhookLog
     *   }
     * })
     * 
     */
    create<T extends WebhookLogCreateArgs>(args: SelectSubset<T, WebhookLogCreateArgs<ExtArgs>>): Prisma__WebhookLogClient<$Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WebhookLogs.
     * @param {WebhookLogCreateManyArgs} args - Arguments to create many WebhookLogs.
     * @example
     * // Create many WebhookLogs
     * const webhookLog = await prisma.webhookLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WebhookLogCreateManyArgs>(args?: SelectSubset<T, WebhookLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WebhookLogs and returns the data saved in the database.
     * @param {WebhookLogCreateManyAndReturnArgs} args - Arguments to create many WebhookLogs.
     * @example
     * // Create many WebhookLogs
     * const webhookLog = await prisma.webhookLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WebhookLogs and only return the `id`
     * const webhookLogWithIdOnly = await prisma.webhookLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WebhookLogCreateManyAndReturnArgs>(args?: SelectSubset<T, WebhookLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WebhookLog.
     * @param {WebhookLogDeleteArgs} args - Arguments to delete one WebhookLog.
     * @example
     * // Delete one WebhookLog
     * const WebhookLog = await prisma.webhookLog.delete({
     *   where: {
     *     // ... filter to delete one WebhookLog
     *   }
     * })
     * 
     */
    delete<T extends WebhookLogDeleteArgs>(args: SelectSubset<T, WebhookLogDeleteArgs<ExtArgs>>): Prisma__WebhookLogClient<$Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WebhookLog.
     * @param {WebhookLogUpdateArgs} args - Arguments to update one WebhookLog.
     * @example
     * // Update one WebhookLog
     * const webhookLog = await prisma.webhookLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WebhookLogUpdateArgs>(args: SelectSubset<T, WebhookLogUpdateArgs<ExtArgs>>): Prisma__WebhookLogClient<$Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WebhookLogs.
     * @param {WebhookLogDeleteManyArgs} args - Arguments to filter WebhookLogs to delete.
     * @example
     * // Delete a few WebhookLogs
     * const { count } = await prisma.webhookLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WebhookLogDeleteManyArgs>(args?: SelectSubset<T, WebhookLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebhookLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WebhookLogs
     * const webhookLog = await prisma.webhookLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WebhookLogUpdateManyArgs>(args: SelectSubset<T, WebhookLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebhookLogs and returns the data updated in the database.
     * @param {WebhookLogUpdateManyAndReturnArgs} args - Arguments to update many WebhookLogs.
     * @example
     * // Update many WebhookLogs
     * const webhookLog = await prisma.webhookLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WebhookLogs and only return the `id`
     * const webhookLogWithIdOnly = await prisma.webhookLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WebhookLogUpdateManyAndReturnArgs>(args: SelectSubset<T, WebhookLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WebhookLog.
     * @param {WebhookLogUpsertArgs} args - Arguments to update or create a WebhookLog.
     * @example
     * // Update or create a WebhookLog
     * const webhookLog = await prisma.webhookLog.upsert({
     *   create: {
     *     // ... data to create a WebhookLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WebhookLog we want to update
     *   }
     * })
     */
    upsert<T extends WebhookLogUpsertArgs>(args: SelectSubset<T, WebhookLogUpsertArgs<ExtArgs>>): Prisma__WebhookLogClient<$Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WebhookLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookLogCountArgs} args - Arguments to filter WebhookLogs to count.
     * @example
     * // Count the number of WebhookLogs
     * const count = await prisma.webhookLog.count({
     *   where: {
     *     // ... the filter for the WebhookLogs we want to count
     *   }
     * })
    **/
    count<T extends WebhookLogCountArgs>(
      args?: Subset<T, WebhookLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebhookLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WebhookLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebhookLogAggregateArgs>(args: Subset<T, WebhookLogAggregateArgs>): Prisma.PrismaPromise<GetWebhookLogAggregateType<T>>

    /**
     * Group by WebhookLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebhookLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebhookLogGroupByArgs['orderBy'] }
        : { orderBy?: WebhookLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebhookLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebhookLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WebhookLog model
   */
  readonly fields: WebhookLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WebhookLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WebhookLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends WebhookLog$orderArgs<ExtArgs> = {}>(args?: Subset<T, WebhookLog$orderArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    event<T extends WebhookLog$eventArgs<ExtArgs> = {}>(args?: Subset<T, WebhookLog$eventArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends WebhookLog$userArgs<ExtArgs> = {}>(args?: Subset<T, WebhookLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WebhookLog model
   */
  interface WebhookLogFieldRefs {
    readonly id: FieldRef<"WebhookLog", 'Int'>
    readonly target_url: FieldRef<"WebhookLog", 'String'>
    readonly event_type: FieldRef<"WebhookLog", 'String'>
    readonly order_id: FieldRef<"WebhookLog", 'Int'>
    readonly event_id: FieldRef<"WebhookLog", 'Int'>
    readonly user_id: FieldRef<"WebhookLog", 'String'>
    readonly payload: FieldRef<"WebhookLog", 'String'>
    readonly status_code: FieldRef<"WebhookLog", 'Int'>
    readonly response_text: FieldRef<"WebhookLog", 'String'>
    readonly triggered_at: FieldRef<"WebhookLog", 'DateTime'>
    readonly created_at: FieldRef<"WebhookLog", 'DateTime'>
    readonly updated_at: FieldRef<"WebhookLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WebhookLog findUnique
   */
  export type WebhookLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookLog
     */
    select?: WebhookLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookLog
     */
    omit?: WebhookLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookLogInclude<ExtArgs> | null
    /**
     * Filter, which WebhookLog to fetch.
     */
    where: WebhookLogWhereUniqueInput
  }

  /**
   * WebhookLog findUniqueOrThrow
   */
  export type WebhookLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookLog
     */
    select?: WebhookLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookLog
     */
    omit?: WebhookLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookLogInclude<ExtArgs> | null
    /**
     * Filter, which WebhookLog to fetch.
     */
    where: WebhookLogWhereUniqueInput
  }

  /**
   * WebhookLog findFirst
   */
  export type WebhookLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookLog
     */
    select?: WebhookLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookLog
     */
    omit?: WebhookLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookLogInclude<ExtArgs> | null
    /**
     * Filter, which WebhookLog to fetch.
     */
    where?: WebhookLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookLogs to fetch.
     */
    orderBy?: WebhookLogOrderByWithRelationInput | WebhookLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebhookLogs.
     */
    cursor?: WebhookLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebhookLogs.
     */
    distinct?: WebhookLogScalarFieldEnum | WebhookLogScalarFieldEnum[]
  }

  /**
   * WebhookLog findFirstOrThrow
   */
  export type WebhookLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookLog
     */
    select?: WebhookLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookLog
     */
    omit?: WebhookLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookLogInclude<ExtArgs> | null
    /**
     * Filter, which WebhookLog to fetch.
     */
    where?: WebhookLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookLogs to fetch.
     */
    orderBy?: WebhookLogOrderByWithRelationInput | WebhookLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebhookLogs.
     */
    cursor?: WebhookLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebhookLogs.
     */
    distinct?: WebhookLogScalarFieldEnum | WebhookLogScalarFieldEnum[]
  }

  /**
   * WebhookLog findMany
   */
  export type WebhookLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookLog
     */
    select?: WebhookLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookLog
     */
    omit?: WebhookLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookLogInclude<ExtArgs> | null
    /**
     * Filter, which WebhookLogs to fetch.
     */
    where?: WebhookLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookLogs to fetch.
     */
    orderBy?: WebhookLogOrderByWithRelationInput | WebhookLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WebhookLogs.
     */
    cursor?: WebhookLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookLogs.
     */
    skip?: number
    distinct?: WebhookLogScalarFieldEnum | WebhookLogScalarFieldEnum[]
  }

  /**
   * WebhookLog create
   */
  export type WebhookLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookLog
     */
    select?: WebhookLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookLog
     */
    omit?: WebhookLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookLogInclude<ExtArgs> | null
    /**
     * The data needed to create a WebhookLog.
     */
    data: XOR<WebhookLogCreateInput, WebhookLogUncheckedCreateInput>
  }

  /**
   * WebhookLog createMany
   */
  export type WebhookLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WebhookLogs.
     */
    data: WebhookLogCreateManyInput | WebhookLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WebhookLog createManyAndReturn
   */
  export type WebhookLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookLog
     */
    select?: WebhookLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookLog
     */
    omit?: WebhookLogOmit<ExtArgs> | null
    /**
     * The data used to create many WebhookLogs.
     */
    data: WebhookLogCreateManyInput | WebhookLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WebhookLog update
   */
  export type WebhookLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookLog
     */
    select?: WebhookLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookLog
     */
    omit?: WebhookLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookLogInclude<ExtArgs> | null
    /**
     * The data needed to update a WebhookLog.
     */
    data: XOR<WebhookLogUpdateInput, WebhookLogUncheckedUpdateInput>
    /**
     * Choose, which WebhookLog to update.
     */
    where: WebhookLogWhereUniqueInput
  }

  /**
   * WebhookLog updateMany
   */
  export type WebhookLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WebhookLogs.
     */
    data: XOR<WebhookLogUpdateManyMutationInput, WebhookLogUncheckedUpdateManyInput>
    /**
     * Filter which WebhookLogs to update
     */
    where?: WebhookLogWhereInput
    /**
     * Limit how many WebhookLogs to update.
     */
    limit?: number
  }

  /**
   * WebhookLog updateManyAndReturn
   */
  export type WebhookLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookLog
     */
    select?: WebhookLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookLog
     */
    omit?: WebhookLogOmit<ExtArgs> | null
    /**
     * The data used to update WebhookLogs.
     */
    data: XOR<WebhookLogUpdateManyMutationInput, WebhookLogUncheckedUpdateManyInput>
    /**
     * Filter which WebhookLogs to update
     */
    where?: WebhookLogWhereInput
    /**
     * Limit how many WebhookLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WebhookLog upsert
   */
  export type WebhookLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookLog
     */
    select?: WebhookLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookLog
     */
    omit?: WebhookLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookLogInclude<ExtArgs> | null
    /**
     * The filter to search for the WebhookLog to update in case it exists.
     */
    where: WebhookLogWhereUniqueInput
    /**
     * In case the WebhookLog found by the `where` argument doesn't exist, create a new WebhookLog with this data.
     */
    create: XOR<WebhookLogCreateInput, WebhookLogUncheckedCreateInput>
    /**
     * In case the WebhookLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WebhookLogUpdateInput, WebhookLogUncheckedUpdateInput>
  }

  /**
   * WebhookLog delete
   */
  export type WebhookLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookLog
     */
    select?: WebhookLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookLog
     */
    omit?: WebhookLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookLogInclude<ExtArgs> | null
    /**
     * Filter which WebhookLog to delete.
     */
    where: WebhookLogWhereUniqueInput
  }

  /**
   * WebhookLog deleteMany
   */
  export type WebhookLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebhookLogs to delete
     */
    where?: WebhookLogWhereInput
    /**
     * Limit how many WebhookLogs to delete.
     */
    limit?: number
  }

  /**
   * WebhookLog.order
   */
  export type WebhookLog$orderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
  }

  /**
   * WebhookLog.event
   */
  export type WebhookLog$eventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
  }

  /**
   * WebhookLog.user
   */
  export type WebhookLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * WebhookLog without action
   */
  export type WebhookLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookLog
     */
    select?: WebhookLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookLog
     */
    omit?: WebhookLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookLogInclude<ExtArgs> | null
  }


  /**
   * Model WebhookSubscription
   */

  export type AggregateWebhookSubscription = {
    _count: WebhookSubscriptionCountAggregateOutputType | null
    _avg: WebhookSubscriptionAvgAggregateOutputType | null
    _sum: WebhookSubscriptionSumAggregateOutputType | null
    _min: WebhookSubscriptionMinAggregateOutputType | null
    _max: WebhookSubscriptionMaxAggregateOutputType | null
  }

  export type WebhookSubscriptionAvgAggregateOutputType = {
    id: number | null
    organization_id: number | null
  }

  export type WebhookSubscriptionSumAggregateOutputType = {
    id: number | null
    organization_id: number | null
  }

  export type WebhookSubscriptionMinAggregateOutputType = {
    id: number | null
    organization_id: number | null
    target_url: string | null
    event_type: string | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type WebhookSubscriptionMaxAggregateOutputType = {
    id: number | null
    organization_id: number | null
    target_url: string | null
    event_type: string | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type WebhookSubscriptionCountAggregateOutputType = {
    id: number
    organization_id: number
    target_url: number
    event_type: number
    is_active: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type WebhookSubscriptionAvgAggregateInputType = {
    id?: true
    organization_id?: true
  }

  export type WebhookSubscriptionSumAggregateInputType = {
    id?: true
    organization_id?: true
  }

  export type WebhookSubscriptionMinAggregateInputType = {
    id?: true
    organization_id?: true
    target_url?: true
    event_type?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type WebhookSubscriptionMaxAggregateInputType = {
    id?: true
    organization_id?: true
    target_url?: true
    event_type?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type WebhookSubscriptionCountAggregateInputType = {
    id?: true
    organization_id?: true
    target_url?: true
    event_type?: true
    is_active?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type WebhookSubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebhookSubscription to aggregate.
     */
    where?: WebhookSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookSubscriptions to fetch.
     */
    orderBy?: WebhookSubscriptionOrderByWithRelationInput | WebhookSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WebhookSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WebhookSubscriptions
    **/
    _count?: true | WebhookSubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WebhookSubscriptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WebhookSubscriptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebhookSubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebhookSubscriptionMaxAggregateInputType
  }

  export type GetWebhookSubscriptionAggregateType<T extends WebhookSubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateWebhookSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebhookSubscription[P]>
      : GetScalarType<T[P], AggregateWebhookSubscription[P]>
  }




  export type WebhookSubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebhookSubscriptionWhereInput
    orderBy?: WebhookSubscriptionOrderByWithAggregationInput | WebhookSubscriptionOrderByWithAggregationInput[]
    by: WebhookSubscriptionScalarFieldEnum[] | WebhookSubscriptionScalarFieldEnum
    having?: WebhookSubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebhookSubscriptionCountAggregateInputType | true
    _avg?: WebhookSubscriptionAvgAggregateInputType
    _sum?: WebhookSubscriptionSumAggregateInputType
    _min?: WebhookSubscriptionMinAggregateInputType
    _max?: WebhookSubscriptionMaxAggregateInputType
  }

  export type WebhookSubscriptionGroupByOutputType = {
    id: number
    organization_id: number
    target_url: string
    event_type: string
    is_active: boolean
    created_at: Date
    updated_at: Date
    _count: WebhookSubscriptionCountAggregateOutputType | null
    _avg: WebhookSubscriptionAvgAggregateOutputType | null
    _sum: WebhookSubscriptionSumAggregateOutputType | null
    _min: WebhookSubscriptionMinAggregateOutputType | null
    _max: WebhookSubscriptionMaxAggregateOutputType | null
  }

  type GetWebhookSubscriptionGroupByPayload<T extends WebhookSubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WebhookSubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebhookSubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebhookSubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], WebhookSubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type WebhookSubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organization_id?: boolean
    target_url?: boolean
    event_type?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webhookSubscription"]>

  export type WebhookSubscriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organization_id?: boolean
    target_url?: boolean
    event_type?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webhookSubscription"]>

  export type WebhookSubscriptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organization_id?: boolean
    target_url?: boolean
    event_type?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webhookSubscription"]>

  export type WebhookSubscriptionSelectScalar = {
    id?: boolean
    organization_id?: boolean
    target_url?: boolean
    event_type?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type WebhookSubscriptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organization_id" | "target_url" | "event_type" | "is_active" | "created_at" | "updated_at", ExtArgs["result"]["webhookSubscription"]>
  export type WebhookSubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type WebhookSubscriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type WebhookSubscriptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $WebhookSubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WebhookSubscription"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      organization_id: number
      target_url: string
      event_type: string
      is_active: boolean
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["webhookSubscription"]>
    composites: {}
  }

  type WebhookSubscriptionGetPayload<S extends boolean | null | undefined | WebhookSubscriptionDefaultArgs> = $Result.GetResult<Prisma.$WebhookSubscriptionPayload, S>

  type WebhookSubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WebhookSubscriptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WebhookSubscriptionCountAggregateInputType | true
    }

  export interface WebhookSubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WebhookSubscription'], meta: { name: 'WebhookSubscription' } }
    /**
     * Find zero or one WebhookSubscription that matches the filter.
     * @param {WebhookSubscriptionFindUniqueArgs} args - Arguments to find a WebhookSubscription
     * @example
     * // Get one WebhookSubscription
     * const webhookSubscription = await prisma.webhookSubscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WebhookSubscriptionFindUniqueArgs>(args: SelectSubset<T, WebhookSubscriptionFindUniqueArgs<ExtArgs>>): Prisma__WebhookSubscriptionClient<$Result.GetResult<Prisma.$WebhookSubscriptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WebhookSubscription that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WebhookSubscriptionFindUniqueOrThrowArgs} args - Arguments to find a WebhookSubscription
     * @example
     * // Get one WebhookSubscription
     * const webhookSubscription = await prisma.webhookSubscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WebhookSubscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, WebhookSubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WebhookSubscriptionClient<$Result.GetResult<Prisma.$WebhookSubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WebhookSubscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookSubscriptionFindFirstArgs} args - Arguments to find a WebhookSubscription
     * @example
     * // Get one WebhookSubscription
     * const webhookSubscription = await prisma.webhookSubscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WebhookSubscriptionFindFirstArgs>(args?: SelectSubset<T, WebhookSubscriptionFindFirstArgs<ExtArgs>>): Prisma__WebhookSubscriptionClient<$Result.GetResult<Prisma.$WebhookSubscriptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WebhookSubscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookSubscriptionFindFirstOrThrowArgs} args - Arguments to find a WebhookSubscription
     * @example
     * // Get one WebhookSubscription
     * const webhookSubscription = await prisma.webhookSubscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WebhookSubscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, WebhookSubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__WebhookSubscriptionClient<$Result.GetResult<Prisma.$WebhookSubscriptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WebhookSubscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookSubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WebhookSubscriptions
     * const webhookSubscriptions = await prisma.webhookSubscription.findMany()
     * 
     * // Get first 10 WebhookSubscriptions
     * const webhookSubscriptions = await prisma.webhookSubscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const webhookSubscriptionWithIdOnly = await prisma.webhookSubscription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WebhookSubscriptionFindManyArgs>(args?: SelectSubset<T, WebhookSubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookSubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WebhookSubscription.
     * @param {WebhookSubscriptionCreateArgs} args - Arguments to create a WebhookSubscription.
     * @example
     * // Create one WebhookSubscription
     * const WebhookSubscription = await prisma.webhookSubscription.create({
     *   data: {
     *     // ... data to create a WebhookSubscription
     *   }
     * })
     * 
     */
    create<T extends WebhookSubscriptionCreateArgs>(args: SelectSubset<T, WebhookSubscriptionCreateArgs<ExtArgs>>): Prisma__WebhookSubscriptionClient<$Result.GetResult<Prisma.$WebhookSubscriptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WebhookSubscriptions.
     * @param {WebhookSubscriptionCreateManyArgs} args - Arguments to create many WebhookSubscriptions.
     * @example
     * // Create many WebhookSubscriptions
     * const webhookSubscription = await prisma.webhookSubscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WebhookSubscriptionCreateManyArgs>(args?: SelectSubset<T, WebhookSubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WebhookSubscriptions and returns the data saved in the database.
     * @param {WebhookSubscriptionCreateManyAndReturnArgs} args - Arguments to create many WebhookSubscriptions.
     * @example
     * // Create many WebhookSubscriptions
     * const webhookSubscription = await prisma.webhookSubscription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WebhookSubscriptions and only return the `id`
     * const webhookSubscriptionWithIdOnly = await prisma.webhookSubscription.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WebhookSubscriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, WebhookSubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookSubscriptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WebhookSubscription.
     * @param {WebhookSubscriptionDeleteArgs} args - Arguments to delete one WebhookSubscription.
     * @example
     * // Delete one WebhookSubscription
     * const WebhookSubscription = await prisma.webhookSubscription.delete({
     *   where: {
     *     // ... filter to delete one WebhookSubscription
     *   }
     * })
     * 
     */
    delete<T extends WebhookSubscriptionDeleteArgs>(args: SelectSubset<T, WebhookSubscriptionDeleteArgs<ExtArgs>>): Prisma__WebhookSubscriptionClient<$Result.GetResult<Prisma.$WebhookSubscriptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WebhookSubscription.
     * @param {WebhookSubscriptionUpdateArgs} args - Arguments to update one WebhookSubscription.
     * @example
     * // Update one WebhookSubscription
     * const webhookSubscription = await prisma.webhookSubscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WebhookSubscriptionUpdateArgs>(args: SelectSubset<T, WebhookSubscriptionUpdateArgs<ExtArgs>>): Prisma__WebhookSubscriptionClient<$Result.GetResult<Prisma.$WebhookSubscriptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WebhookSubscriptions.
     * @param {WebhookSubscriptionDeleteManyArgs} args - Arguments to filter WebhookSubscriptions to delete.
     * @example
     * // Delete a few WebhookSubscriptions
     * const { count } = await prisma.webhookSubscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WebhookSubscriptionDeleteManyArgs>(args?: SelectSubset<T, WebhookSubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebhookSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookSubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WebhookSubscriptions
     * const webhookSubscription = await prisma.webhookSubscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WebhookSubscriptionUpdateManyArgs>(args: SelectSubset<T, WebhookSubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebhookSubscriptions and returns the data updated in the database.
     * @param {WebhookSubscriptionUpdateManyAndReturnArgs} args - Arguments to update many WebhookSubscriptions.
     * @example
     * // Update many WebhookSubscriptions
     * const webhookSubscription = await prisma.webhookSubscription.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WebhookSubscriptions and only return the `id`
     * const webhookSubscriptionWithIdOnly = await prisma.webhookSubscription.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WebhookSubscriptionUpdateManyAndReturnArgs>(args: SelectSubset<T, WebhookSubscriptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookSubscriptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WebhookSubscription.
     * @param {WebhookSubscriptionUpsertArgs} args - Arguments to update or create a WebhookSubscription.
     * @example
     * // Update or create a WebhookSubscription
     * const webhookSubscription = await prisma.webhookSubscription.upsert({
     *   create: {
     *     // ... data to create a WebhookSubscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WebhookSubscription we want to update
     *   }
     * })
     */
    upsert<T extends WebhookSubscriptionUpsertArgs>(args: SelectSubset<T, WebhookSubscriptionUpsertArgs<ExtArgs>>): Prisma__WebhookSubscriptionClient<$Result.GetResult<Prisma.$WebhookSubscriptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WebhookSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookSubscriptionCountArgs} args - Arguments to filter WebhookSubscriptions to count.
     * @example
     * // Count the number of WebhookSubscriptions
     * const count = await prisma.webhookSubscription.count({
     *   where: {
     *     // ... the filter for the WebhookSubscriptions we want to count
     *   }
     * })
    **/
    count<T extends WebhookSubscriptionCountArgs>(
      args?: Subset<T, WebhookSubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebhookSubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WebhookSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookSubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebhookSubscriptionAggregateArgs>(args: Subset<T, WebhookSubscriptionAggregateArgs>): Prisma.PrismaPromise<GetWebhookSubscriptionAggregateType<T>>

    /**
     * Group by WebhookSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookSubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebhookSubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebhookSubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: WebhookSubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebhookSubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebhookSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WebhookSubscription model
   */
  readonly fields: WebhookSubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WebhookSubscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WebhookSubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WebhookSubscription model
   */
  interface WebhookSubscriptionFieldRefs {
    readonly id: FieldRef<"WebhookSubscription", 'Int'>
    readonly organization_id: FieldRef<"WebhookSubscription", 'Int'>
    readonly target_url: FieldRef<"WebhookSubscription", 'String'>
    readonly event_type: FieldRef<"WebhookSubscription", 'String'>
    readonly is_active: FieldRef<"WebhookSubscription", 'Boolean'>
    readonly created_at: FieldRef<"WebhookSubscription", 'DateTime'>
    readonly updated_at: FieldRef<"WebhookSubscription", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WebhookSubscription findUnique
   */
  export type WebhookSubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookSubscription
     */
    omit?: WebhookSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which WebhookSubscription to fetch.
     */
    where: WebhookSubscriptionWhereUniqueInput
  }

  /**
   * WebhookSubscription findUniqueOrThrow
   */
  export type WebhookSubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookSubscription
     */
    omit?: WebhookSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which WebhookSubscription to fetch.
     */
    where: WebhookSubscriptionWhereUniqueInput
  }

  /**
   * WebhookSubscription findFirst
   */
  export type WebhookSubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookSubscription
     */
    omit?: WebhookSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which WebhookSubscription to fetch.
     */
    where?: WebhookSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookSubscriptions to fetch.
     */
    orderBy?: WebhookSubscriptionOrderByWithRelationInput | WebhookSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebhookSubscriptions.
     */
    cursor?: WebhookSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebhookSubscriptions.
     */
    distinct?: WebhookSubscriptionScalarFieldEnum | WebhookSubscriptionScalarFieldEnum[]
  }

  /**
   * WebhookSubscription findFirstOrThrow
   */
  export type WebhookSubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookSubscription
     */
    omit?: WebhookSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which WebhookSubscription to fetch.
     */
    where?: WebhookSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookSubscriptions to fetch.
     */
    orderBy?: WebhookSubscriptionOrderByWithRelationInput | WebhookSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebhookSubscriptions.
     */
    cursor?: WebhookSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebhookSubscriptions.
     */
    distinct?: WebhookSubscriptionScalarFieldEnum | WebhookSubscriptionScalarFieldEnum[]
  }

  /**
   * WebhookSubscription findMany
   */
  export type WebhookSubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookSubscription
     */
    omit?: WebhookSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which WebhookSubscriptions to fetch.
     */
    where?: WebhookSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookSubscriptions to fetch.
     */
    orderBy?: WebhookSubscriptionOrderByWithRelationInput | WebhookSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WebhookSubscriptions.
     */
    cursor?: WebhookSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookSubscriptions.
     */
    skip?: number
    distinct?: WebhookSubscriptionScalarFieldEnum | WebhookSubscriptionScalarFieldEnum[]
  }

  /**
   * WebhookSubscription create
   */
  export type WebhookSubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookSubscription
     */
    omit?: WebhookSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a WebhookSubscription.
     */
    data: XOR<WebhookSubscriptionCreateInput, WebhookSubscriptionUncheckedCreateInput>
  }

  /**
   * WebhookSubscription createMany
   */
  export type WebhookSubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WebhookSubscriptions.
     */
    data: WebhookSubscriptionCreateManyInput | WebhookSubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WebhookSubscription createManyAndReturn
   */
  export type WebhookSubscriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookSubscription
     */
    omit?: WebhookSubscriptionOmit<ExtArgs> | null
    /**
     * The data used to create many WebhookSubscriptions.
     */
    data: WebhookSubscriptionCreateManyInput | WebhookSubscriptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookSubscriptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WebhookSubscription update
   */
  export type WebhookSubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookSubscription
     */
    omit?: WebhookSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a WebhookSubscription.
     */
    data: XOR<WebhookSubscriptionUpdateInput, WebhookSubscriptionUncheckedUpdateInput>
    /**
     * Choose, which WebhookSubscription to update.
     */
    where: WebhookSubscriptionWhereUniqueInput
  }

  /**
   * WebhookSubscription updateMany
   */
  export type WebhookSubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WebhookSubscriptions.
     */
    data: XOR<WebhookSubscriptionUpdateManyMutationInput, WebhookSubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which WebhookSubscriptions to update
     */
    where?: WebhookSubscriptionWhereInput
    /**
     * Limit how many WebhookSubscriptions to update.
     */
    limit?: number
  }

  /**
   * WebhookSubscription updateManyAndReturn
   */
  export type WebhookSubscriptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookSubscription
     */
    omit?: WebhookSubscriptionOmit<ExtArgs> | null
    /**
     * The data used to update WebhookSubscriptions.
     */
    data: XOR<WebhookSubscriptionUpdateManyMutationInput, WebhookSubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which WebhookSubscriptions to update
     */
    where?: WebhookSubscriptionWhereInput
    /**
     * Limit how many WebhookSubscriptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookSubscriptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WebhookSubscription upsert
   */
  export type WebhookSubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookSubscription
     */
    omit?: WebhookSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookSubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the WebhookSubscription to update in case it exists.
     */
    where: WebhookSubscriptionWhereUniqueInput
    /**
     * In case the WebhookSubscription found by the `where` argument doesn't exist, create a new WebhookSubscription with this data.
     */
    create: XOR<WebhookSubscriptionCreateInput, WebhookSubscriptionUncheckedCreateInput>
    /**
     * In case the WebhookSubscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WebhookSubscriptionUpdateInput, WebhookSubscriptionUncheckedUpdateInput>
  }

  /**
   * WebhookSubscription delete
   */
  export type WebhookSubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookSubscription
     */
    omit?: WebhookSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookSubscriptionInclude<ExtArgs> | null
    /**
     * Filter which WebhookSubscription to delete.
     */
    where: WebhookSubscriptionWhereUniqueInput
  }

  /**
   * WebhookSubscription deleteMany
   */
  export type WebhookSubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebhookSubscriptions to delete
     */
    where?: WebhookSubscriptionWhereInput
    /**
     * Limit how many WebhookSubscriptions to delete.
     */
    limit?: number
  }

  /**
   * WebhookSubscription without action
   */
  export type WebhookSubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookSubscription
     */
    omit?: WebhookSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookSubscriptionInclude<ExtArgs> | null
  }


  /**
   * Model TrackingVisit
   */

  export type AggregateTrackingVisit = {
    _count: TrackingVisitCountAggregateOutputType | null
    _avg: TrackingVisitAvgAggregateOutputType | null
    _sum: TrackingVisitSumAggregateOutputType | null
    _min: TrackingVisitMinAggregateOutputType | null
    _max: TrackingVisitMaxAggregateOutputType | null
  }

  export type TrackingVisitAvgAggregateOutputType = {
    id: number | null
    event_id: number | null
  }

  export type TrackingVisitSumAggregateOutputType = {
    id: number | null
    event_id: number | null
  }

  export type TrackingVisitMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    event_id: number | null
    utm_source: string | null
    utm_medium: string | null
    utm_campaign: string | null
    utm_content: string | null
    referrer_url: string | null
    landing_page: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TrackingVisitMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    event_id: number | null
    utm_source: string | null
    utm_medium: string | null
    utm_campaign: string | null
    utm_content: string | null
    referrer_url: string | null
    landing_page: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TrackingVisitCountAggregateOutputType = {
    id: number
    user_id: number
    event_id: number
    utm_source: number
    utm_medium: number
    utm_campaign: number
    utm_content: number
    referrer_url: number
    landing_page: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type TrackingVisitAvgAggregateInputType = {
    id?: true
    event_id?: true
  }

  export type TrackingVisitSumAggregateInputType = {
    id?: true
    event_id?: true
  }

  export type TrackingVisitMinAggregateInputType = {
    id?: true
    user_id?: true
    event_id?: true
    utm_source?: true
    utm_medium?: true
    utm_campaign?: true
    utm_content?: true
    referrer_url?: true
    landing_page?: true
    created_at?: true
    updated_at?: true
  }

  export type TrackingVisitMaxAggregateInputType = {
    id?: true
    user_id?: true
    event_id?: true
    utm_source?: true
    utm_medium?: true
    utm_campaign?: true
    utm_content?: true
    referrer_url?: true
    landing_page?: true
    created_at?: true
    updated_at?: true
  }

  export type TrackingVisitCountAggregateInputType = {
    id?: true
    user_id?: true
    event_id?: true
    utm_source?: true
    utm_medium?: true
    utm_campaign?: true
    utm_content?: true
    referrer_url?: true
    landing_page?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type TrackingVisitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrackingVisit to aggregate.
     */
    where?: TrackingVisitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrackingVisits to fetch.
     */
    orderBy?: TrackingVisitOrderByWithRelationInput | TrackingVisitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrackingVisitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrackingVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrackingVisits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TrackingVisits
    **/
    _count?: true | TrackingVisitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrackingVisitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrackingVisitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrackingVisitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrackingVisitMaxAggregateInputType
  }

  export type GetTrackingVisitAggregateType<T extends TrackingVisitAggregateArgs> = {
        [P in keyof T & keyof AggregateTrackingVisit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrackingVisit[P]>
      : GetScalarType<T[P], AggregateTrackingVisit[P]>
  }




  export type TrackingVisitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrackingVisitWhereInput
    orderBy?: TrackingVisitOrderByWithAggregationInput | TrackingVisitOrderByWithAggregationInput[]
    by: TrackingVisitScalarFieldEnum[] | TrackingVisitScalarFieldEnum
    having?: TrackingVisitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrackingVisitCountAggregateInputType | true
    _avg?: TrackingVisitAvgAggregateInputType
    _sum?: TrackingVisitSumAggregateInputType
    _min?: TrackingVisitMinAggregateInputType
    _max?: TrackingVisitMaxAggregateInputType
  }

  export type TrackingVisitGroupByOutputType = {
    id: number
    user_id: string | null
    event_id: number
    utm_source: string | null
    utm_medium: string | null
    utm_campaign: string | null
    utm_content: string | null
    referrer_url: string | null
    landing_page: string | null
    created_at: Date
    updated_at: Date
    _count: TrackingVisitCountAggregateOutputType | null
    _avg: TrackingVisitAvgAggregateOutputType | null
    _sum: TrackingVisitSumAggregateOutputType | null
    _min: TrackingVisitMinAggregateOutputType | null
    _max: TrackingVisitMaxAggregateOutputType | null
  }

  type GetTrackingVisitGroupByPayload<T extends TrackingVisitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrackingVisitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrackingVisitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrackingVisitGroupByOutputType[P]>
            : GetScalarType<T[P], TrackingVisitGroupByOutputType[P]>
        }
      >
    >


  export type TrackingVisitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    event_id?: boolean
    utm_source?: boolean
    utm_medium?: boolean
    utm_campaign?: boolean
    utm_content?: boolean
    referrer_url?: boolean
    landing_page?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | TrackingVisit$userArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trackingVisit"]>

  export type TrackingVisitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    event_id?: boolean
    utm_source?: boolean
    utm_medium?: boolean
    utm_campaign?: boolean
    utm_content?: boolean
    referrer_url?: boolean
    landing_page?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | TrackingVisit$userArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trackingVisit"]>

  export type TrackingVisitSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    event_id?: boolean
    utm_source?: boolean
    utm_medium?: boolean
    utm_campaign?: boolean
    utm_content?: boolean
    referrer_url?: boolean
    landing_page?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | TrackingVisit$userArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trackingVisit"]>

  export type TrackingVisitSelectScalar = {
    id?: boolean
    user_id?: boolean
    event_id?: boolean
    utm_source?: boolean
    utm_medium?: boolean
    utm_campaign?: boolean
    utm_content?: boolean
    referrer_url?: boolean
    landing_page?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type TrackingVisitOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "event_id" | "utm_source" | "utm_medium" | "utm_campaign" | "utm_content" | "referrer_url" | "landing_page" | "created_at" | "updated_at", ExtArgs["result"]["trackingVisit"]>
  export type TrackingVisitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | TrackingVisit$userArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type TrackingVisitIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | TrackingVisit$userArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type TrackingVisitIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | TrackingVisit$userArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }

  export type $TrackingVisitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TrackingVisit"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      event: Prisma.$EventPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: string | null
      event_id: number
      utm_source: string | null
      utm_medium: string | null
      utm_campaign: string | null
      utm_content: string | null
      referrer_url: string | null
      landing_page: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["trackingVisit"]>
    composites: {}
  }

  type TrackingVisitGetPayload<S extends boolean | null | undefined | TrackingVisitDefaultArgs> = $Result.GetResult<Prisma.$TrackingVisitPayload, S>

  type TrackingVisitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TrackingVisitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TrackingVisitCountAggregateInputType | true
    }

  export interface TrackingVisitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TrackingVisit'], meta: { name: 'TrackingVisit' } }
    /**
     * Find zero or one TrackingVisit that matches the filter.
     * @param {TrackingVisitFindUniqueArgs} args - Arguments to find a TrackingVisit
     * @example
     * // Get one TrackingVisit
     * const trackingVisit = await prisma.trackingVisit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TrackingVisitFindUniqueArgs>(args: SelectSubset<T, TrackingVisitFindUniqueArgs<ExtArgs>>): Prisma__TrackingVisitClient<$Result.GetResult<Prisma.$TrackingVisitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TrackingVisit that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TrackingVisitFindUniqueOrThrowArgs} args - Arguments to find a TrackingVisit
     * @example
     * // Get one TrackingVisit
     * const trackingVisit = await prisma.trackingVisit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TrackingVisitFindUniqueOrThrowArgs>(args: SelectSubset<T, TrackingVisitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TrackingVisitClient<$Result.GetResult<Prisma.$TrackingVisitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TrackingVisit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackingVisitFindFirstArgs} args - Arguments to find a TrackingVisit
     * @example
     * // Get one TrackingVisit
     * const trackingVisit = await prisma.trackingVisit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TrackingVisitFindFirstArgs>(args?: SelectSubset<T, TrackingVisitFindFirstArgs<ExtArgs>>): Prisma__TrackingVisitClient<$Result.GetResult<Prisma.$TrackingVisitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TrackingVisit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackingVisitFindFirstOrThrowArgs} args - Arguments to find a TrackingVisit
     * @example
     * // Get one TrackingVisit
     * const trackingVisit = await prisma.trackingVisit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TrackingVisitFindFirstOrThrowArgs>(args?: SelectSubset<T, TrackingVisitFindFirstOrThrowArgs<ExtArgs>>): Prisma__TrackingVisitClient<$Result.GetResult<Prisma.$TrackingVisitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TrackingVisits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackingVisitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TrackingVisits
     * const trackingVisits = await prisma.trackingVisit.findMany()
     * 
     * // Get first 10 TrackingVisits
     * const trackingVisits = await prisma.trackingVisit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trackingVisitWithIdOnly = await prisma.trackingVisit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TrackingVisitFindManyArgs>(args?: SelectSubset<T, TrackingVisitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackingVisitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TrackingVisit.
     * @param {TrackingVisitCreateArgs} args - Arguments to create a TrackingVisit.
     * @example
     * // Create one TrackingVisit
     * const TrackingVisit = await prisma.trackingVisit.create({
     *   data: {
     *     // ... data to create a TrackingVisit
     *   }
     * })
     * 
     */
    create<T extends TrackingVisitCreateArgs>(args: SelectSubset<T, TrackingVisitCreateArgs<ExtArgs>>): Prisma__TrackingVisitClient<$Result.GetResult<Prisma.$TrackingVisitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TrackingVisits.
     * @param {TrackingVisitCreateManyArgs} args - Arguments to create many TrackingVisits.
     * @example
     * // Create many TrackingVisits
     * const trackingVisit = await prisma.trackingVisit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TrackingVisitCreateManyArgs>(args?: SelectSubset<T, TrackingVisitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TrackingVisits and returns the data saved in the database.
     * @param {TrackingVisitCreateManyAndReturnArgs} args - Arguments to create many TrackingVisits.
     * @example
     * // Create many TrackingVisits
     * const trackingVisit = await prisma.trackingVisit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TrackingVisits and only return the `id`
     * const trackingVisitWithIdOnly = await prisma.trackingVisit.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TrackingVisitCreateManyAndReturnArgs>(args?: SelectSubset<T, TrackingVisitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackingVisitPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TrackingVisit.
     * @param {TrackingVisitDeleteArgs} args - Arguments to delete one TrackingVisit.
     * @example
     * // Delete one TrackingVisit
     * const TrackingVisit = await prisma.trackingVisit.delete({
     *   where: {
     *     // ... filter to delete one TrackingVisit
     *   }
     * })
     * 
     */
    delete<T extends TrackingVisitDeleteArgs>(args: SelectSubset<T, TrackingVisitDeleteArgs<ExtArgs>>): Prisma__TrackingVisitClient<$Result.GetResult<Prisma.$TrackingVisitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TrackingVisit.
     * @param {TrackingVisitUpdateArgs} args - Arguments to update one TrackingVisit.
     * @example
     * // Update one TrackingVisit
     * const trackingVisit = await prisma.trackingVisit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TrackingVisitUpdateArgs>(args: SelectSubset<T, TrackingVisitUpdateArgs<ExtArgs>>): Prisma__TrackingVisitClient<$Result.GetResult<Prisma.$TrackingVisitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TrackingVisits.
     * @param {TrackingVisitDeleteManyArgs} args - Arguments to filter TrackingVisits to delete.
     * @example
     * // Delete a few TrackingVisits
     * const { count } = await prisma.trackingVisit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TrackingVisitDeleteManyArgs>(args?: SelectSubset<T, TrackingVisitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrackingVisits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackingVisitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TrackingVisits
     * const trackingVisit = await prisma.trackingVisit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TrackingVisitUpdateManyArgs>(args: SelectSubset<T, TrackingVisitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrackingVisits and returns the data updated in the database.
     * @param {TrackingVisitUpdateManyAndReturnArgs} args - Arguments to update many TrackingVisits.
     * @example
     * // Update many TrackingVisits
     * const trackingVisit = await prisma.trackingVisit.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TrackingVisits and only return the `id`
     * const trackingVisitWithIdOnly = await prisma.trackingVisit.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TrackingVisitUpdateManyAndReturnArgs>(args: SelectSubset<T, TrackingVisitUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackingVisitPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TrackingVisit.
     * @param {TrackingVisitUpsertArgs} args - Arguments to update or create a TrackingVisit.
     * @example
     * // Update or create a TrackingVisit
     * const trackingVisit = await prisma.trackingVisit.upsert({
     *   create: {
     *     // ... data to create a TrackingVisit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TrackingVisit we want to update
     *   }
     * })
     */
    upsert<T extends TrackingVisitUpsertArgs>(args: SelectSubset<T, TrackingVisitUpsertArgs<ExtArgs>>): Prisma__TrackingVisitClient<$Result.GetResult<Prisma.$TrackingVisitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TrackingVisits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackingVisitCountArgs} args - Arguments to filter TrackingVisits to count.
     * @example
     * // Count the number of TrackingVisits
     * const count = await prisma.trackingVisit.count({
     *   where: {
     *     // ... the filter for the TrackingVisits we want to count
     *   }
     * })
    **/
    count<T extends TrackingVisitCountArgs>(
      args?: Subset<T, TrackingVisitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrackingVisitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TrackingVisit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackingVisitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrackingVisitAggregateArgs>(args: Subset<T, TrackingVisitAggregateArgs>): Prisma.PrismaPromise<GetTrackingVisitAggregateType<T>>

    /**
     * Group by TrackingVisit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackingVisitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrackingVisitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrackingVisitGroupByArgs['orderBy'] }
        : { orderBy?: TrackingVisitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrackingVisitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrackingVisitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TrackingVisit model
   */
  readonly fields: TrackingVisitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TrackingVisit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrackingVisitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends TrackingVisit$userArgs<ExtArgs> = {}>(args?: Subset<T, TrackingVisit$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TrackingVisit model
   */
  interface TrackingVisitFieldRefs {
    readonly id: FieldRef<"TrackingVisit", 'Int'>
    readonly user_id: FieldRef<"TrackingVisit", 'String'>
    readonly event_id: FieldRef<"TrackingVisit", 'Int'>
    readonly utm_source: FieldRef<"TrackingVisit", 'String'>
    readonly utm_medium: FieldRef<"TrackingVisit", 'String'>
    readonly utm_campaign: FieldRef<"TrackingVisit", 'String'>
    readonly utm_content: FieldRef<"TrackingVisit", 'String'>
    readonly referrer_url: FieldRef<"TrackingVisit", 'String'>
    readonly landing_page: FieldRef<"TrackingVisit", 'String'>
    readonly created_at: FieldRef<"TrackingVisit", 'DateTime'>
    readonly updated_at: FieldRef<"TrackingVisit", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TrackingVisit findUnique
   */
  export type TrackingVisitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackingVisit
     */
    select?: TrackingVisitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackingVisit
     */
    omit?: TrackingVisitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackingVisitInclude<ExtArgs> | null
    /**
     * Filter, which TrackingVisit to fetch.
     */
    where: TrackingVisitWhereUniqueInput
  }

  /**
   * TrackingVisit findUniqueOrThrow
   */
  export type TrackingVisitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackingVisit
     */
    select?: TrackingVisitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackingVisit
     */
    omit?: TrackingVisitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackingVisitInclude<ExtArgs> | null
    /**
     * Filter, which TrackingVisit to fetch.
     */
    where: TrackingVisitWhereUniqueInput
  }

  /**
   * TrackingVisit findFirst
   */
  export type TrackingVisitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackingVisit
     */
    select?: TrackingVisitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackingVisit
     */
    omit?: TrackingVisitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackingVisitInclude<ExtArgs> | null
    /**
     * Filter, which TrackingVisit to fetch.
     */
    where?: TrackingVisitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrackingVisits to fetch.
     */
    orderBy?: TrackingVisitOrderByWithRelationInput | TrackingVisitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrackingVisits.
     */
    cursor?: TrackingVisitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrackingVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrackingVisits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrackingVisits.
     */
    distinct?: TrackingVisitScalarFieldEnum | TrackingVisitScalarFieldEnum[]
  }

  /**
   * TrackingVisit findFirstOrThrow
   */
  export type TrackingVisitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackingVisit
     */
    select?: TrackingVisitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackingVisit
     */
    omit?: TrackingVisitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackingVisitInclude<ExtArgs> | null
    /**
     * Filter, which TrackingVisit to fetch.
     */
    where?: TrackingVisitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrackingVisits to fetch.
     */
    orderBy?: TrackingVisitOrderByWithRelationInput | TrackingVisitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrackingVisits.
     */
    cursor?: TrackingVisitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrackingVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrackingVisits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrackingVisits.
     */
    distinct?: TrackingVisitScalarFieldEnum | TrackingVisitScalarFieldEnum[]
  }

  /**
   * TrackingVisit findMany
   */
  export type TrackingVisitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackingVisit
     */
    select?: TrackingVisitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackingVisit
     */
    omit?: TrackingVisitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackingVisitInclude<ExtArgs> | null
    /**
     * Filter, which TrackingVisits to fetch.
     */
    where?: TrackingVisitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrackingVisits to fetch.
     */
    orderBy?: TrackingVisitOrderByWithRelationInput | TrackingVisitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TrackingVisits.
     */
    cursor?: TrackingVisitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrackingVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrackingVisits.
     */
    skip?: number
    distinct?: TrackingVisitScalarFieldEnum | TrackingVisitScalarFieldEnum[]
  }

  /**
   * TrackingVisit create
   */
  export type TrackingVisitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackingVisit
     */
    select?: TrackingVisitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackingVisit
     */
    omit?: TrackingVisitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackingVisitInclude<ExtArgs> | null
    /**
     * The data needed to create a TrackingVisit.
     */
    data: XOR<TrackingVisitCreateInput, TrackingVisitUncheckedCreateInput>
  }

  /**
   * TrackingVisit createMany
   */
  export type TrackingVisitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TrackingVisits.
     */
    data: TrackingVisitCreateManyInput | TrackingVisitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TrackingVisit createManyAndReturn
   */
  export type TrackingVisitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackingVisit
     */
    select?: TrackingVisitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TrackingVisit
     */
    omit?: TrackingVisitOmit<ExtArgs> | null
    /**
     * The data used to create many TrackingVisits.
     */
    data: TrackingVisitCreateManyInput | TrackingVisitCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackingVisitIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TrackingVisit update
   */
  export type TrackingVisitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackingVisit
     */
    select?: TrackingVisitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackingVisit
     */
    omit?: TrackingVisitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackingVisitInclude<ExtArgs> | null
    /**
     * The data needed to update a TrackingVisit.
     */
    data: XOR<TrackingVisitUpdateInput, TrackingVisitUncheckedUpdateInput>
    /**
     * Choose, which TrackingVisit to update.
     */
    where: TrackingVisitWhereUniqueInput
  }

  /**
   * TrackingVisit updateMany
   */
  export type TrackingVisitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TrackingVisits.
     */
    data: XOR<TrackingVisitUpdateManyMutationInput, TrackingVisitUncheckedUpdateManyInput>
    /**
     * Filter which TrackingVisits to update
     */
    where?: TrackingVisitWhereInput
    /**
     * Limit how many TrackingVisits to update.
     */
    limit?: number
  }

  /**
   * TrackingVisit updateManyAndReturn
   */
  export type TrackingVisitUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackingVisit
     */
    select?: TrackingVisitSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TrackingVisit
     */
    omit?: TrackingVisitOmit<ExtArgs> | null
    /**
     * The data used to update TrackingVisits.
     */
    data: XOR<TrackingVisitUpdateManyMutationInput, TrackingVisitUncheckedUpdateManyInput>
    /**
     * Filter which TrackingVisits to update
     */
    where?: TrackingVisitWhereInput
    /**
     * Limit how many TrackingVisits to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackingVisitIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TrackingVisit upsert
   */
  export type TrackingVisitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackingVisit
     */
    select?: TrackingVisitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackingVisit
     */
    omit?: TrackingVisitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackingVisitInclude<ExtArgs> | null
    /**
     * The filter to search for the TrackingVisit to update in case it exists.
     */
    where: TrackingVisitWhereUniqueInput
    /**
     * In case the TrackingVisit found by the `where` argument doesn't exist, create a new TrackingVisit with this data.
     */
    create: XOR<TrackingVisitCreateInput, TrackingVisitUncheckedCreateInput>
    /**
     * In case the TrackingVisit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrackingVisitUpdateInput, TrackingVisitUncheckedUpdateInput>
  }

  /**
   * TrackingVisit delete
   */
  export type TrackingVisitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackingVisit
     */
    select?: TrackingVisitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackingVisit
     */
    omit?: TrackingVisitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackingVisitInclude<ExtArgs> | null
    /**
     * Filter which TrackingVisit to delete.
     */
    where: TrackingVisitWhereUniqueInput
  }

  /**
   * TrackingVisit deleteMany
   */
  export type TrackingVisitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrackingVisits to delete
     */
    where?: TrackingVisitWhereInput
    /**
     * Limit how many TrackingVisits to delete.
     */
    limit?: number
  }

  /**
   * TrackingVisit.user
   */
  export type TrackingVisit$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * TrackingVisit without action
   */
  export type TrackingVisitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackingVisit
     */
    select?: TrackingVisitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackingVisit
     */
    omit?: TrackingVisitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackingVisitInclude<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventAvgAggregateOutputType = {
    id: number | null
    organization_id: number | null
  }

  export type EventSumAggregateOutputType = {
    id: number | null
    organization_id: number | null
  }

  export type EventMinAggregateOutputType = {
    id: number | null
    organization_id: number | null
    name: string | null
    description: string | null
    date: Date | null
    location: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type EventMaxAggregateOutputType = {
    id: number | null
    organization_id: number | null
    name: string | null
    description: string | null
    date: Date | null
    location: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    organization_id: number
    name: number
    description: number
    date: number
    location: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type EventAvgAggregateInputType = {
    id?: true
    organization_id?: true
  }

  export type EventSumAggregateInputType = {
    id?: true
    organization_id?: true
  }

  export type EventMinAggregateInputType = {
    id?: true
    organization_id?: true
    name?: true
    description?: true
    date?: true
    location?: true
    created_at?: true
    updated_at?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    organization_id?: true
    name?: true
    description?: true
    date?: true
    location?: true
    created_at?: true
    updated_at?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    organization_id?: true
    name?: true
    description?: true
    date?: true
    location?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _avg?: EventAvgAggregateInputType
    _sum?: EventSumAggregateInputType
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: number
    organization_id: number
    name: string
    description: string | null
    date: Date
    location: string | null
    created_at: Date
    updated_at: Date
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organization_id?: boolean
    name?: boolean
    description?: boolean
    date?: boolean
    location?: boolean
    created_at?: boolean
    updated_at?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    tickets?: boolean | Event$ticketsArgs<ExtArgs>
    email_logs?: boolean | Event$email_logsArgs<ExtArgs>
    webhook_logs?: boolean | Event$webhook_logsArgs<ExtArgs>
    checkin_logs?: boolean | Event$checkin_logsArgs<ExtArgs>
    tracking_visits?: boolean | Event$tracking_visitsArgs<ExtArgs>
    event_settings?: boolean | Event$event_settingsArgs<ExtArgs>
    image_links?: boolean | Event$image_linksArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organization_id?: boolean
    name?: boolean
    description?: boolean
    date?: boolean
    location?: boolean
    created_at?: boolean
    updated_at?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organization_id?: boolean
    name?: boolean
    description?: boolean
    date?: boolean
    location?: boolean
    created_at?: boolean
    updated_at?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    organization_id?: boolean
    name?: boolean
    description?: boolean
    date?: boolean
    location?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type EventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organization_id" | "name" | "description" | "date" | "location" | "created_at" | "updated_at", ExtArgs["result"]["event"]>
  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    tickets?: boolean | Event$ticketsArgs<ExtArgs>
    email_logs?: boolean | Event$email_logsArgs<ExtArgs>
    webhook_logs?: boolean | Event$webhook_logsArgs<ExtArgs>
    checkin_logs?: boolean | Event$checkin_logsArgs<ExtArgs>
    tracking_visits?: boolean | Event$tracking_visitsArgs<ExtArgs>
    event_settings?: boolean | Event$event_settingsArgs<ExtArgs>
    image_links?: boolean | Event$image_linksArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type EventIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      tickets: Prisma.$TicketPayload<ExtArgs>[]
      email_logs: Prisma.$EmailLogPayload<ExtArgs>[]
      webhook_logs: Prisma.$WebhookLogPayload<ExtArgs>[]
      checkin_logs: Prisma.$CheckinLogPayload<ExtArgs>[]
      tracking_visits: Prisma.$TrackingVisitPayload<ExtArgs>[]
      event_settings: Prisma.$EventSettingPayload<ExtArgs>[]
      image_links: Prisma.$ImageLinkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      organization_id: number
      name: string
      description: string | null
      date: Date
      location: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events and returns the data updated in the database.
     * @param {EventUpdateManyAndReturnArgs} args - Arguments to update many Events.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventUpdateManyAndReturnArgs>(args: SelectSubset<T, EventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tickets<T extends Event$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, Event$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    email_logs<T extends Event$email_logsArgs<ExtArgs> = {}>(args?: Subset<T, Event$email_logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    webhook_logs<T extends Event$webhook_logsArgs<ExtArgs> = {}>(args?: Subset<T, Event$webhook_logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    checkin_logs<T extends Event$checkin_logsArgs<ExtArgs> = {}>(args?: Subset<T, Event$checkin_logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckinLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tracking_visits<T extends Event$tracking_visitsArgs<ExtArgs> = {}>(args?: Subset<T, Event$tracking_visitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackingVisitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    event_settings<T extends Event$event_settingsArgs<ExtArgs> = {}>(args?: Subset<T, Event$event_settingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    image_links<T extends Event$image_linksArgs<ExtArgs> = {}>(args?: Subset<T, Event$image_linksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImageLinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'Int'>
    readonly organization_id: FieldRef<"Event", 'Int'>
    readonly name: FieldRef<"Event", 'String'>
    readonly description: FieldRef<"Event", 'String'>
    readonly date: FieldRef<"Event", 'DateTime'>
    readonly location: FieldRef<"Event", 'String'>
    readonly created_at: FieldRef<"Event", 'DateTime'>
    readonly updated_at: FieldRef<"Event", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event createManyAndReturn
   */
  export type EventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to update.
     */
    limit?: number
  }

  /**
   * Event updateManyAndReturn
   */
  export type EventUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to delete.
     */
    limit?: number
  }

  /**
   * Event.tickets
   */
  export type Event$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    cursor?: TicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Event.email_logs
   */
  export type Event$email_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    where?: EmailLogWhereInput
    orderBy?: EmailLogOrderByWithRelationInput | EmailLogOrderByWithRelationInput[]
    cursor?: EmailLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailLogScalarFieldEnum | EmailLogScalarFieldEnum[]
  }

  /**
   * Event.webhook_logs
   */
  export type Event$webhook_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookLog
     */
    select?: WebhookLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookLog
     */
    omit?: WebhookLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookLogInclude<ExtArgs> | null
    where?: WebhookLogWhereInput
    orderBy?: WebhookLogOrderByWithRelationInput | WebhookLogOrderByWithRelationInput[]
    cursor?: WebhookLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WebhookLogScalarFieldEnum | WebhookLogScalarFieldEnum[]
  }

  /**
   * Event.checkin_logs
   */
  export type Event$checkin_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckinLog
     */
    select?: CheckinLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckinLog
     */
    omit?: CheckinLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckinLogInclude<ExtArgs> | null
    where?: CheckinLogWhereInput
    orderBy?: CheckinLogOrderByWithRelationInput | CheckinLogOrderByWithRelationInput[]
    cursor?: CheckinLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CheckinLogScalarFieldEnum | CheckinLogScalarFieldEnum[]
  }

  /**
   * Event.tracking_visits
   */
  export type Event$tracking_visitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackingVisit
     */
    select?: TrackingVisitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackingVisit
     */
    omit?: TrackingVisitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackingVisitInclude<ExtArgs> | null
    where?: TrackingVisitWhereInput
    orderBy?: TrackingVisitOrderByWithRelationInput | TrackingVisitOrderByWithRelationInput[]
    cursor?: TrackingVisitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrackingVisitScalarFieldEnum | TrackingVisitScalarFieldEnum[]
  }

  /**
   * Event.event_settings
   */
  export type Event$event_settingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSetting
     */
    select?: EventSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventSetting
     */
    omit?: EventSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSettingInclude<ExtArgs> | null
    where?: EventSettingWhereInput
    orderBy?: EventSettingOrderByWithRelationInput | EventSettingOrderByWithRelationInput[]
    cursor?: EventSettingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventSettingScalarFieldEnum | EventSettingScalarFieldEnum[]
  }

  /**
   * Event.image_links
   */
  export type Event$image_linksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageLink
     */
    select?: ImageLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImageLink
     */
    omit?: ImageLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageLinkInclude<ExtArgs> | null
    where?: ImageLinkWhereInput
    orderBy?: ImageLinkOrderByWithRelationInput | ImageLinkOrderByWithRelationInput[]
    cursor?: ImageLinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImageLinkScalarFieldEnum | ImageLinkScalarFieldEnum[]
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Model Ticket
   */

  export type AggregateTicket = {
    _count: TicketCountAggregateOutputType | null
    _avg: TicketAvgAggregateOutputType | null
    _sum: TicketSumAggregateOutputType | null
    _min: TicketMinAggregateOutputType | null
    _max: TicketMaxAggregateOutputType | null
  }

  export type TicketAvgAggregateOutputType = {
    id: number | null
    event_id: number | null
    price: Decimal | null
    total: number | null
    sold: number | null
  }

  export type TicketSumAggregateOutputType = {
    id: number | null
    event_id: number | null
    price: Decimal | null
    total: number | null
    sold: number | null
  }

  export type TicketMinAggregateOutputType = {
    id: number | null
    event_id: number | null
    name: string | null
    price: Decimal | null
    type: string | null
    total: number | null
    sold: number | null
    start_sale_date: Date | null
    end_sale_date: Date | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TicketMaxAggregateOutputType = {
    id: number | null
    event_id: number | null
    name: string | null
    price: Decimal | null
    type: string | null
    total: number | null
    sold: number | null
    start_sale_date: Date | null
    end_sale_date: Date | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TicketCountAggregateOutputType = {
    id: number
    event_id: number
    name: number
    price: number
    type: number
    total: number
    sold: number
    start_sale_date: number
    end_sale_date: number
    is_active: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type TicketAvgAggregateInputType = {
    id?: true
    event_id?: true
    price?: true
    total?: true
    sold?: true
  }

  export type TicketSumAggregateInputType = {
    id?: true
    event_id?: true
    price?: true
    total?: true
    sold?: true
  }

  export type TicketMinAggregateInputType = {
    id?: true
    event_id?: true
    name?: true
    price?: true
    type?: true
    total?: true
    sold?: true
    start_sale_date?: true
    end_sale_date?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type TicketMaxAggregateInputType = {
    id?: true
    event_id?: true
    name?: true
    price?: true
    type?: true
    total?: true
    sold?: true
    start_sale_date?: true
    end_sale_date?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type TicketCountAggregateInputType = {
    id?: true
    event_id?: true
    name?: true
    price?: true
    type?: true
    total?: true
    sold?: true
    start_sale_date?: true
    end_sale_date?: true
    is_active?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type TicketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ticket to aggregate.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tickets
    **/
    _count?: true | TicketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TicketAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TicketSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketMaxAggregateInputType
  }

  export type GetTicketAggregateType<T extends TicketAggregateArgs> = {
        [P in keyof T & keyof AggregateTicket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicket[P]>
      : GetScalarType<T[P], AggregateTicket[P]>
  }




  export type TicketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithAggregationInput | TicketOrderByWithAggregationInput[]
    by: TicketScalarFieldEnum[] | TicketScalarFieldEnum
    having?: TicketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketCountAggregateInputType | true
    _avg?: TicketAvgAggregateInputType
    _sum?: TicketSumAggregateInputType
    _min?: TicketMinAggregateInputType
    _max?: TicketMaxAggregateInputType
  }

  export type TicketGroupByOutputType = {
    id: number
    event_id: number
    name: string
    price: Decimal
    type: string
    total: number
    sold: number
    start_sale_date: Date | null
    end_sale_date: Date | null
    is_active: boolean
    created_at: Date
    updated_at: Date
    _count: TicketCountAggregateOutputType | null
    _avg: TicketAvgAggregateOutputType | null
    _sum: TicketSumAggregateOutputType | null
    _min: TicketMinAggregateOutputType | null
    _max: TicketMaxAggregateOutputType | null
  }

  type GetTicketGroupByPayload<T extends TicketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TicketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketGroupByOutputType[P]>
            : GetScalarType<T[P], TicketGroupByOutputType[P]>
        }
      >
    >


  export type TicketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    event_id?: boolean
    name?: boolean
    price?: boolean
    type?: boolean
    total?: boolean
    sold?: boolean
    start_sale_date?: boolean
    end_sale_date?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    order_items?: boolean | Ticket$order_itemsArgs<ExtArgs>
    checkin_logs?: boolean | Ticket$checkin_logsArgs<ExtArgs>
    _count?: boolean | TicketCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket"]>

  export type TicketSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    event_id?: boolean
    name?: boolean
    price?: boolean
    type?: boolean
    total?: boolean
    sold?: boolean
    start_sale_date?: boolean
    end_sale_date?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket"]>

  export type TicketSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    event_id?: boolean
    name?: boolean
    price?: boolean
    type?: boolean
    total?: boolean
    sold?: boolean
    start_sale_date?: boolean
    end_sale_date?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket"]>

  export type TicketSelectScalar = {
    id?: boolean
    event_id?: boolean
    name?: boolean
    price?: boolean
    type?: boolean
    total?: boolean
    sold?: boolean
    start_sale_date?: boolean
    end_sale_date?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type TicketOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "event_id" | "name" | "price" | "type" | "total" | "sold" | "start_sale_date" | "end_sale_date" | "is_active" | "created_at" | "updated_at", ExtArgs["result"]["ticket"]>
  export type TicketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    order_items?: boolean | Ticket$order_itemsArgs<ExtArgs>
    checkin_logs?: boolean | Ticket$checkin_logsArgs<ExtArgs>
    _count?: boolean | TicketCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TicketIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type TicketIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
  }

  export type $TicketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ticket"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
      order_items: Prisma.$OrderItemPayload<ExtArgs>[]
      checkin_logs: Prisma.$CheckinLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      event_id: number
      name: string
      price: Prisma.Decimal
      type: string
      total: number
      sold: number
      start_sale_date: Date | null
      end_sale_date: Date | null
      is_active: boolean
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["ticket"]>
    composites: {}
  }

  type TicketGetPayload<S extends boolean | null | undefined | TicketDefaultArgs> = $Result.GetResult<Prisma.$TicketPayload, S>

  type TicketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TicketFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TicketCountAggregateInputType | true
    }

  export interface TicketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ticket'], meta: { name: 'Ticket' } }
    /**
     * Find zero or one Ticket that matches the filter.
     * @param {TicketFindUniqueArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TicketFindUniqueArgs>(args: SelectSubset<T, TicketFindUniqueArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ticket that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TicketFindUniqueOrThrowArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TicketFindUniqueOrThrowArgs>(args: SelectSubset<T, TicketFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ticket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketFindFirstArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TicketFindFirstArgs>(args?: SelectSubset<T, TicketFindFirstArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ticket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketFindFirstOrThrowArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TicketFindFirstOrThrowArgs>(args?: SelectSubset<T, TicketFindFirstOrThrowArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tickets
     * const tickets = await prisma.ticket.findMany()
     * 
     * // Get first 10 Tickets
     * const tickets = await prisma.ticket.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticketWithIdOnly = await prisma.ticket.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TicketFindManyArgs>(args?: SelectSubset<T, TicketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ticket.
     * @param {TicketCreateArgs} args - Arguments to create a Ticket.
     * @example
     * // Create one Ticket
     * const Ticket = await prisma.ticket.create({
     *   data: {
     *     // ... data to create a Ticket
     *   }
     * })
     * 
     */
    create<T extends TicketCreateArgs>(args: SelectSubset<T, TicketCreateArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tickets.
     * @param {TicketCreateManyArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const ticket = await prisma.ticket.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TicketCreateManyArgs>(args?: SelectSubset<T, TicketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tickets and returns the data saved in the database.
     * @param {TicketCreateManyAndReturnArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const ticket = await prisma.ticket.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tickets and only return the `id`
     * const ticketWithIdOnly = await prisma.ticket.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TicketCreateManyAndReturnArgs>(args?: SelectSubset<T, TicketCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Ticket.
     * @param {TicketDeleteArgs} args - Arguments to delete one Ticket.
     * @example
     * // Delete one Ticket
     * const Ticket = await prisma.ticket.delete({
     *   where: {
     *     // ... filter to delete one Ticket
     *   }
     * })
     * 
     */
    delete<T extends TicketDeleteArgs>(args: SelectSubset<T, TicketDeleteArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ticket.
     * @param {TicketUpdateArgs} args - Arguments to update one Ticket.
     * @example
     * // Update one Ticket
     * const ticket = await prisma.ticket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TicketUpdateArgs>(args: SelectSubset<T, TicketUpdateArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tickets.
     * @param {TicketDeleteManyArgs} args - Arguments to filter Tickets to delete.
     * @example
     * // Delete a few Tickets
     * const { count } = await prisma.ticket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TicketDeleteManyArgs>(args?: SelectSubset<T, TicketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tickets
     * const ticket = await prisma.ticket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TicketUpdateManyArgs>(args: SelectSubset<T, TicketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickets and returns the data updated in the database.
     * @param {TicketUpdateManyAndReturnArgs} args - Arguments to update many Tickets.
     * @example
     * // Update many Tickets
     * const ticket = await prisma.ticket.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tickets and only return the `id`
     * const ticketWithIdOnly = await prisma.ticket.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TicketUpdateManyAndReturnArgs>(args: SelectSubset<T, TicketUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Ticket.
     * @param {TicketUpsertArgs} args - Arguments to update or create a Ticket.
     * @example
     * // Update or create a Ticket
     * const ticket = await prisma.ticket.upsert({
     *   create: {
     *     // ... data to create a Ticket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ticket we want to update
     *   }
     * })
     */
    upsert<T extends TicketUpsertArgs>(args: SelectSubset<T, TicketUpsertArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketCountArgs} args - Arguments to filter Tickets to count.
     * @example
     * // Count the number of Tickets
     * const count = await prisma.ticket.count({
     *   where: {
     *     // ... the filter for the Tickets we want to count
     *   }
     * })
    **/
    count<T extends TicketCountArgs>(
      args?: Subset<T, TicketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketAggregateArgs>(args: Subset<T, TicketAggregateArgs>): Prisma.PrismaPromise<GetTicketAggregateType<T>>

    /**
     * Group by Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TicketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TicketGroupByArgs['orderBy'] }
        : { orderBy?: TicketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TicketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ticket model
   */
  readonly fields: TicketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ticket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TicketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    order_items<T extends Ticket$order_itemsArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$order_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    checkin_logs<T extends Ticket$checkin_logsArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$checkin_logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckinLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ticket model
   */
  interface TicketFieldRefs {
    readonly id: FieldRef<"Ticket", 'Int'>
    readonly event_id: FieldRef<"Ticket", 'Int'>
    readonly name: FieldRef<"Ticket", 'String'>
    readonly price: FieldRef<"Ticket", 'Decimal'>
    readonly type: FieldRef<"Ticket", 'String'>
    readonly total: FieldRef<"Ticket", 'Int'>
    readonly sold: FieldRef<"Ticket", 'Int'>
    readonly start_sale_date: FieldRef<"Ticket", 'DateTime'>
    readonly end_sale_date: FieldRef<"Ticket", 'DateTime'>
    readonly is_active: FieldRef<"Ticket", 'Boolean'>
    readonly created_at: FieldRef<"Ticket", 'DateTime'>
    readonly updated_at: FieldRef<"Ticket", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Ticket findUnique
   */
  export type TicketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket findUniqueOrThrow
   */
  export type TicketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket findFirst
   */
  export type TicketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickets.
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickets.
     */
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Ticket findFirstOrThrow
   */
  export type TicketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickets.
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickets.
     */
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Ticket findMany
   */
  export type TicketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Tickets to fetch.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tickets.
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Ticket create
   */
  export type TicketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * The data needed to create a Ticket.
     */
    data: XOR<TicketCreateInput, TicketUncheckedCreateInput>
  }

  /**
   * Ticket createMany
   */
  export type TicketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tickets.
     */
    data: TicketCreateManyInput | TicketCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ticket createManyAndReturn
   */
  export type TicketCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * The data used to create many Tickets.
     */
    data: TicketCreateManyInput | TicketCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ticket update
   */
  export type TicketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * The data needed to update a Ticket.
     */
    data: XOR<TicketUpdateInput, TicketUncheckedUpdateInput>
    /**
     * Choose, which Ticket to update.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket updateMany
   */
  export type TicketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tickets.
     */
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyInput>
    /**
     * Filter which Tickets to update
     */
    where?: TicketWhereInput
    /**
     * Limit how many Tickets to update.
     */
    limit?: number
  }

  /**
   * Ticket updateManyAndReturn
   */
  export type TicketUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * The data used to update Tickets.
     */
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyInput>
    /**
     * Filter which Tickets to update
     */
    where?: TicketWhereInput
    /**
     * Limit how many Tickets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ticket upsert
   */
  export type TicketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * The filter to search for the Ticket to update in case it exists.
     */
    where: TicketWhereUniqueInput
    /**
     * In case the Ticket found by the `where` argument doesn't exist, create a new Ticket with this data.
     */
    create: XOR<TicketCreateInput, TicketUncheckedCreateInput>
    /**
     * In case the Ticket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TicketUpdateInput, TicketUncheckedUpdateInput>
  }

  /**
   * Ticket delete
   */
  export type TicketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter which Ticket to delete.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket deleteMany
   */
  export type TicketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tickets to delete
     */
    where?: TicketWhereInput
    /**
     * Limit how many Tickets to delete.
     */
    limit?: number
  }

  /**
   * Ticket.order_items
   */
  export type Ticket$order_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Ticket.checkin_logs
   */
  export type Ticket$checkin_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckinLog
     */
    select?: CheckinLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckinLog
     */
    omit?: CheckinLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckinLogInclude<ExtArgs> | null
    where?: CheckinLogWhereInput
    orderBy?: CheckinLogOrderByWithRelationInput | CheckinLogOrderByWithRelationInput[]
    cursor?: CheckinLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CheckinLogScalarFieldEnum | CheckinLogScalarFieldEnum[]
  }

  /**
   * Ticket without action
   */
  export type TicketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    id: number | null
    amount: Decimal | null
  }

  export type OrderSumAggregateOutputType = {
    id: number | null
    amount: Decimal | null
  }

  export type OrderMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    status: string | null
    payment_method: string | null
    amount: Decimal | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type OrderMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    status: string | null
    payment_method: string | null
    amount: Decimal | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    user_id: number
    status: number
    payment_method: number
    amount: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    id?: true
    amount?: true
  }

  export type OrderSumAggregateInputType = {
    id?: true
    amount?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    user_id?: true
    status?: true
    payment_method?: true
    amount?: true
    created_at?: true
    updated_at?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    user_id?: true
    status?: true
    payment_method?: true
    amount?: true
    created_at?: true
    updated_at?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    user_id?: true
    status?: true
    payment_method?: true
    amount?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: number
    user_id: string | null
    status: string
    payment_method: string
    amount: Decimal
    created_at: Date
    updated_at: Date
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    status?: boolean
    payment_method?: boolean
    amount?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | Order$userArgs<ExtArgs>
    order_items?: boolean | Order$order_itemsArgs<ExtArgs>
    order_promos?: boolean | Order$order_promosArgs<ExtArgs>
    payments?: boolean | Order$paymentsArgs<ExtArgs>
    webhook_logs?: boolean | Order$webhook_logsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    status?: boolean
    payment_method?: boolean
    amount?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | Order$userArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    status?: boolean
    payment_method?: boolean
    amount?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | Order$userArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    id?: boolean
    user_id?: boolean
    status?: boolean
    payment_method?: boolean
    amount?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type OrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "status" | "payment_method" | "amount" | "created_at" | "updated_at", ExtArgs["result"]["order"]>
  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Order$userArgs<ExtArgs>
    order_items?: boolean | Order$order_itemsArgs<ExtArgs>
    order_promos?: boolean | Order$order_promosArgs<ExtArgs>
    payments?: boolean | Order$paymentsArgs<ExtArgs>
    webhook_logs?: boolean | Order$webhook_logsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Order$userArgs<ExtArgs>
  }
  export type OrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Order$userArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      order_items: Prisma.$OrderItemPayload<ExtArgs>[]
      order_promos: Prisma.$OrderPromoPayload<ExtArgs>[]
      payments: Prisma.$PaymentPayload<ExtArgs>[]
      webhook_logs: Prisma.$WebhookLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: string | null
      status: string
      payment_method: string
      amount: Prisma.Decimal
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {OrderCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders and returns the data updated in the database.
     * @param {OrderUpdateManyAndReturnArgs} args - Arguments to update many Orders.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Order$userArgs<ExtArgs> = {}>(args?: Subset<T, Order$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    order_items<T extends Order$order_itemsArgs<ExtArgs> = {}>(args?: Subset<T, Order$order_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    order_promos<T extends Order$order_promosArgs<ExtArgs> = {}>(args?: Subset<T, Order$order_promosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPromoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payments<T extends Order$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, Order$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    webhook_logs<T extends Order$webhook_logsArgs<ExtArgs> = {}>(args?: Subset<T, Order$webhook_logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'Int'>
    readonly user_id: FieldRef<"Order", 'String'>
    readonly status: FieldRef<"Order", 'String'>
    readonly payment_method: FieldRef<"Order", 'String'>
    readonly amount: FieldRef<"Order", 'Decimal'>
    readonly created_at: FieldRef<"Order", 'DateTime'>
    readonly updated_at: FieldRef<"Order", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order createManyAndReturn
   */
  export type OrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
  }

  /**
   * Order updateManyAndReturn
   */
  export type OrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to delete.
     */
    limit?: number
  }

  /**
   * Order.user
   */
  export type Order$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Order.order_items
   */
  export type Order$order_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Order.order_promos
   */
  export type Order$order_promosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPromo
     */
    select?: OrderPromoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderPromo
     */
    omit?: OrderPromoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPromoInclude<ExtArgs> | null
    where?: OrderPromoWhereInput
    orderBy?: OrderPromoOrderByWithRelationInput | OrderPromoOrderByWithRelationInput[]
    cursor?: OrderPromoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderPromoScalarFieldEnum | OrderPromoScalarFieldEnum[]
  }

  /**
   * Order.payments
   */
  export type Order$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Order.webhook_logs
   */
  export type Order$webhook_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookLog
     */
    select?: WebhookLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebhookLog
     */
    omit?: WebhookLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookLogInclude<ExtArgs> | null
    where?: WebhookLogWhereInput
    orderBy?: WebhookLogOrderByWithRelationInput | WebhookLogOrderByWithRelationInput[]
    cursor?: WebhookLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WebhookLogScalarFieldEnum | WebhookLogScalarFieldEnum[]
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model OrderItem
   */

  export type AggregateOrderItem = {
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  export type OrderItemAvgAggregateOutputType = {
    id: number | null
    order_id: number | null
    ticket_id: number | null
    quantity: number | null
    price_snapshot: Decimal | null
  }

  export type OrderItemSumAggregateOutputType = {
    id: number | null
    order_id: number | null
    ticket_id: number | null
    quantity: number | null
    price_snapshot: Decimal | null
  }

  export type OrderItemMinAggregateOutputType = {
    id: number | null
    order_id: number | null
    ticket_id: number | null
    quantity: number | null
    price_snapshot: Decimal | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type OrderItemMaxAggregateOutputType = {
    id: number | null
    order_id: number | null
    ticket_id: number | null
    quantity: number | null
    price_snapshot: Decimal | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type OrderItemCountAggregateOutputType = {
    id: number
    order_id: number
    ticket_id: number
    quantity: number
    price_snapshot: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type OrderItemAvgAggregateInputType = {
    id?: true
    order_id?: true
    ticket_id?: true
    quantity?: true
    price_snapshot?: true
  }

  export type OrderItemSumAggregateInputType = {
    id?: true
    order_id?: true
    ticket_id?: true
    quantity?: true
    price_snapshot?: true
  }

  export type OrderItemMinAggregateInputType = {
    id?: true
    order_id?: true
    ticket_id?: true
    quantity?: true
    price_snapshot?: true
    created_at?: true
    updated_at?: true
  }

  export type OrderItemMaxAggregateInputType = {
    id?: true
    order_id?: true
    ticket_id?: true
    quantity?: true
    price_snapshot?: true
    created_at?: true
    updated_at?: true
  }

  export type OrderItemCountAggregateInputType = {
    id?: true
    order_id?: true
    ticket_id?: true
    quantity?: true
    price_snapshot?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type OrderItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItem to aggregate.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderItems
    **/
    _count?: true | OrderItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderItemMaxAggregateInputType
  }

  export type GetOrderItemAggregateType<T extends OrderItemAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderItem[P]>
      : GetScalarType<T[P], AggregateOrderItem[P]>
  }




  export type OrderItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithAggregationInput | OrderItemOrderByWithAggregationInput[]
    by: OrderItemScalarFieldEnum[] | OrderItemScalarFieldEnum
    having?: OrderItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderItemCountAggregateInputType | true
    _avg?: OrderItemAvgAggregateInputType
    _sum?: OrderItemSumAggregateInputType
    _min?: OrderItemMinAggregateInputType
    _max?: OrderItemMaxAggregateInputType
  }

  export type OrderItemGroupByOutputType = {
    id: number
    order_id: number
    ticket_id: number
    quantity: number
    price_snapshot: Decimal
    created_at: Date
    updated_at: Date
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  type GetOrderItemGroupByPayload<T extends OrderItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
            : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
        }
      >
    >


  export type OrderItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order_id?: boolean
    ticket_id?: boolean
    quantity?: boolean
    price_snapshot?: boolean
    created_at?: boolean
    updated_at?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order_id?: boolean
    ticket_id?: boolean
    quantity?: boolean
    price_snapshot?: boolean
    created_at?: boolean
    updated_at?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order_id?: boolean
    ticket_id?: boolean
    quantity?: boolean
    price_snapshot?: boolean
    created_at?: boolean
    updated_at?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectScalar = {
    id?: boolean
    order_id?: boolean
    ticket_id?: boolean
    quantity?: boolean
    price_snapshot?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type OrderItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "order_id" | "ticket_id" | "quantity" | "price_snapshot" | "created_at" | "updated_at", ExtArgs["result"]["orderItem"]>
  export type OrderItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
  }
  export type OrderItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
  }
  export type OrderItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
  }

  export type $OrderItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderItem"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      ticket: Prisma.$TicketPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      order_id: number
      ticket_id: number
      quantity: number
      price_snapshot: Prisma.Decimal
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["orderItem"]>
    composites: {}
  }

  type OrderItemGetPayload<S extends boolean | null | undefined | OrderItemDefaultArgs> = $Result.GetResult<Prisma.$OrderItemPayload, S>

  type OrderItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderItemCountAggregateInputType | true
    }

  export interface OrderItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderItem'], meta: { name: 'OrderItem' } }
    /**
     * Find zero or one OrderItem that matches the filter.
     * @param {OrderItemFindUniqueArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderItemFindUniqueArgs>(args: SelectSubset<T, OrderItemFindUniqueArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrderItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderItemFindUniqueOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderItemFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderItemFindFirstArgs>(args?: SelectSubset<T, OrderItemFindFirstArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderItemFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderItems
     * const orderItems = await prisma.orderItem.findMany()
     * 
     * // Get first 10 OrderItems
     * const orderItems = await prisma.orderItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderItemFindManyArgs>(args?: SelectSubset<T, OrderItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrderItem.
     * @param {OrderItemCreateArgs} args - Arguments to create a OrderItem.
     * @example
     * // Create one OrderItem
     * const OrderItem = await prisma.orderItem.create({
     *   data: {
     *     // ... data to create a OrderItem
     *   }
     * })
     * 
     */
    create<T extends OrderItemCreateArgs>(args: SelectSubset<T, OrderItemCreateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrderItems.
     * @param {OrderItemCreateManyArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItem = await prisma.orderItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderItemCreateManyArgs>(args?: SelectSubset<T, OrderItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderItems and returns the data saved in the database.
     * @param {OrderItemCreateManyAndReturnArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItem = await prisma.orderItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderItems and only return the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderItemCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OrderItem.
     * @param {OrderItemDeleteArgs} args - Arguments to delete one OrderItem.
     * @example
     * // Delete one OrderItem
     * const OrderItem = await prisma.orderItem.delete({
     *   where: {
     *     // ... filter to delete one OrderItem
     *   }
     * })
     * 
     */
    delete<T extends OrderItemDeleteArgs>(args: SelectSubset<T, OrderItemDeleteArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrderItem.
     * @param {OrderItemUpdateArgs} args - Arguments to update one OrderItem.
     * @example
     * // Update one OrderItem
     * const orderItem = await prisma.orderItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderItemUpdateArgs>(args: SelectSubset<T, OrderItemUpdateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrderItems.
     * @param {OrderItemDeleteManyArgs} args - Arguments to filter OrderItems to delete.
     * @example
     * // Delete a few OrderItems
     * const { count } = await prisma.orderItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderItemDeleteManyArgs>(args?: SelectSubset<T, OrderItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderItems
     * const orderItem = await prisma.orderItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderItemUpdateManyArgs>(args: SelectSubset<T, OrderItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems and returns the data updated in the database.
     * @param {OrderItemUpdateManyAndReturnArgs} args - Arguments to update many OrderItems.
     * @example
     * // Update many OrderItems
     * const orderItem = await prisma.orderItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrderItems and only return the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderItemUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OrderItem.
     * @param {OrderItemUpsertArgs} args - Arguments to update or create a OrderItem.
     * @example
     * // Update or create a OrderItem
     * const orderItem = await prisma.orderItem.upsert({
     *   create: {
     *     // ... data to create a OrderItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderItem we want to update
     *   }
     * })
     */
    upsert<T extends OrderItemUpsertArgs>(args: SelectSubset<T, OrderItemUpsertArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemCountArgs} args - Arguments to filter OrderItems to count.
     * @example
     * // Count the number of OrderItems
     * const count = await prisma.orderItem.count({
     *   where: {
     *     // ... the filter for the OrderItems we want to count
     *   }
     * })
    **/
    count<T extends OrderItemCountArgs>(
      args?: Subset<T, OrderItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderItemAggregateArgs>(args: Subset<T, OrderItemAggregateArgs>): Prisma.PrismaPromise<GetOrderItemAggregateType<T>>

    /**
     * Group by OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderItemGroupByArgs['orderBy'] }
        : { orderBy?: OrderItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderItem model
   */
  readonly fields: OrderItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ticket<T extends TicketDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TicketDefaultArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderItem model
   */
  interface OrderItemFieldRefs {
    readonly id: FieldRef<"OrderItem", 'Int'>
    readonly order_id: FieldRef<"OrderItem", 'Int'>
    readonly ticket_id: FieldRef<"OrderItem", 'Int'>
    readonly quantity: FieldRef<"OrderItem", 'Int'>
    readonly price_snapshot: FieldRef<"OrderItem", 'Decimal'>
    readonly created_at: FieldRef<"OrderItem", 'DateTime'>
    readonly updated_at: FieldRef<"OrderItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OrderItem findUnique
   */
  export type OrderItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findUniqueOrThrow
   */
  export type OrderItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findFirst
   */
  export type OrderItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findFirstOrThrow
   */
  export type OrderItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findMany
   */
  export type OrderItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItems to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem create
   */
  export type OrderItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderItem.
     */
    data: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
  }

  /**
   * OrderItem createMany
   */
  export type OrderItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderItems.
     */
    data: OrderItemCreateManyInput | OrderItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderItem createManyAndReturn
   */
  export type OrderItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * The data used to create many OrderItems.
     */
    data: OrderItemCreateManyInput | OrderItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderItem update
   */
  export type OrderItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderItem.
     */
    data: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
    /**
     * Choose, which OrderItem to update.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem updateMany
   */
  export type OrderItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderItems.
     */
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyInput>
    /**
     * Filter which OrderItems to update
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to update.
     */
    limit?: number
  }

  /**
   * OrderItem updateManyAndReturn
   */
  export type OrderItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * The data used to update OrderItems.
     */
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyInput>
    /**
     * Filter which OrderItems to update
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderItem upsert
   */
  export type OrderItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderItem to update in case it exists.
     */
    where: OrderItemWhereUniqueInput
    /**
     * In case the OrderItem found by the `where` argument doesn't exist, create a new OrderItem with this data.
     */
    create: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
    /**
     * In case the OrderItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
  }

  /**
   * OrderItem delete
   */
  export type OrderItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter which OrderItem to delete.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem deleteMany
   */
  export type OrderItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItems to delete
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to delete.
     */
    limit?: number
  }

  /**
   * OrderItem without action
   */
  export type OrderItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    id: number | null
    order_id: number | null
  }

  export type PaymentSumAggregateOutputType = {
    id: number | null
    order_id: number | null
  }

  export type PaymentMinAggregateOutputType = {
    id: number | null
    order_id: number | null
    gateway: string | null
    status: string | null
    txn_code: string | null
    paid_at: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: number | null
    order_id: number | null
    gateway: string | null
    status: string | null
    txn_code: string | null
    paid_at: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    order_id: number
    gateway: number
    status: number
    txn_code: number
    paid_at: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    id?: true
    order_id?: true
  }

  export type PaymentSumAggregateInputType = {
    id?: true
    order_id?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    order_id?: true
    gateway?: true
    status?: true
    txn_code?: true
    paid_at?: true
    created_at?: true
    updated_at?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    order_id?: true
    gateway?: true
    status?: true
    txn_code?: true
    paid_at?: true
    created_at?: true
    updated_at?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    order_id?: true
    gateway?: true
    status?: true
    txn_code?: true
    paid_at?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: number
    order_id: number
    gateway: string
    status: string
    txn_code: string | null
    paid_at: Date | null
    created_at: Date
    updated_at: Date
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order_id?: boolean
    gateway?: boolean
    status?: boolean
    txn_code?: boolean
    paid_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order_id?: boolean
    gateway?: boolean
    status?: boolean
    txn_code?: boolean
    paid_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order_id?: boolean
    gateway?: boolean
    status?: boolean
    txn_code?: boolean
    paid_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    order_id?: boolean
    gateway?: boolean
    status?: boolean
    txn_code?: boolean
    paid_at?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type PaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "order_id" | "gateway" | "status" | "txn_code" | "paid_at" | "created_at" | "updated_at", ExtArgs["result"]["payment"]>
  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      order_id: number
      gateway: string
      status: string
      txn_code: string | null
      paid_at: Date | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments and returns the data updated in the database.
     * @param {PaymentUpdateManyAndReturnArgs} args - Arguments to update many Payments.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'Int'>
    readonly order_id: FieldRef<"Payment", 'Int'>
    readonly gateway: FieldRef<"Payment", 'String'>
    readonly status: FieldRef<"Payment", 'String'>
    readonly txn_code: FieldRef<"Payment", 'String'>
    readonly paid_at: FieldRef<"Payment", 'DateTime'>
    readonly created_at: FieldRef<"Payment", 'DateTime'>
    readonly updated_at: FieldRef<"Payment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment createManyAndReturn
   */
  export type PaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
  }

  /**
   * Payment updateManyAndReturn
   */
  export type PaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to delete.
     */
    limit?: number
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model CheckinLog
   */

  export type AggregateCheckinLog = {
    _count: CheckinLogCountAggregateOutputType | null
    _avg: CheckinLogAvgAggregateOutputType | null
    _sum: CheckinLogSumAggregateOutputType | null
    _min: CheckinLogMinAggregateOutputType | null
    _max: CheckinLogMaxAggregateOutputType | null
  }

  export type CheckinLogAvgAggregateOutputType = {
    id: number | null
    ticket_id: number | null
    event_id: number | null
  }

  export type CheckinLogSumAggregateOutputType = {
    id: number | null
    ticket_id: number | null
    event_id: number | null
  }

  export type CheckinLogMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    ticket_id: number | null
    event_id: number | null
    checkin_time: Date | null
    verified_by: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CheckinLogMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    ticket_id: number | null
    event_id: number | null
    checkin_time: Date | null
    verified_by: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CheckinLogCountAggregateOutputType = {
    id: number
    user_id: number
    ticket_id: number
    event_id: number
    checkin_time: number
    verified_by: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type CheckinLogAvgAggregateInputType = {
    id?: true
    ticket_id?: true
    event_id?: true
  }

  export type CheckinLogSumAggregateInputType = {
    id?: true
    ticket_id?: true
    event_id?: true
  }

  export type CheckinLogMinAggregateInputType = {
    id?: true
    user_id?: true
    ticket_id?: true
    event_id?: true
    checkin_time?: true
    verified_by?: true
    created_at?: true
    updated_at?: true
  }

  export type CheckinLogMaxAggregateInputType = {
    id?: true
    user_id?: true
    ticket_id?: true
    event_id?: true
    checkin_time?: true
    verified_by?: true
    created_at?: true
    updated_at?: true
  }

  export type CheckinLogCountAggregateInputType = {
    id?: true
    user_id?: true
    ticket_id?: true
    event_id?: true
    checkin_time?: true
    verified_by?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type CheckinLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CheckinLog to aggregate.
     */
    where?: CheckinLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckinLogs to fetch.
     */
    orderBy?: CheckinLogOrderByWithRelationInput | CheckinLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CheckinLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckinLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckinLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CheckinLogs
    **/
    _count?: true | CheckinLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CheckinLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CheckinLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CheckinLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CheckinLogMaxAggregateInputType
  }

  export type GetCheckinLogAggregateType<T extends CheckinLogAggregateArgs> = {
        [P in keyof T & keyof AggregateCheckinLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCheckinLog[P]>
      : GetScalarType<T[P], AggregateCheckinLog[P]>
  }




  export type CheckinLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CheckinLogWhereInput
    orderBy?: CheckinLogOrderByWithAggregationInput | CheckinLogOrderByWithAggregationInput[]
    by: CheckinLogScalarFieldEnum[] | CheckinLogScalarFieldEnum
    having?: CheckinLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CheckinLogCountAggregateInputType | true
    _avg?: CheckinLogAvgAggregateInputType
    _sum?: CheckinLogSumAggregateInputType
    _min?: CheckinLogMinAggregateInputType
    _max?: CheckinLogMaxAggregateInputType
  }

  export type CheckinLogGroupByOutputType = {
    id: number
    user_id: string
    ticket_id: number
    event_id: number
    checkin_time: Date
    verified_by: string | null
    created_at: Date
    updated_at: Date
    _count: CheckinLogCountAggregateOutputType | null
    _avg: CheckinLogAvgAggregateOutputType | null
    _sum: CheckinLogSumAggregateOutputType | null
    _min: CheckinLogMinAggregateOutputType | null
    _max: CheckinLogMaxAggregateOutputType | null
  }

  type GetCheckinLogGroupByPayload<T extends CheckinLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CheckinLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CheckinLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CheckinLogGroupByOutputType[P]>
            : GetScalarType<T[P], CheckinLogGroupByOutputType[P]>
        }
      >
    >


  export type CheckinLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    ticket_id?: boolean
    event_id?: boolean
    checkin_time?: boolean
    verified_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checkinLog"]>

  export type CheckinLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    ticket_id?: boolean
    event_id?: boolean
    checkin_time?: boolean
    verified_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checkinLog"]>

  export type CheckinLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    ticket_id?: boolean
    event_id?: boolean
    checkin_time?: boolean
    verified_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checkinLog"]>

  export type CheckinLogSelectScalar = {
    id?: boolean
    user_id?: boolean
    ticket_id?: boolean
    event_id?: boolean
    checkin_time?: boolean
    verified_by?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type CheckinLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "ticket_id" | "event_id" | "checkin_time" | "verified_by" | "created_at" | "updated_at", ExtArgs["result"]["checkinLog"]>
  export type CheckinLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type CheckinLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type CheckinLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    ticket?: boolean | TicketDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }

  export type $CheckinLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CheckinLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      ticket: Prisma.$TicketPayload<ExtArgs>
      event: Prisma.$EventPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: string
      ticket_id: number
      event_id: number
      checkin_time: Date
      verified_by: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["checkinLog"]>
    composites: {}
  }

  type CheckinLogGetPayload<S extends boolean | null | undefined | CheckinLogDefaultArgs> = $Result.GetResult<Prisma.$CheckinLogPayload, S>

  type CheckinLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CheckinLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CheckinLogCountAggregateInputType | true
    }

  export interface CheckinLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CheckinLog'], meta: { name: 'CheckinLog' } }
    /**
     * Find zero or one CheckinLog that matches the filter.
     * @param {CheckinLogFindUniqueArgs} args - Arguments to find a CheckinLog
     * @example
     * // Get one CheckinLog
     * const checkinLog = await prisma.checkinLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CheckinLogFindUniqueArgs>(args: SelectSubset<T, CheckinLogFindUniqueArgs<ExtArgs>>): Prisma__CheckinLogClient<$Result.GetResult<Prisma.$CheckinLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CheckinLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CheckinLogFindUniqueOrThrowArgs} args - Arguments to find a CheckinLog
     * @example
     * // Get one CheckinLog
     * const checkinLog = await prisma.checkinLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CheckinLogFindUniqueOrThrowArgs>(args: SelectSubset<T, CheckinLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CheckinLogClient<$Result.GetResult<Prisma.$CheckinLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CheckinLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckinLogFindFirstArgs} args - Arguments to find a CheckinLog
     * @example
     * // Get one CheckinLog
     * const checkinLog = await prisma.checkinLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CheckinLogFindFirstArgs>(args?: SelectSubset<T, CheckinLogFindFirstArgs<ExtArgs>>): Prisma__CheckinLogClient<$Result.GetResult<Prisma.$CheckinLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CheckinLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckinLogFindFirstOrThrowArgs} args - Arguments to find a CheckinLog
     * @example
     * // Get one CheckinLog
     * const checkinLog = await prisma.checkinLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CheckinLogFindFirstOrThrowArgs>(args?: SelectSubset<T, CheckinLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__CheckinLogClient<$Result.GetResult<Prisma.$CheckinLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CheckinLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckinLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CheckinLogs
     * const checkinLogs = await prisma.checkinLog.findMany()
     * 
     * // Get first 10 CheckinLogs
     * const checkinLogs = await prisma.checkinLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const checkinLogWithIdOnly = await prisma.checkinLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CheckinLogFindManyArgs>(args?: SelectSubset<T, CheckinLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckinLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CheckinLog.
     * @param {CheckinLogCreateArgs} args - Arguments to create a CheckinLog.
     * @example
     * // Create one CheckinLog
     * const CheckinLog = await prisma.checkinLog.create({
     *   data: {
     *     // ... data to create a CheckinLog
     *   }
     * })
     * 
     */
    create<T extends CheckinLogCreateArgs>(args: SelectSubset<T, CheckinLogCreateArgs<ExtArgs>>): Prisma__CheckinLogClient<$Result.GetResult<Prisma.$CheckinLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CheckinLogs.
     * @param {CheckinLogCreateManyArgs} args - Arguments to create many CheckinLogs.
     * @example
     * // Create many CheckinLogs
     * const checkinLog = await prisma.checkinLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CheckinLogCreateManyArgs>(args?: SelectSubset<T, CheckinLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CheckinLogs and returns the data saved in the database.
     * @param {CheckinLogCreateManyAndReturnArgs} args - Arguments to create many CheckinLogs.
     * @example
     * // Create many CheckinLogs
     * const checkinLog = await prisma.checkinLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CheckinLogs and only return the `id`
     * const checkinLogWithIdOnly = await prisma.checkinLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CheckinLogCreateManyAndReturnArgs>(args?: SelectSubset<T, CheckinLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckinLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CheckinLog.
     * @param {CheckinLogDeleteArgs} args - Arguments to delete one CheckinLog.
     * @example
     * // Delete one CheckinLog
     * const CheckinLog = await prisma.checkinLog.delete({
     *   where: {
     *     // ... filter to delete one CheckinLog
     *   }
     * })
     * 
     */
    delete<T extends CheckinLogDeleteArgs>(args: SelectSubset<T, CheckinLogDeleteArgs<ExtArgs>>): Prisma__CheckinLogClient<$Result.GetResult<Prisma.$CheckinLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CheckinLog.
     * @param {CheckinLogUpdateArgs} args - Arguments to update one CheckinLog.
     * @example
     * // Update one CheckinLog
     * const checkinLog = await prisma.checkinLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CheckinLogUpdateArgs>(args: SelectSubset<T, CheckinLogUpdateArgs<ExtArgs>>): Prisma__CheckinLogClient<$Result.GetResult<Prisma.$CheckinLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CheckinLogs.
     * @param {CheckinLogDeleteManyArgs} args - Arguments to filter CheckinLogs to delete.
     * @example
     * // Delete a few CheckinLogs
     * const { count } = await prisma.checkinLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CheckinLogDeleteManyArgs>(args?: SelectSubset<T, CheckinLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CheckinLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckinLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CheckinLogs
     * const checkinLog = await prisma.checkinLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CheckinLogUpdateManyArgs>(args: SelectSubset<T, CheckinLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CheckinLogs and returns the data updated in the database.
     * @param {CheckinLogUpdateManyAndReturnArgs} args - Arguments to update many CheckinLogs.
     * @example
     * // Update many CheckinLogs
     * const checkinLog = await prisma.checkinLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CheckinLogs and only return the `id`
     * const checkinLogWithIdOnly = await prisma.checkinLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CheckinLogUpdateManyAndReturnArgs>(args: SelectSubset<T, CheckinLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckinLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CheckinLog.
     * @param {CheckinLogUpsertArgs} args - Arguments to update or create a CheckinLog.
     * @example
     * // Update or create a CheckinLog
     * const checkinLog = await prisma.checkinLog.upsert({
     *   create: {
     *     // ... data to create a CheckinLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CheckinLog we want to update
     *   }
     * })
     */
    upsert<T extends CheckinLogUpsertArgs>(args: SelectSubset<T, CheckinLogUpsertArgs<ExtArgs>>): Prisma__CheckinLogClient<$Result.GetResult<Prisma.$CheckinLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CheckinLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckinLogCountArgs} args - Arguments to filter CheckinLogs to count.
     * @example
     * // Count the number of CheckinLogs
     * const count = await prisma.checkinLog.count({
     *   where: {
     *     // ... the filter for the CheckinLogs we want to count
     *   }
     * })
    **/
    count<T extends CheckinLogCountArgs>(
      args?: Subset<T, CheckinLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CheckinLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CheckinLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckinLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CheckinLogAggregateArgs>(args: Subset<T, CheckinLogAggregateArgs>): Prisma.PrismaPromise<GetCheckinLogAggregateType<T>>

    /**
     * Group by CheckinLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckinLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CheckinLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CheckinLogGroupByArgs['orderBy'] }
        : { orderBy?: CheckinLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CheckinLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCheckinLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CheckinLog model
   */
  readonly fields: CheckinLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CheckinLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CheckinLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ticket<T extends TicketDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TicketDefaultArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CheckinLog model
   */
  interface CheckinLogFieldRefs {
    readonly id: FieldRef<"CheckinLog", 'Int'>
    readonly user_id: FieldRef<"CheckinLog", 'String'>
    readonly ticket_id: FieldRef<"CheckinLog", 'Int'>
    readonly event_id: FieldRef<"CheckinLog", 'Int'>
    readonly checkin_time: FieldRef<"CheckinLog", 'DateTime'>
    readonly verified_by: FieldRef<"CheckinLog", 'String'>
    readonly created_at: FieldRef<"CheckinLog", 'DateTime'>
    readonly updated_at: FieldRef<"CheckinLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CheckinLog findUnique
   */
  export type CheckinLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckinLog
     */
    select?: CheckinLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckinLog
     */
    omit?: CheckinLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckinLogInclude<ExtArgs> | null
    /**
     * Filter, which CheckinLog to fetch.
     */
    where: CheckinLogWhereUniqueInput
  }

  /**
   * CheckinLog findUniqueOrThrow
   */
  export type CheckinLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckinLog
     */
    select?: CheckinLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckinLog
     */
    omit?: CheckinLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckinLogInclude<ExtArgs> | null
    /**
     * Filter, which CheckinLog to fetch.
     */
    where: CheckinLogWhereUniqueInput
  }

  /**
   * CheckinLog findFirst
   */
  export type CheckinLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckinLog
     */
    select?: CheckinLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckinLog
     */
    omit?: CheckinLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckinLogInclude<ExtArgs> | null
    /**
     * Filter, which CheckinLog to fetch.
     */
    where?: CheckinLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckinLogs to fetch.
     */
    orderBy?: CheckinLogOrderByWithRelationInput | CheckinLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CheckinLogs.
     */
    cursor?: CheckinLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckinLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckinLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CheckinLogs.
     */
    distinct?: CheckinLogScalarFieldEnum | CheckinLogScalarFieldEnum[]
  }

  /**
   * CheckinLog findFirstOrThrow
   */
  export type CheckinLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckinLog
     */
    select?: CheckinLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckinLog
     */
    omit?: CheckinLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckinLogInclude<ExtArgs> | null
    /**
     * Filter, which CheckinLog to fetch.
     */
    where?: CheckinLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckinLogs to fetch.
     */
    orderBy?: CheckinLogOrderByWithRelationInput | CheckinLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CheckinLogs.
     */
    cursor?: CheckinLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckinLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckinLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CheckinLogs.
     */
    distinct?: CheckinLogScalarFieldEnum | CheckinLogScalarFieldEnum[]
  }

  /**
   * CheckinLog findMany
   */
  export type CheckinLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckinLog
     */
    select?: CheckinLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckinLog
     */
    omit?: CheckinLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckinLogInclude<ExtArgs> | null
    /**
     * Filter, which CheckinLogs to fetch.
     */
    where?: CheckinLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckinLogs to fetch.
     */
    orderBy?: CheckinLogOrderByWithRelationInput | CheckinLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CheckinLogs.
     */
    cursor?: CheckinLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckinLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckinLogs.
     */
    skip?: number
    distinct?: CheckinLogScalarFieldEnum | CheckinLogScalarFieldEnum[]
  }

  /**
   * CheckinLog create
   */
  export type CheckinLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckinLog
     */
    select?: CheckinLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckinLog
     */
    omit?: CheckinLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckinLogInclude<ExtArgs> | null
    /**
     * The data needed to create a CheckinLog.
     */
    data: XOR<CheckinLogCreateInput, CheckinLogUncheckedCreateInput>
  }

  /**
   * CheckinLog createMany
   */
  export type CheckinLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CheckinLogs.
     */
    data: CheckinLogCreateManyInput | CheckinLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CheckinLog createManyAndReturn
   */
  export type CheckinLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckinLog
     */
    select?: CheckinLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CheckinLog
     */
    omit?: CheckinLogOmit<ExtArgs> | null
    /**
     * The data used to create many CheckinLogs.
     */
    data: CheckinLogCreateManyInput | CheckinLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckinLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CheckinLog update
   */
  export type CheckinLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckinLog
     */
    select?: CheckinLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckinLog
     */
    omit?: CheckinLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckinLogInclude<ExtArgs> | null
    /**
     * The data needed to update a CheckinLog.
     */
    data: XOR<CheckinLogUpdateInput, CheckinLogUncheckedUpdateInput>
    /**
     * Choose, which CheckinLog to update.
     */
    where: CheckinLogWhereUniqueInput
  }

  /**
   * CheckinLog updateMany
   */
  export type CheckinLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CheckinLogs.
     */
    data: XOR<CheckinLogUpdateManyMutationInput, CheckinLogUncheckedUpdateManyInput>
    /**
     * Filter which CheckinLogs to update
     */
    where?: CheckinLogWhereInput
    /**
     * Limit how many CheckinLogs to update.
     */
    limit?: number
  }

  /**
   * CheckinLog updateManyAndReturn
   */
  export type CheckinLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckinLog
     */
    select?: CheckinLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CheckinLog
     */
    omit?: CheckinLogOmit<ExtArgs> | null
    /**
     * The data used to update CheckinLogs.
     */
    data: XOR<CheckinLogUpdateManyMutationInput, CheckinLogUncheckedUpdateManyInput>
    /**
     * Filter which CheckinLogs to update
     */
    where?: CheckinLogWhereInput
    /**
     * Limit how many CheckinLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckinLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CheckinLog upsert
   */
  export type CheckinLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckinLog
     */
    select?: CheckinLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckinLog
     */
    omit?: CheckinLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckinLogInclude<ExtArgs> | null
    /**
     * The filter to search for the CheckinLog to update in case it exists.
     */
    where: CheckinLogWhereUniqueInput
    /**
     * In case the CheckinLog found by the `where` argument doesn't exist, create a new CheckinLog with this data.
     */
    create: XOR<CheckinLogCreateInput, CheckinLogUncheckedCreateInput>
    /**
     * In case the CheckinLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CheckinLogUpdateInput, CheckinLogUncheckedUpdateInput>
  }

  /**
   * CheckinLog delete
   */
  export type CheckinLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckinLog
     */
    select?: CheckinLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckinLog
     */
    omit?: CheckinLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckinLogInclude<ExtArgs> | null
    /**
     * Filter which CheckinLog to delete.
     */
    where: CheckinLogWhereUniqueInput
  }

  /**
   * CheckinLog deleteMany
   */
  export type CheckinLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CheckinLogs to delete
     */
    where?: CheckinLogWhereInput
    /**
     * Limit how many CheckinLogs to delete.
     */
    limit?: number
  }

  /**
   * CheckinLog without action
   */
  export type CheckinLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckinLog
     */
    select?: CheckinLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckinLog
     */
    omit?: CheckinLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckinLogInclude<ExtArgs> | null
  }


  /**
   * Model UserOrganization
   */

  export type AggregateUserOrganization = {
    _count: UserOrganizationCountAggregateOutputType | null
    _avg: UserOrganizationAvgAggregateOutputType | null
    _sum: UserOrganizationSumAggregateOutputType | null
    _min: UserOrganizationMinAggregateOutputType | null
    _max: UserOrganizationMaxAggregateOutputType | null
  }

  export type UserOrganizationAvgAggregateOutputType = {
    id: number | null
    organization_id: number | null
  }

  export type UserOrganizationSumAggregateOutputType = {
    id: number | null
    organization_id: number | null
  }

  export type UserOrganizationMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    organization_id: number | null
    role: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserOrganizationMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    organization_id: number | null
    role: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserOrganizationCountAggregateOutputType = {
    id: number
    user_id: number
    organization_id: number
    role: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UserOrganizationAvgAggregateInputType = {
    id?: true
    organization_id?: true
  }

  export type UserOrganizationSumAggregateInputType = {
    id?: true
    organization_id?: true
  }

  export type UserOrganizationMinAggregateInputType = {
    id?: true
    user_id?: true
    organization_id?: true
    role?: true
    created_at?: true
    updated_at?: true
  }

  export type UserOrganizationMaxAggregateInputType = {
    id?: true
    user_id?: true
    organization_id?: true
    role?: true
    created_at?: true
    updated_at?: true
  }

  export type UserOrganizationCountAggregateInputType = {
    id?: true
    user_id?: true
    organization_id?: true
    role?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UserOrganizationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserOrganization to aggregate.
     */
    where?: UserOrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserOrganizations to fetch.
     */
    orderBy?: UserOrganizationOrderByWithRelationInput | UserOrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserOrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserOrganizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserOrganizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserOrganizations
    **/
    _count?: true | UserOrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserOrganizationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserOrganizationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserOrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserOrganizationMaxAggregateInputType
  }

  export type GetUserOrganizationAggregateType<T extends UserOrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateUserOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserOrganization[P]>
      : GetScalarType<T[P], AggregateUserOrganization[P]>
  }




  export type UserOrganizationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserOrganizationWhereInput
    orderBy?: UserOrganizationOrderByWithAggregationInput | UserOrganizationOrderByWithAggregationInput[]
    by: UserOrganizationScalarFieldEnum[] | UserOrganizationScalarFieldEnum
    having?: UserOrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserOrganizationCountAggregateInputType | true
    _avg?: UserOrganizationAvgAggregateInputType
    _sum?: UserOrganizationSumAggregateInputType
    _min?: UserOrganizationMinAggregateInputType
    _max?: UserOrganizationMaxAggregateInputType
  }

  export type UserOrganizationGroupByOutputType = {
    id: number
    user_id: string
    organization_id: number
    role: string
    created_at: Date
    updated_at: Date
    _count: UserOrganizationCountAggregateOutputType | null
    _avg: UserOrganizationAvgAggregateOutputType | null
    _sum: UserOrganizationSumAggregateOutputType | null
    _min: UserOrganizationMinAggregateOutputType | null
    _max: UserOrganizationMaxAggregateOutputType | null
  }

  type GetUserOrganizationGroupByPayload<T extends UserOrganizationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserOrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserOrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserOrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], UserOrganizationGroupByOutputType[P]>
        }
      >
    >


  export type UserOrganizationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    organization_id?: boolean
    role?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userOrganization"]>

  export type UserOrganizationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    organization_id?: boolean
    role?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userOrganization"]>

  export type UserOrganizationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    organization_id?: boolean
    role?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userOrganization"]>

  export type UserOrganizationSelectScalar = {
    id?: boolean
    user_id?: boolean
    organization_id?: boolean
    role?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type UserOrganizationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "organization_id" | "role" | "created_at" | "updated_at", ExtArgs["result"]["userOrganization"]>
  export type UserOrganizationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type UserOrganizationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type UserOrganizationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $UserOrganizationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserOrganization"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      organization: Prisma.$OrganizationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: string
      organization_id: number
      role: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["userOrganization"]>
    composites: {}
  }

  type UserOrganizationGetPayload<S extends boolean | null | undefined | UserOrganizationDefaultArgs> = $Result.GetResult<Prisma.$UserOrganizationPayload, S>

  type UserOrganizationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserOrganizationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserOrganizationCountAggregateInputType | true
    }

  export interface UserOrganizationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserOrganization'], meta: { name: 'UserOrganization' } }
    /**
     * Find zero or one UserOrganization that matches the filter.
     * @param {UserOrganizationFindUniqueArgs} args - Arguments to find a UserOrganization
     * @example
     * // Get one UserOrganization
     * const userOrganization = await prisma.userOrganization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserOrganizationFindUniqueArgs>(args: SelectSubset<T, UserOrganizationFindUniqueArgs<ExtArgs>>): Prisma__UserOrganizationClient<$Result.GetResult<Prisma.$UserOrganizationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserOrganization that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserOrganizationFindUniqueOrThrowArgs} args - Arguments to find a UserOrganization
     * @example
     * // Get one UserOrganization
     * const userOrganization = await prisma.userOrganization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserOrganizationFindUniqueOrThrowArgs>(args: SelectSubset<T, UserOrganizationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserOrganizationClient<$Result.GetResult<Prisma.$UserOrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserOrganization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOrganizationFindFirstArgs} args - Arguments to find a UserOrganization
     * @example
     * // Get one UserOrganization
     * const userOrganization = await prisma.userOrganization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserOrganizationFindFirstArgs>(args?: SelectSubset<T, UserOrganizationFindFirstArgs<ExtArgs>>): Prisma__UserOrganizationClient<$Result.GetResult<Prisma.$UserOrganizationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserOrganization that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOrganizationFindFirstOrThrowArgs} args - Arguments to find a UserOrganization
     * @example
     * // Get one UserOrganization
     * const userOrganization = await prisma.userOrganization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserOrganizationFindFirstOrThrowArgs>(args?: SelectSubset<T, UserOrganizationFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserOrganizationClient<$Result.GetResult<Prisma.$UserOrganizationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserOrganizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOrganizationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserOrganizations
     * const userOrganizations = await prisma.userOrganization.findMany()
     * 
     * // Get first 10 UserOrganizations
     * const userOrganizations = await prisma.userOrganization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userOrganizationWithIdOnly = await prisma.userOrganization.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserOrganizationFindManyArgs>(args?: SelectSubset<T, UserOrganizationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserOrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserOrganization.
     * @param {UserOrganizationCreateArgs} args - Arguments to create a UserOrganization.
     * @example
     * // Create one UserOrganization
     * const UserOrganization = await prisma.userOrganization.create({
     *   data: {
     *     // ... data to create a UserOrganization
     *   }
     * })
     * 
     */
    create<T extends UserOrganizationCreateArgs>(args: SelectSubset<T, UserOrganizationCreateArgs<ExtArgs>>): Prisma__UserOrganizationClient<$Result.GetResult<Prisma.$UserOrganizationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserOrganizations.
     * @param {UserOrganizationCreateManyArgs} args - Arguments to create many UserOrganizations.
     * @example
     * // Create many UserOrganizations
     * const userOrganization = await prisma.userOrganization.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserOrganizationCreateManyArgs>(args?: SelectSubset<T, UserOrganizationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserOrganizations and returns the data saved in the database.
     * @param {UserOrganizationCreateManyAndReturnArgs} args - Arguments to create many UserOrganizations.
     * @example
     * // Create many UserOrganizations
     * const userOrganization = await prisma.userOrganization.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserOrganizations and only return the `id`
     * const userOrganizationWithIdOnly = await prisma.userOrganization.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserOrganizationCreateManyAndReturnArgs>(args?: SelectSubset<T, UserOrganizationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserOrganizationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserOrganization.
     * @param {UserOrganizationDeleteArgs} args - Arguments to delete one UserOrganization.
     * @example
     * // Delete one UserOrganization
     * const UserOrganization = await prisma.userOrganization.delete({
     *   where: {
     *     // ... filter to delete one UserOrganization
     *   }
     * })
     * 
     */
    delete<T extends UserOrganizationDeleteArgs>(args: SelectSubset<T, UserOrganizationDeleteArgs<ExtArgs>>): Prisma__UserOrganizationClient<$Result.GetResult<Prisma.$UserOrganizationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserOrganization.
     * @param {UserOrganizationUpdateArgs} args - Arguments to update one UserOrganization.
     * @example
     * // Update one UserOrganization
     * const userOrganization = await prisma.userOrganization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserOrganizationUpdateArgs>(args: SelectSubset<T, UserOrganizationUpdateArgs<ExtArgs>>): Prisma__UserOrganizationClient<$Result.GetResult<Prisma.$UserOrganizationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserOrganizations.
     * @param {UserOrganizationDeleteManyArgs} args - Arguments to filter UserOrganizations to delete.
     * @example
     * // Delete a few UserOrganizations
     * const { count } = await prisma.userOrganization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserOrganizationDeleteManyArgs>(args?: SelectSubset<T, UserOrganizationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserOrganizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserOrganizations
     * const userOrganization = await prisma.userOrganization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserOrganizationUpdateManyArgs>(args: SelectSubset<T, UserOrganizationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserOrganizations and returns the data updated in the database.
     * @param {UserOrganizationUpdateManyAndReturnArgs} args - Arguments to update many UserOrganizations.
     * @example
     * // Update many UserOrganizations
     * const userOrganization = await prisma.userOrganization.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserOrganizations and only return the `id`
     * const userOrganizationWithIdOnly = await prisma.userOrganization.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserOrganizationUpdateManyAndReturnArgs>(args: SelectSubset<T, UserOrganizationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserOrganizationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserOrganization.
     * @param {UserOrganizationUpsertArgs} args - Arguments to update or create a UserOrganization.
     * @example
     * // Update or create a UserOrganization
     * const userOrganization = await prisma.userOrganization.upsert({
     *   create: {
     *     // ... data to create a UserOrganization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserOrganization we want to update
     *   }
     * })
     */
    upsert<T extends UserOrganizationUpsertArgs>(args: SelectSubset<T, UserOrganizationUpsertArgs<ExtArgs>>): Prisma__UserOrganizationClient<$Result.GetResult<Prisma.$UserOrganizationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserOrganizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOrganizationCountArgs} args - Arguments to filter UserOrganizations to count.
     * @example
     * // Count the number of UserOrganizations
     * const count = await prisma.userOrganization.count({
     *   where: {
     *     // ... the filter for the UserOrganizations we want to count
     *   }
     * })
    **/
    count<T extends UserOrganizationCountArgs>(
      args?: Subset<T, UserOrganizationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserOrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserOrganization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserOrganizationAggregateArgs>(args: Subset<T, UserOrganizationAggregateArgs>): Prisma.PrismaPromise<GetUserOrganizationAggregateType<T>>

    /**
     * Group by UserOrganization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserOrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserOrganizationGroupByArgs['orderBy'] }
        : { orderBy?: UserOrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserOrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserOrganization model
   */
  readonly fields: UserOrganizationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserOrganization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserOrganizationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserOrganization model
   */
  interface UserOrganizationFieldRefs {
    readonly id: FieldRef<"UserOrganization", 'Int'>
    readonly user_id: FieldRef<"UserOrganization", 'String'>
    readonly organization_id: FieldRef<"UserOrganization", 'Int'>
    readonly role: FieldRef<"UserOrganization", 'String'>
    readonly created_at: FieldRef<"UserOrganization", 'DateTime'>
    readonly updated_at: FieldRef<"UserOrganization", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserOrganization findUnique
   */
  export type UserOrganizationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOrganization
     */
    select?: UserOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserOrganization
     */
    omit?: UserOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOrganizationInclude<ExtArgs> | null
    /**
     * Filter, which UserOrganization to fetch.
     */
    where: UserOrganizationWhereUniqueInput
  }

  /**
   * UserOrganization findUniqueOrThrow
   */
  export type UserOrganizationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOrganization
     */
    select?: UserOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserOrganization
     */
    omit?: UserOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOrganizationInclude<ExtArgs> | null
    /**
     * Filter, which UserOrganization to fetch.
     */
    where: UserOrganizationWhereUniqueInput
  }

  /**
   * UserOrganization findFirst
   */
  export type UserOrganizationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOrganization
     */
    select?: UserOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserOrganization
     */
    omit?: UserOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOrganizationInclude<ExtArgs> | null
    /**
     * Filter, which UserOrganization to fetch.
     */
    where?: UserOrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserOrganizations to fetch.
     */
    orderBy?: UserOrganizationOrderByWithRelationInput | UserOrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserOrganizations.
     */
    cursor?: UserOrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserOrganizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserOrganizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserOrganizations.
     */
    distinct?: UserOrganizationScalarFieldEnum | UserOrganizationScalarFieldEnum[]
  }

  /**
   * UserOrganization findFirstOrThrow
   */
  export type UserOrganizationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOrganization
     */
    select?: UserOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserOrganization
     */
    omit?: UserOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOrganizationInclude<ExtArgs> | null
    /**
     * Filter, which UserOrganization to fetch.
     */
    where?: UserOrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserOrganizations to fetch.
     */
    orderBy?: UserOrganizationOrderByWithRelationInput | UserOrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserOrganizations.
     */
    cursor?: UserOrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserOrganizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserOrganizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserOrganizations.
     */
    distinct?: UserOrganizationScalarFieldEnum | UserOrganizationScalarFieldEnum[]
  }

  /**
   * UserOrganization findMany
   */
  export type UserOrganizationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOrganization
     */
    select?: UserOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserOrganization
     */
    omit?: UserOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOrganizationInclude<ExtArgs> | null
    /**
     * Filter, which UserOrganizations to fetch.
     */
    where?: UserOrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserOrganizations to fetch.
     */
    orderBy?: UserOrganizationOrderByWithRelationInput | UserOrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserOrganizations.
     */
    cursor?: UserOrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserOrganizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserOrganizations.
     */
    skip?: number
    distinct?: UserOrganizationScalarFieldEnum | UserOrganizationScalarFieldEnum[]
  }

  /**
   * UserOrganization create
   */
  export type UserOrganizationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOrganization
     */
    select?: UserOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserOrganization
     */
    omit?: UserOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOrganizationInclude<ExtArgs> | null
    /**
     * The data needed to create a UserOrganization.
     */
    data: XOR<UserOrganizationCreateInput, UserOrganizationUncheckedCreateInput>
  }

  /**
   * UserOrganization createMany
   */
  export type UserOrganizationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserOrganizations.
     */
    data: UserOrganizationCreateManyInput | UserOrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserOrganization createManyAndReturn
   */
  export type UserOrganizationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOrganization
     */
    select?: UserOrganizationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserOrganization
     */
    omit?: UserOrganizationOmit<ExtArgs> | null
    /**
     * The data used to create many UserOrganizations.
     */
    data: UserOrganizationCreateManyInput | UserOrganizationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOrganizationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserOrganization update
   */
  export type UserOrganizationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOrganization
     */
    select?: UserOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserOrganization
     */
    omit?: UserOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOrganizationInclude<ExtArgs> | null
    /**
     * The data needed to update a UserOrganization.
     */
    data: XOR<UserOrganizationUpdateInput, UserOrganizationUncheckedUpdateInput>
    /**
     * Choose, which UserOrganization to update.
     */
    where: UserOrganizationWhereUniqueInput
  }

  /**
   * UserOrganization updateMany
   */
  export type UserOrganizationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserOrganizations.
     */
    data: XOR<UserOrganizationUpdateManyMutationInput, UserOrganizationUncheckedUpdateManyInput>
    /**
     * Filter which UserOrganizations to update
     */
    where?: UserOrganizationWhereInput
    /**
     * Limit how many UserOrganizations to update.
     */
    limit?: number
  }

  /**
   * UserOrganization updateManyAndReturn
   */
  export type UserOrganizationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOrganization
     */
    select?: UserOrganizationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserOrganization
     */
    omit?: UserOrganizationOmit<ExtArgs> | null
    /**
     * The data used to update UserOrganizations.
     */
    data: XOR<UserOrganizationUpdateManyMutationInput, UserOrganizationUncheckedUpdateManyInput>
    /**
     * Filter which UserOrganizations to update
     */
    where?: UserOrganizationWhereInput
    /**
     * Limit how many UserOrganizations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOrganizationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserOrganization upsert
   */
  export type UserOrganizationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOrganization
     */
    select?: UserOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserOrganization
     */
    omit?: UserOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOrganizationInclude<ExtArgs> | null
    /**
     * The filter to search for the UserOrganization to update in case it exists.
     */
    where: UserOrganizationWhereUniqueInput
    /**
     * In case the UserOrganization found by the `where` argument doesn't exist, create a new UserOrganization with this data.
     */
    create: XOR<UserOrganizationCreateInput, UserOrganizationUncheckedCreateInput>
    /**
     * In case the UserOrganization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserOrganizationUpdateInput, UserOrganizationUncheckedUpdateInput>
  }

  /**
   * UserOrganization delete
   */
  export type UserOrganizationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOrganization
     */
    select?: UserOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserOrganization
     */
    omit?: UserOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOrganizationInclude<ExtArgs> | null
    /**
     * Filter which UserOrganization to delete.
     */
    where: UserOrganizationWhereUniqueInput
  }

  /**
   * UserOrganization deleteMany
   */
  export type UserOrganizationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserOrganizations to delete
     */
    where?: UserOrganizationWhereInput
    /**
     * Limit how many UserOrganizations to delete.
     */
    limit?: number
  }

  /**
   * UserOrganization without action
   */
  export type UserOrganizationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOrganization
     */
    select?: UserOrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserOrganization
     */
    omit?: UserOrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOrganizationInclude<ExtArgs> | null
  }


  /**
   * Model EventSetting
   */

  export type AggregateEventSetting = {
    _count: EventSettingCountAggregateOutputType | null
    _avg: EventSettingAvgAggregateOutputType | null
    _sum: EventSettingSumAggregateOutputType | null
    _min: EventSettingMinAggregateOutputType | null
    _max: EventSettingMaxAggregateOutputType | null
  }

  export type EventSettingAvgAggregateOutputType = {
    id: number | null
    event_id: number | null
  }

  export type EventSettingSumAggregateOutputType = {
    id: number | null
    event_id: number | null
  }

  export type EventSettingMinAggregateOutputType = {
    id: number | null
    event_id: number | null
    setting_key: string | null
    setting_value: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type EventSettingMaxAggregateOutputType = {
    id: number | null
    event_id: number | null
    setting_key: string | null
    setting_value: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type EventSettingCountAggregateOutputType = {
    id: number
    event_id: number
    setting_key: number
    setting_value: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type EventSettingAvgAggregateInputType = {
    id?: true
    event_id?: true
  }

  export type EventSettingSumAggregateInputType = {
    id?: true
    event_id?: true
  }

  export type EventSettingMinAggregateInputType = {
    id?: true
    event_id?: true
    setting_key?: true
    setting_value?: true
    created_at?: true
    updated_at?: true
  }

  export type EventSettingMaxAggregateInputType = {
    id?: true
    event_id?: true
    setting_key?: true
    setting_value?: true
    created_at?: true
    updated_at?: true
  }

  export type EventSettingCountAggregateInputType = {
    id?: true
    event_id?: true
    setting_key?: true
    setting_value?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type EventSettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventSetting to aggregate.
     */
    where?: EventSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventSettings to fetch.
     */
    orderBy?: EventSettingOrderByWithRelationInput | EventSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventSettings
    **/
    _count?: true | EventSettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventSettingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSettingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventSettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventSettingMaxAggregateInputType
  }

  export type GetEventSettingAggregateType<T extends EventSettingAggregateArgs> = {
        [P in keyof T & keyof AggregateEventSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventSetting[P]>
      : GetScalarType<T[P], AggregateEventSetting[P]>
  }




  export type EventSettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventSettingWhereInput
    orderBy?: EventSettingOrderByWithAggregationInput | EventSettingOrderByWithAggregationInput[]
    by: EventSettingScalarFieldEnum[] | EventSettingScalarFieldEnum
    having?: EventSettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventSettingCountAggregateInputType | true
    _avg?: EventSettingAvgAggregateInputType
    _sum?: EventSettingSumAggregateInputType
    _min?: EventSettingMinAggregateInputType
    _max?: EventSettingMaxAggregateInputType
  }

  export type EventSettingGroupByOutputType = {
    id: number
    event_id: number
    setting_key: string
    setting_value: string
    created_at: Date
    updated_at: Date
    _count: EventSettingCountAggregateOutputType | null
    _avg: EventSettingAvgAggregateOutputType | null
    _sum: EventSettingSumAggregateOutputType | null
    _min: EventSettingMinAggregateOutputType | null
    _max: EventSettingMaxAggregateOutputType | null
  }

  type GetEventSettingGroupByPayload<T extends EventSettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventSettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventSettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventSettingGroupByOutputType[P]>
            : GetScalarType<T[P], EventSettingGroupByOutputType[P]>
        }
      >
    >


  export type EventSettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    event_id?: boolean
    setting_key?: boolean
    setting_value?: boolean
    created_at?: boolean
    updated_at?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventSetting"]>

  export type EventSettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    event_id?: boolean
    setting_key?: boolean
    setting_value?: boolean
    created_at?: boolean
    updated_at?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventSetting"]>

  export type EventSettingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    event_id?: boolean
    setting_key?: boolean
    setting_value?: boolean
    created_at?: boolean
    updated_at?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventSetting"]>

  export type EventSettingSelectScalar = {
    id?: boolean
    event_id?: boolean
    setting_key?: boolean
    setting_value?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type EventSettingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "event_id" | "setting_key" | "setting_value" | "created_at" | "updated_at", ExtArgs["result"]["eventSetting"]>
  export type EventSettingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type EventSettingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type EventSettingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
  }

  export type $EventSettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventSetting"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      event_id: number
      setting_key: string
      setting_value: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["eventSetting"]>
    composites: {}
  }

  type EventSettingGetPayload<S extends boolean | null | undefined | EventSettingDefaultArgs> = $Result.GetResult<Prisma.$EventSettingPayload, S>

  type EventSettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventSettingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventSettingCountAggregateInputType | true
    }

  export interface EventSettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventSetting'], meta: { name: 'EventSetting' } }
    /**
     * Find zero or one EventSetting that matches the filter.
     * @param {EventSettingFindUniqueArgs} args - Arguments to find a EventSetting
     * @example
     * // Get one EventSetting
     * const eventSetting = await prisma.eventSetting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventSettingFindUniqueArgs>(args: SelectSubset<T, EventSettingFindUniqueArgs<ExtArgs>>): Prisma__EventSettingClient<$Result.GetResult<Prisma.$EventSettingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EventSetting that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventSettingFindUniqueOrThrowArgs} args - Arguments to find a EventSetting
     * @example
     * // Get one EventSetting
     * const eventSetting = await prisma.eventSetting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventSettingFindUniqueOrThrowArgs>(args: SelectSubset<T, EventSettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventSettingClient<$Result.GetResult<Prisma.$EventSettingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventSetting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSettingFindFirstArgs} args - Arguments to find a EventSetting
     * @example
     * // Get one EventSetting
     * const eventSetting = await prisma.eventSetting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventSettingFindFirstArgs>(args?: SelectSubset<T, EventSettingFindFirstArgs<ExtArgs>>): Prisma__EventSettingClient<$Result.GetResult<Prisma.$EventSettingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventSetting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSettingFindFirstOrThrowArgs} args - Arguments to find a EventSetting
     * @example
     * // Get one EventSetting
     * const eventSetting = await prisma.eventSetting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventSettingFindFirstOrThrowArgs>(args?: SelectSubset<T, EventSettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventSettingClient<$Result.GetResult<Prisma.$EventSettingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EventSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventSettings
     * const eventSettings = await prisma.eventSetting.findMany()
     * 
     * // Get first 10 EventSettings
     * const eventSettings = await prisma.eventSetting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventSettingWithIdOnly = await prisma.eventSetting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventSettingFindManyArgs>(args?: SelectSubset<T, EventSettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EventSetting.
     * @param {EventSettingCreateArgs} args - Arguments to create a EventSetting.
     * @example
     * // Create one EventSetting
     * const EventSetting = await prisma.eventSetting.create({
     *   data: {
     *     // ... data to create a EventSetting
     *   }
     * })
     * 
     */
    create<T extends EventSettingCreateArgs>(args: SelectSubset<T, EventSettingCreateArgs<ExtArgs>>): Prisma__EventSettingClient<$Result.GetResult<Prisma.$EventSettingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EventSettings.
     * @param {EventSettingCreateManyArgs} args - Arguments to create many EventSettings.
     * @example
     * // Create many EventSettings
     * const eventSetting = await prisma.eventSetting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventSettingCreateManyArgs>(args?: SelectSubset<T, EventSettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventSettings and returns the data saved in the database.
     * @param {EventSettingCreateManyAndReturnArgs} args - Arguments to create many EventSettings.
     * @example
     * // Create many EventSettings
     * const eventSetting = await prisma.eventSetting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventSettings and only return the `id`
     * const eventSettingWithIdOnly = await prisma.eventSetting.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventSettingCreateManyAndReturnArgs>(args?: SelectSubset<T, EventSettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventSettingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EventSetting.
     * @param {EventSettingDeleteArgs} args - Arguments to delete one EventSetting.
     * @example
     * // Delete one EventSetting
     * const EventSetting = await prisma.eventSetting.delete({
     *   where: {
     *     // ... filter to delete one EventSetting
     *   }
     * })
     * 
     */
    delete<T extends EventSettingDeleteArgs>(args: SelectSubset<T, EventSettingDeleteArgs<ExtArgs>>): Prisma__EventSettingClient<$Result.GetResult<Prisma.$EventSettingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EventSetting.
     * @param {EventSettingUpdateArgs} args - Arguments to update one EventSetting.
     * @example
     * // Update one EventSetting
     * const eventSetting = await prisma.eventSetting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventSettingUpdateArgs>(args: SelectSubset<T, EventSettingUpdateArgs<ExtArgs>>): Prisma__EventSettingClient<$Result.GetResult<Prisma.$EventSettingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EventSettings.
     * @param {EventSettingDeleteManyArgs} args - Arguments to filter EventSettings to delete.
     * @example
     * // Delete a few EventSettings
     * const { count } = await prisma.eventSetting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventSettingDeleteManyArgs>(args?: SelectSubset<T, EventSettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventSettings
     * const eventSetting = await prisma.eventSetting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventSettingUpdateManyArgs>(args: SelectSubset<T, EventSettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventSettings and returns the data updated in the database.
     * @param {EventSettingUpdateManyAndReturnArgs} args - Arguments to update many EventSettings.
     * @example
     * // Update many EventSettings
     * const eventSetting = await prisma.eventSetting.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EventSettings and only return the `id`
     * const eventSettingWithIdOnly = await prisma.eventSetting.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventSettingUpdateManyAndReturnArgs>(args: SelectSubset<T, EventSettingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventSettingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EventSetting.
     * @param {EventSettingUpsertArgs} args - Arguments to update or create a EventSetting.
     * @example
     * // Update or create a EventSetting
     * const eventSetting = await prisma.eventSetting.upsert({
     *   create: {
     *     // ... data to create a EventSetting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventSetting we want to update
     *   }
     * })
     */
    upsert<T extends EventSettingUpsertArgs>(args: SelectSubset<T, EventSettingUpsertArgs<ExtArgs>>): Prisma__EventSettingClient<$Result.GetResult<Prisma.$EventSettingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EventSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSettingCountArgs} args - Arguments to filter EventSettings to count.
     * @example
     * // Count the number of EventSettings
     * const count = await prisma.eventSetting.count({
     *   where: {
     *     // ... the filter for the EventSettings we want to count
     *   }
     * })
    **/
    count<T extends EventSettingCountArgs>(
      args?: Subset<T, EventSettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventSettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventSettingAggregateArgs>(args: Subset<T, EventSettingAggregateArgs>): Prisma.PrismaPromise<GetEventSettingAggregateType<T>>

    /**
     * Group by EventSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventSettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventSettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventSettingGroupByArgs['orderBy'] }
        : { orderBy?: EventSettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventSettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventSetting model
   */
  readonly fields: EventSettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventSetting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventSettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventSetting model
   */
  interface EventSettingFieldRefs {
    readonly id: FieldRef<"EventSetting", 'Int'>
    readonly event_id: FieldRef<"EventSetting", 'Int'>
    readonly setting_key: FieldRef<"EventSetting", 'String'>
    readonly setting_value: FieldRef<"EventSetting", 'String'>
    readonly created_at: FieldRef<"EventSetting", 'DateTime'>
    readonly updated_at: FieldRef<"EventSetting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EventSetting findUnique
   */
  export type EventSettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSetting
     */
    select?: EventSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventSetting
     */
    omit?: EventSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSettingInclude<ExtArgs> | null
    /**
     * Filter, which EventSetting to fetch.
     */
    where: EventSettingWhereUniqueInput
  }

  /**
   * EventSetting findUniqueOrThrow
   */
  export type EventSettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSetting
     */
    select?: EventSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventSetting
     */
    omit?: EventSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSettingInclude<ExtArgs> | null
    /**
     * Filter, which EventSetting to fetch.
     */
    where: EventSettingWhereUniqueInput
  }

  /**
   * EventSetting findFirst
   */
  export type EventSettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSetting
     */
    select?: EventSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventSetting
     */
    omit?: EventSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSettingInclude<ExtArgs> | null
    /**
     * Filter, which EventSetting to fetch.
     */
    where?: EventSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventSettings to fetch.
     */
    orderBy?: EventSettingOrderByWithRelationInput | EventSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventSettings.
     */
    cursor?: EventSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventSettings.
     */
    distinct?: EventSettingScalarFieldEnum | EventSettingScalarFieldEnum[]
  }

  /**
   * EventSetting findFirstOrThrow
   */
  export type EventSettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSetting
     */
    select?: EventSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventSetting
     */
    omit?: EventSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSettingInclude<ExtArgs> | null
    /**
     * Filter, which EventSetting to fetch.
     */
    where?: EventSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventSettings to fetch.
     */
    orderBy?: EventSettingOrderByWithRelationInput | EventSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventSettings.
     */
    cursor?: EventSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventSettings.
     */
    distinct?: EventSettingScalarFieldEnum | EventSettingScalarFieldEnum[]
  }

  /**
   * EventSetting findMany
   */
  export type EventSettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSetting
     */
    select?: EventSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventSetting
     */
    omit?: EventSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSettingInclude<ExtArgs> | null
    /**
     * Filter, which EventSettings to fetch.
     */
    where?: EventSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventSettings to fetch.
     */
    orderBy?: EventSettingOrderByWithRelationInput | EventSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventSettings.
     */
    cursor?: EventSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventSettings.
     */
    skip?: number
    distinct?: EventSettingScalarFieldEnum | EventSettingScalarFieldEnum[]
  }

  /**
   * EventSetting create
   */
  export type EventSettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSetting
     */
    select?: EventSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventSetting
     */
    omit?: EventSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSettingInclude<ExtArgs> | null
    /**
     * The data needed to create a EventSetting.
     */
    data: XOR<EventSettingCreateInput, EventSettingUncheckedCreateInput>
  }

  /**
   * EventSetting createMany
   */
  export type EventSettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventSettings.
     */
    data: EventSettingCreateManyInput | EventSettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventSetting createManyAndReturn
   */
  export type EventSettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSetting
     */
    select?: EventSettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventSetting
     */
    omit?: EventSettingOmit<ExtArgs> | null
    /**
     * The data used to create many EventSettings.
     */
    data: EventSettingCreateManyInput | EventSettingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSettingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventSetting update
   */
  export type EventSettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSetting
     */
    select?: EventSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventSetting
     */
    omit?: EventSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSettingInclude<ExtArgs> | null
    /**
     * The data needed to update a EventSetting.
     */
    data: XOR<EventSettingUpdateInput, EventSettingUncheckedUpdateInput>
    /**
     * Choose, which EventSetting to update.
     */
    where: EventSettingWhereUniqueInput
  }

  /**
   * EventSetting updateMany
   */
  export type EventSettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventSettings.
     */
    data: XOR<EventSettingUpdateManyMutationInput, EventSettingUncheckedUpdateManyInput>
    /**
     * Filter which EventSettings to update
     */
    where?: EventSettingWhereInput
    /**
     * Limit how many EventSettings to update.
     */
    limit?: number
  }

  /**
   * EventSetting updateManyAndReturn
   */
  export type EventSettingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSetting
     */
    select?: EventSettingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventSetting
     */
    omit?: EventSettingOmit<ExtArgs> | null
    /**
     * The data used to update EventSettings.
     */
    data: XOR<EventSettingUpdateManyMutationInput, EventSettingUncheckedUpdateManyInput>
    /**
     * Filter which EventSettings to update
     */
    where?: EventSettingWhereInput
    /**
     * Limit how many EventSettings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSettingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventSetting upsert
   */
  export type EventSettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSetting
     */
    select?: EventSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventSetting
     */
    omit?: EventSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSettingInclude<ExtArgs> | null
    /**
     * The filter to search for the EventSetting to update in case it exists.
     */
    where: EventSettingWhereUniqueInput
    /**
     * In case the EventSetting found by the `where` argument doesn't exist, create a new EventSetting with this data.
     */
    create: XOR<EventSettingCreateInput, EventSettingUncheckedCreateInput>
    /**
     * In case the EventSetting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventSettingUpdateInput, EventSettingUncheckedUpdateInput>
  }

  /**
   * EventSetting delete
   */
  export type EventSettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSetting
     */
    select?: EventSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventSetting
     */
    omit?: EventSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSettingInclude<ExtArgs> | null
    /**
     * Filter which EventSetting to delete.
     */
    where: EventSettingWhereUniqueInput
  }

  /**
   * EventSetting deleteMany
   */
  export type EventSettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventSettings to delete
     */
    where?: EventSettingWhereInput
    /**
     * Limit how many EventSettings to delete.
     */
    limit?: number
  }

  /**
   * EventSetting without action
   */
  export type EventSettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventSetting
     */
    select?: EventSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventSetting
     */
    omit?: EventSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventSettingInclude<ExtArgs> | null
  }


  /**
   * Model Image
   */

  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageAvgAggregateOutputType = {
    id: number | null
    file_size: number | null
  }

  export type ImageSumAggregateOutputType = {
    id: number | null
    file_size: number | null
  }

  export type ImageMinAggregateOutputType = {
    id: number | null
    file_path: string | null
    file_name: string | null
    file_type: string | null
    file_size: number | null
    alt_text: string | null
    uploaded_by: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ImageMaxAggregateOutputType = {
    id: number | null
    file_path: string | null
    file_name: string | null
    file_type: string | null
    file_size: number | null
    alt_text: string | null
    uploaded_by: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ImageCountAggregateOutputType = {
    id: number
    file_path: number
    file_name: number
    file_type: number
    file_size: number
    alt_text: number
    uploaded_by: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ImageAvgAggregateInputType = {
    id?: true
    file_size?: true
  }

  export type ImageSumAggregateInputType = {
    id?: true
    file_size?: true
  }

  export type ImageMinAggregateInputType = {
    id?: true
    file_path?: true
    file_name?: true
    file_type?: true
    file_size?: true
    alt_text?: true
    uploaded_by?: true
    created_at?: true
    updated_at?: true
  }

  export type ImageMaxAggregateInputType = {
    id?: true
    file_path?: true
    file_name?: true
    file_type?: true
    file_size?: true
    alt_text?: true
    uploaded_by?: true
    created_at?: true
    updated_at?: true
  }

  export type ImageCountAggregateInputType = {
    id?: true
    file_path?: true
    file_name?: true
    file_type?: true
    file_size?: true
    alt_text?: true
    uploaded_by?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Image to aggregate.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type ImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithAggregationInput | ImageOrderByWithAggregationInput[]
    by: ImageScalarFieldEnum[] | ImageScalarFieldEnum
    having?: ImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _avg?: ImageAvgAggregateInputType
    _sum?: ImageSumAggregateInputType
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }

  export type ImageGroupByOutputType = {
    id: number
    file_path: string
    file_name: string | null
    file_type: string | null
    file_size: number | null
    alt_text: string | null
    uploaded_by: string
    created_at: Date
    updated_at: Date
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends ImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type ImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    file_path?: boolean
    file_name?: boolean
    file_type?: boolean
    file_size?: boolean
    alt_text?: boolean
    uploaded_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    image_links?: boolean | Image$image_linksArgs<ExtArgs>
    _count?: boolean | ImageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    file_path?: boolean
    file_name?: boolean
    file_type?: boolean
    file_size?: boolean
    alt_text?: boolean
    uploaded_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    file_path?: boolean
    file_name?: boolean
    file_type?: boolean
    file_size?: boolean
    alt_text?: boolean
    uploaded_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectScalar = {
    id?: boolean
    file_path?: boolean
    file_name?: boolean
    file_type?: boolean
    file_size?: boolean
    alt_text?: boolean
    uploaded_by?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "file_path" | "file_name" | "file_type" | "file_size" | "alt_text" | "uploaded_by" | "created_at" | "updated_at", ExtArgs["result"]["image"]>
  export type ImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    image_links?: boolean | Image$image_linksArgs<ExtArgs>
    _count?: boolean | ImageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ImageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Image"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      image_links: Prisma.$ImageLinkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      file_path: string
      file_name: string | null
      file_type: string | null
      file_size: number | null
      alt_text: string | null
      uploaded_by: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["image"]>
    composites: {}
  }

  type ImageGetPayload<S extends boolean | null | undefined | ImageDefaultArgs> = $Result.GetResult<Prisma.$ImagePayload, S>

  type ImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ImageCountAggregateInputType | true
    }

  export interface ImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Image'], meta: { name: 'Image' } }
    /**
     * Find zero or one Image that matches the filter.
     * @param {ImageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ImageFindUniqueArgs>(args: SelectSubset<T, ImageFindUniqueArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Image that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ImageFindUniqueOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ImageFindUniqueOrThrowArgs>(args: SelectSubset<T, ImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ImageFindFirstArgs>(args?: SelectSubset<T, ImageFindFirstArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Image that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ImageFindFirstOrThrowArgs>(args?: SelectSubset<T, ImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ImageFindManyArgs>(args?: SelectSubset<T, ImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Image.
     * @param {ImageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
     */
    create<T extends ImageCreateArgs>(args: SelectSubset<T, ImageCreateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Images.
     * @param {ImageCreateManyArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ImageCreateManyArgs>(args?: SelectSubset<T, ImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Images and returns the data saved in the database.
     * @param {ImageCreateManyAndReturnArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Images and only return the `id`
     * const imageWithIdOnly = await prisma.image.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ImageCreateManyAndReturnArgs>(args?: SelectSubset<T, ImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Image.
     * @param {ImageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
     */
    delete<T extends ImageDeleteArgs>(args: SelectSubset<T, ImageDeleteArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Image.
     * @param {ImageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ImageUpdateArgs>(args: SelectSubset<T, ImageUpdateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Images.
     * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ImageDeleteManyArgs>(args?: SelectSubset<T, ImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ImageUpdateManyArgs>(args: SelectSubset<T, ImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images and returns the data updated in the database.
     * @param {ImageUpdateManyAndReturnArgs} args - Arguments to update many Images.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Images and only return the `id`
     * const imageWithIdOnly = await prisma.image.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ImageUpdateManyAndReturnArgs>(args: SelectSubset<T, ImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Image.
     * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
     */
    upsert<T extends ImageUpsertArgs>(args: SelectSubset<T, ImageUpsertArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImageCountArgs>(
      args?: Subset<T, ImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): Prisma.PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageGroupByArgs['orderBy'] }
        : { orderBy?: ImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Image model
   */
  readonly fields: ImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    image_links<T extends Image$image_linksArgs<ExtArgs> = {}>(args?: Subset<T, Image$image_linksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImageLinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Image model
   */
  interface ImageFieldRefs {
    readonly id: FieldRef<"Image", 'Int'>
    readonly file_path: FieldRef<"Image", 'String'>
    readonly file_name: FieldRef<"Image", 'String'>
    readonly file_type: FieldRef<"Image", 'String'>
    readonly file_size: FieldRef<"Image", 'Int'>
    readonly alt_text: FieldRef<"Image", 'String'>
    readonly uploaded_by: FieldRef<"Image", 'String'>
    readonly created_at: FieldRef<"Image", 'DateTime'>
    readonly updated_at: FieldRef<"Image", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Image findUnique
   */
  export type ImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findUniqueOrThrow
   */
  export type ImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findFirst
   */
  export type ImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findFirstOrThrow
   */
  export type ImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findMany
   */
  export type ImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Images to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image create
   */
  export type ImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to create a Image.
     */
    data: XOR<ImageCreateInput, ImageUncheckedCreateInput>
  }

  /**
   * Image createMany
   */
  export type ImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Image createManyAndReturn
   */
  export type ImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Image update
   */
  export type ImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to update a Image.
     */
    data: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
    /**
     * Choose, which Image to update.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image updateMany
   */
  export type ImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to update.
     */
    limit?: number
  }

  /**
   * Image updateManyAndReturn
   */
  export type ImageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Image upsert
   */
  export type ImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The filter to search for the Image to update in case it exists.
     */
    where: ImageWhereUniqueInput
    /**
     * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
     */
    create: XOR<ImageCreateInput, ImageUncheckedCreateInput>
    /**
     * In case the Image was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
  }

  /**
   * Image delete
   */
  export type ImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter which Image to delete.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image deleteMany
   */
  export type ImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Images to delete
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to delete.
     */
    limit?: number
  }

  /**
   * Image.image_links
   */
  export type Image$image_linksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageLink
     */
    select?: ImageLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImageLink
     */
    omit?: ImageLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageLinkInclude<ExtArgs> | null
    where?: ImageLinkWhereInput
    orderBy?: ImageLinkOrderByWithRelationInput | ImageLinkOrderByWithRelationInput[]
    cursor?: ImageLinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImageLinkScalarFieldEnum | ImageLinkScalarFieldEnum[]
  }

  /**
   * Image without action
   */
  export type ImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
  }


  /**
   * Model ImageLink
   */

  export type AggregateImageLink = {
    _count: ImageLinkCountAggregateOutputType | null
    _avg: ImageLinkAvgAggregateOutputType | null
    _sum: ImageLinkSumAggregateOutputType | null
    _min: ImageLinkMinAggregateOutputType | null
    _max: ImageLinkMaxAggregateOutputType | null
  }

  export type ImageLinkAvgAggregateOutputType = {
    id: number | null
    image_id: number | null
    entity_id: number | null
    organization_id: number | null
    event_id: number | null
  }

  export type ImageLinkSumAggregateOutputType = {
    id: number | null
    image_id: number | null
    entity_id: number | null
    organization_id: number | null
    event_id: number | null
  }

  export type ImageLinkMinAggregateOutputType = {
    id: number | null
    image_id: number | null
    entity_type: string | null
    entity_id: number | null
    organization_id: number | null
    event_id: number | null
    usage_type: string | null
    linked_at: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ImageLinkMaxAggregateOutputType = {
    id: number | null
    image_id: number | null
    entity_type: string | null
    entity_id: number | null
    organization_id: number | null
    event_id: number | null
    usage_type: string | null
    linked_at: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ImageLinkCountAggregateOutputType = {
    id: number
    image_id: number
    entity_type: number
    entity_id: number
    organization_id: number
    event_id: number
    usage_type: number
    linked_at: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ImageLinkAvgAggregateInputType = {
    id?: true
    image_id?: true
    entity_id?: true
    organization_id?: true
    event_id?: true
  }

  export type ImageLinkSumAggregateInputType = {
    id?: true
    image_id?: true
    entity_id?: true
    organization_id?: true
    event_id?: true
  }

  export type ImageLinkMinAggregateInputType = {
    id?: true
    image_id?: true
    entity_type?: true
    entity_id?: true
    organization_id?: true
    event_id?: true
    usage_type?: true
    linked_at?: true
    created_at?: true
    updated_at?: true
  }

  export type ImageLinkMaxAggregateInputType = {
    id?: true
    image_id?: true
    entity_type?: true
    entity_id?: true
    organization_id?: true
    event_id?: true
    usage_type?: true
    linked_at?: true
    created_at?: true
    updated_at?: true
  }

  export type ImageLinkCountAggregateInputType = {
    id?: true
    image_id?: true
    entity_type?: true
    entity_id?: true
    organization_id?: true
    event_id?: true
    usage_type?: true
    linked_at?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ImageLinkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ImageLink to aggregate.
     */
    where?: ImageLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ImageLinks to fetch.
     */
    orderBy?: ImageLinkOrderByWithRelationInput | ImageLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImageLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ImageLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ImageLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ImageLinks
    **/
    _count?: true | ImageLinkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImageLinkAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImageLinkSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageLinkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageLinkMaxAggregateInputType
  }

  export type GetImageLinkAggregateType<T extends ImageLinkAggregateArgs> = {
        [P in keyof T & keyof AggregateImageLink]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImageLink[P]>
      : GetScalarType<T[P], AggregateImageLink[P]>
  }




  export type ImageLinkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageLinkWhereInput
    orderBy?: ImageLinkOrderByWithAggregationInput | ImageLinkOrderByWithAggregationInput[]
    by: ImageLinkScalarFieldEnum[] | ImageLinkScalarFieldEnum
    having?: ImageLinkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageLinkCountAggregateInputType | true
    _avg?: ImageLinkAvgAggregateInputType
    _sum?: ImageLinkSumAggregateInputType
    _min?: ImageLinkMinAggregateInputType
    _max?: ImageLinkMaxAggregateInputType
  }

  export type ImageLinkGroupByOutputType = {
    id: number
    image_id: number
    entity_type: string
    entity_id: number
    organization_id: number | null
    event_id: number | null
    usage_type: string
    linked_at: Date
    created_at: Date
    updated_at: Date
    _count: ImageLinkCountAggregateOutputType | null
    _avg: ImageLinkAvgAggregateOutputType | null
    _sum: ImageLinkSumAggregateOutputType | null
    _min: ImageLinkMinAggregateOutputType | null
    _max: ImageLinkMaxAggregateOutputType | null
  }

  type GetImageLinkGroupByPayload<T extends ImageLinkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImageLinkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageLinkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageLinkGroupByOutputType[P]>
            : GetScalarType<T[P], ImageLinkGroupByOutputType[P]>
        }
      >
    >


  export type ImageLinkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    image_id?: boolean
    entity_type?: boolean
    entity_id?: boolean
    organization_id?: boolean
    event_id?: boolean
    usage_type?: boolean
    linked_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    image?: boolean | ImageDefaultArgs<ExtArgs>
    organization?: boolean | ImageLink$organizationArgs<ExtArgs>
    event?: boolean | ImageLink$eventArgs<ExtArgs>
  }, ExtArgs["result"]["imageLink"]>

  export type ImageLinkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    image_id?: boolean
    entity_type?: boolean
    entity_id?: boolean
    organization_id?: boolean
    event_id?: boolean
    usage_type?: boolean
    linked_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    image?: boolean | ImageDefaultArgs<ExtArgs>
    organization?: boolean | ImageLink$organizationArgs<ExtArgs>
    event?: boolean | ImageLink$eventArgs<ExtArgs>
  }, ExtArgs["result"]["imageLink"]>

  export type ImageLinkSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    image_id?: boolean
    entity_type?: boolean
    entity_id?: boolean
    organization_id?: boolean
    event_id?: boolean
    usage_type?: boolean
    linked_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    image?: boolean | ImageDefaultArgs<ExtArgs>
    organization?: boolean | ImageLink$organizationArgs<ExtArgs>
    event?: boolean | ImageLink$eventArgs<ExtArgs>
  }, ExtArgs["result"]["imageLink"]>

  export type ImageLinkSelectScalar = {
    id?: boolean
    image_id?: boolean
    entity_type?: boolean
    entity_id?: boolean
    organization_id?: boolean
    event_id?: boolean
    usage_type?: boolean
    linked_at?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ImageLinkOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "image_id" | "entity_type" | "entity_id" | "organization_id" | "event_id" | "usage_type" | "linked_at" | "created_at" | "updated_at", ExtArgs["result"]["imageLink"]>
  export type ImageLinkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    image?: boolean | ImageDefaultArgs<ExtArgs>
    organization?: boolean | ImageLink$organizationArgs<ExtArgs>
    event?: boolean | ImageLink$eventArgs<ExtArgs>
  }
  export type ImageLinkIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    image?: boolean | ImageDefaultArgs<ExtArgs>
    organization?: boolean | ImageLink$organizationArgs<ExtArgs>
    event?: boolean | ImageLink$eventArgs<ExtArgs>
  }
  export type ImageLinkIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    image?: boolean | ImageDefaultArgs<ExtArgs>
    organization?: boolean | ImageLink$organizationArgs<ExtArgs>
    event?: boolean | ImageLink$eventArgs<ExtArgs>
  }

  export type $ImageLinkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ImageLink"
    objects: {
      image: Prisma.$ImagePayload<ExtArgs>
      organization: Prisma.$OrganizationPayload<ExtArgs> | null
      event: Prisma.$EventPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      image_id: number
      entity_type: string
      entity_id: number
      organization_id: number | null
      event_id: number | null
      usage_type: string
      linked_at: Date
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["imageLink"]>
    composites: {}
  }

  type ImageLinkGetPayload<S extends boolean | null | undefined | ImageLinkDefaultArgs> = $Result.GetResult<Prisma.$ImageLinkPayload, S>

  type ImageLinkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ImageLinkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ImageLinkCountAggregateInputType | true
    }

  export interface ImageLinkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ImageLink'], meta: { name: 'ImageLink' } }
    /**
     * Find zero or one ImageLink that matches the filter.
     * @param {ImageLinkFindUniqueArgs} args - Arguments to find a ImageLink
     * @example
     * // Get one ImageLink
     * const imageLink = await prisma.imageLink.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ImageLinkFindUniqueArgs>(args: SelectSubset<T, ImageLinkFindUniqueArgs<ExtArgs>>): Prisma__ImageLinkClient<$Result.GetResult<Prisma.$ImageLinkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ImageLink that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ImageLinkFindUniqueOrThrowArgs} args - Arguments to find a ImageLink
     * @example
     * // Get one ImageLink
     * const imageLink = await prisma.imageLink.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ImageLinkFindUniqueOrThrowArgs>(args: SelectSubset<T, ImageLinkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ImageLinkClient<$Result.GetResult<Prisma.$ImageLinkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ImageLink that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageLinkFindFirstArgs} args - Arguments to find a ImageLink
     * @example
     * // Get one ImageLink
     * const imageLink = await prisma.imageLink.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ImageLinkFindFirstArgs>(args?: SelectSubset<T, ImageLinkFindFirstArgs<ExtArgs>>): Prisma__ImageLinkClient<$Result.GetResult<Prisma.$ImageLinkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ImageLink that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageLinkFindFirstOrThrowArgs} args - Arguments to find a ImageLink
     * @example
     * // Get one ImageLink
     * const imageLink = await prisma.imageLink.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ImageLinkFindFirstOrThrowArgs>(args?: SelectSubset<T, ImageLinkFindFirstOrThrowArgs<ExtArgs>>): Prisma__ImageLinkClient<$Result.GetResult<Prisma.$ImageLinkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ImageLinks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageLinkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ImageLinks
     * const imageLinks = await prisma.imageLink.findMany()
     * 
     * // Get first 10 ImageLinks
     * const imageLinks = await prisma.imageLink.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageLinkWithIdOnly = await prisma.imageLink.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ImageLinkFindManyArgs>(args?: SelectSubset<T, ImageLinkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImageLinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ImageLink.
     * @param {ImageLinkCreateArgs} args - Arguments to create a ImageLink.
     * @example
     * // Create one ImageLink
     * const ImageLink = await prisma.imageLink.create({
     *   data: {
     *     // ... data to create a ImageLink
     *   }
     * })
     * 
     */
    create<T extends ImageLinkCreateArgs>(args: SelectSubset<T, ImageLinkCreateArgs<ExtArgs>>): Prisma__ImageLinkClient<$Result.GetResult<Prisma.$ImageLinkPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ImageLinks.
     * @param {ImageLinkCreateManyArgs} args - Arguments to create many ImageLinks.
     * @example
     * // Create many ImageLinks
     * const imageLink = await prisma.imageLink.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ImageLinkCreateManyArgs>(args?: SelectSubset<T, ImageLinkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ImageLinks and returns the data saved in the database.
     * @param {ImageLinkCreateManyAndReturnArgs} args - Arguments to create many ImageLinks.
     * @example
     * // Create many ImageLinks
     * const imageLink = await prisma.imageLink.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ImageLinks and only return the `id`
     * const imageLinkWithIdOnly = await prisma.imageLink.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ImageLinkCreateManyAndReturnArgs>(args?: SelectSubset<T, ImageLinkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImageLinkPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ImageLink.
     * @param {ImageLinkDeleteArgs} args - Arguments to delete one ImageLink.
     * @example
     * // Delete one ImageLink
     * const ImageLink = await prisma.imageLink.delete({
     *   where: {
     *     // ... filter to delete one ImageLink
     *   }
     * })
     * 
     */
    delete<T extends ImageLinkDeleteArgs>(args: SelectSubset<T, ImageLinkDeleteArgs<ExtArgs>>): Prisma__ImageLinkClient<$Result.GetResult<Prisma.$ImageLinkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ImageLink.
     * @param {ImageLinkUpdateArgs} args - Arguments to update one ImageLink.
     * @example
     * // Update one ImageLink
     * const imageLink = await prisma.imageLink.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ImageLinkUpdateArgs>(args: SelectSubset<T, ImageLinkUpdateArgs<ExtArgs>>): Prisma__ImageLinkClient<$Result.GetResult<Prisma.$ImageLinkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ImageLinks.
     * @param {ImageLinkDeleteManyArgs} args - Arguments to filter ImageLinks to delete.
     * @example
     * // Delete a few ImageLinks
     * const { count } = await prisma.imageLink.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ImageLinkDeleteManyArgs>(args?: SelectSubset<T, ImageLinkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ImageLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageLinkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ImageLinks
     * const imageLink = await prisma.imageLink.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ImageLinkUpdateManyArgs>(args: SelectSubset<T, ImageLinkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ImageLinks and returns the data updated in the database.
     * @param {ImageLinkUpdateManyAndReturnArgs} args - Arguments to update many ImageLinks.
     * @example
     * // Update many ImageLinks
     * const imageLink = await prisma.imageLink.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ImageLinks and only return the `id`
     * const imageLinkWithIdOnly = await prisma.imageLink.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ImageLinkUpdateManyAndReturnArgs>(args: SelectSubset<T, ImageLinkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImageLinkPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ImageLink.
     * @param {ImageLinkUpsertArgs} args - Arguments to update or create a ImageLink.
     * @example
     * // Update or create a ImageLink
     * const imageLink = await prisma.imageLink.upsert({
     *   create: {
     *     // ... data to create a ImageLink
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ImageLink we want to update
     *   }
     * })
     */
    upsert<T extends ImageLinkUpsertArgs>(args: SelectSubset<T, ImageLinkUpsertArgs<ExtArgs>>): Prisma__ImageLinkClient<$Result.GetResult<Prisma.$ImageLinkPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ImageLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageLinkCountArgs} args - Arguments to filter ImageLinks to count.
     * @example
     * // Count the number of ImageLinks
     * const count = await prisma.imageLink.count({
     *   where: {
     *     // ... the filter for the ImageLinks we want to count
     *   }
     * })
    **/
    count<T extends ImageLinkCountArgs>(
      args?: Subset<T, ImageLinkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageLinkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ImageLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageLinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageLinkAggregateArgs>(args: Subset<T, ImageLinkAggregateArgs>): Prisma.PrismaPromise<GetImageLinkAggregateType<T>>

    /**
     * Group by ImageLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageLinkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageLinkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageLinkGroupByArgs['orderBy'] }
        : { orderBy?: ImageLinkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageLinkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageLinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ImageLink model
   */
  readonly fields: ImageLinkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ImageLink.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImageLinkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    image<T extends ImageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ImageDefaultArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    organization<T extends ImageLink$organizationArgs<ExtArgs> = {}>(args?: Subset<T, ImageLink$organizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    event<T extends ImageLink$eventArgs<ExtArgs> = {}>(args?: Subset<T, ImageLink$eventArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ImageLink model
   */
  interface ImageLinkFieldRefs {
    readonly id: FieldRef<"ImageLink", 'Int'>
    readonly image_id: FieldRef<"ImageLink", 'Int'>
    readonly entity_type: FieldRef<"ImageLink", 'String'>
    readonly entity_id: FieldRef<"ImageLink", 'Int'>
    readonly organization_id: FieldRef<"ImageLink", 'Int'>
    readonly event_id: FieldRef<"ImageLink", 'Int'>
    readonly usage_type: FieldRef<"ImageLink", 'String'>
    readonly linked_at: FieldRef<"ImageLink", 'DateTime'>
    readonly created_at: FieldRef<"ImageLink", 'DateTime'>
    readonly updated_at: FieldRef<"ImageLink", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ImageLink findUnique
   */
  export type ImageLinkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageLink
     */
    select?: ImageLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImageLink
     */
    omit?: ImageLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageLinkInclude<ExtArgs> | null
    /**
     * Filter, which ImageLink to fetch.
     */
    where: ImageLinkWhereUniqueInput
  }

  /**
   * ImageLink findUniqueOrThrow
   */
  export type ImageLinkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageLink
     */
    select?: ImageLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImageLink
     */
    omit?: ImageLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageLinkInclude<ExtArgs> | null
    /**
     * Filter, which ImageLink to fetch.
     */
    where: ImageLinkWhereUniqueInput
  }

  /**
   * ImageLink findFirst
   */
  export type ImageLinkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageLink
     */
    select?: ImageLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImageLink
     */
    omit?: ImageLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageLinkInclude<ExtArgs> | null
    /**
     * Filter, which ImageLink to fetch.
     */
    where?: ImageLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ImageLinks to fetch.
     */
    orderBy?: ImageLinkOrderByWithRelationInput | ImageLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ImageLinks.
     */
    cursor?: ImageLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ImageLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ImageLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ImageLinks.
     */
    distinct?: ImageLinkScalarFieldEnum | ImageLinkScalarFieldEnum[]
  }

  /**
   * ImageLink findFirstOrThrow
   */
  export type ImageLinkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageLink
     */
    select?: ImageLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImageLink
     */
    omit?: ImageLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageLinkInclude<ExtArgs> | null
    /**
     * Filter, which ImageLink to fetch.
     */
    where?: ImageLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ImageLinks to fetch.
     */
    orderBy?: ImageLinkOrderByWithRelationInput | ImageLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ImageLinks.
     */
    cursor?: ImageLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ImageLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ImageLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ImageLinks.
     */
    distinct?: ImageLinkScalarFieldEnum | ImageLinkScalarFieldEnum[]
  }

  /**
   * ImageLink findMany
   */
  export type ImageLinkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageLink
     */
    select?: ImageLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImageLink
     */
    omit?: ImageLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageLinkInclude<ExtArgs> | null
    /**
     * Filter, which ImageLinks to fetch.
     */
    where?: ImageLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ImageLinks to fetch.
     */
    orderBy?: ImageLinkOrderByWithRelationInput | ImageLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ImageLinks.
     */
    cursor?: ImageLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ImageLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ImageLinks.
     */
    skip?: number
    distinct?: ImageLinkScalarFieldEnum | ImageLinkScalarFieldEnum[]
  }

  /**
   * ImageLink create
   */
  export type ImageLinkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageLink
     */
    select?: ImageLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImageLink
     */
    omit?: ImageLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageLinkInclude<ExtArgs> | null
    /**
     * The data needed to create a ImageLink.
     */
    data: XOR<ImageLinkCreateInput, ImageLinkUncheckedCreateInput>
  }

  /**
   * ImageLink createMany
   */
  export type ImageLinkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ImageLinks.
     */
    data: ImageLinkCreateManyInput | ImageLinkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ImageLink createManyAndReturn
   */
  export type ImageLinkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageLink
     */
    select?: ImageLinkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ImageLink
     */
    omit?: ImageLinkOmit<ExtArgs> | null
    /**
     * The data used to create many ImageLinks.
     */
    data: ImageLinkCreateManyInput | ImageLinkCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageLinkIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ImageLink update
   */
  export type ImageLinkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageLink
     */
    select?: ImageLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImageLink
     */
    omit?: ImageLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageLinkInclude<ExtArgs> | null
    /**
     * The data needed to update a ImageLink.
     */
    data: XOR<ImageLinkUpdateInput, ImageLinkUncheckedUpdateInput>
    /**
     * Choose, which ImageLink to update.
     */
    where: ImageLinkWhereUniqueInput
  }

  /**
   * ImageLink updateMany
   */
  export type ImageLinkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ImageLinks.
     */
    data: XOR<ImageLinkUpdateManyMutationInput, ImageLinkUncheckedUpdateManyInput>
    /**
     * Filter which ImageLinks to update
     */
    where?: ImageLinkWhereInput
    /**
     * Limit how many ImageLinks to update.
     */
    limit?: number
  }

  /**
   * ImageLink updateManyAndReturn
   */
  export type ImageLinkUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageLink
     */
    select?: ImageLinkSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ImageLink
     */
    omit?: ImageLinkOmit<ExtArgs> | null
    /**
     * The data used to update ImageLinks.
     */
    data: XOR<ImageLinkUpdateManyMutationInput, ImageLinkUncheckedUpdateManyInput>
    /**
     * Filter which ImageLinks to update
     */
    where?: ImageLinkWhereInput
    /**
     * Limit how many ImageLinks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageLinkIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ImageLink upsert
   */
  export type ImageLinkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageLink
     */
    select?: ImageLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImageLink
     */
    omit?: ImageLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageLinkInclude<ExtArgs> | null
    /**
     * The filter to search for the ImageLink to update in case it exists.
     */
    where: ImageLinkWhereUniqueInput
    /**
     * In case the ImageLink found by the `where` argument doesn't exist, create a new ImageLink with this data.
     */
    create: XOR<ImageLinkCreateInput, ImageLinkUncheckedCreateInput>
    /**
     * In case the ImageLink was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImageLinkUpdateInput, ImageLinkUncheckedUpdateInput>
  }

  /**
   * ImageLink delete
   */
  export type ImageLinkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageLink
     */
    select?: ImageLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImageLink
     */
    omit?: ImageLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageLinkInclude<ExtArgs> | null
    /**
     * Filter which ImageLink to delete.
     */
    where: ImageLinkWhereUniqueInput
  }

  /**
   * ImageLink deleteMany
   */
  export type ImageLinkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ImageLinks to delete
     */
    where?: ImageLinkWhereInput
    /**
     * Limit how many ImageLinks to delete.
     */
    limit?: number
  }

  /**
   * ImageLink.organization
   */
  export type ImageLink$organizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    where?: OrganizationWhereInput
  }

  /**
   * ImageLink.event
   */
  export type ImageLink$eventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
  }

  /**
   * ImageLink without action
   */
  export type ImageLinkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageLink
     */
    select?: ImageLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImageLink
     */
    omit?: ImageLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageLinkInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    role: 'role',
    is_verified: 'is_verified',
    supabase_id: 'supabase_id',
    phone: 'phone',
    avatar_url: 'avatar_url',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const OrganizationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    contact_email: 'contact_email',
    phone: 'phone',
    address: 'address',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const PromoCodeScalarFieldEnum: {
    id: 'id',
    code: 'code',
    description: 'description',
    discount_type: 'discount_type',
    discount_value: 'discount_value',
    max_uses: 'max_uses',
    uses: 'uses',
    valid_from: 'valid_from',
    valid_until: 'valid_until',
    is_active: 'is_active',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type PromoCodeScalarFieldEnum = (typeof PromoCodeScalarFieldEnum)[keyof typeof PromoCodeScalarFieldEnum]


  export const OrderPromoScalarFieldEnum: {
    id: 'id',
    order_id: 'order_id',
    promo_code_id: 'promo_code_id',
    discount_applied: 'discount_applied',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type OrderPromoScalarFieldEnum = (typeof OrderPromoScalarFieldEnum)[keyof typeof OrderPromoScalarFieldEnum]


  export const ReferralCodeScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    code: 'code',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ReferralCodeScalarFieldEnum = (typeof ReferralCodeScalarFieldEnum)[keyof typeof ReferralCodeScalarFieldEnum]


  export const EmailLogScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    event_id: 'event_id',
    email_type: 'email_type',
    subject: 'subject',
    status: 'status',
    sent_at: 'sent_at',
    error_message: 'error_message',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type EmailLogScalarFieldEnum = (typeof EmailLogScalarFieldEnum)[keyof typeof EmailLogScalarFieldEnum]


  export const WebhookLogScalarFieldEnum: {
    id: 'id',
    target_url: 'target_url',
    event_type: 'event_type',
    order_id: 'order_id',
    event_id: 'event_id',
    user_id: 'user_id',
    payload: 'payload',
    status_code: 'status_code',
    response_text: 'response_text',
    triggered_at: 'triggered_at',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type WebhookLogScalarFieldEnum = (typeof WebhookLogScalarFieldEnum)[keyof typeof WebhookLogScalarFieldEnum]


  export const WebhookSubscriptionScalarFieldEnum: {
    id: 'id',
    organization_id: 'organization_id',
    target_url: 'target_url',
    event_type: 'event_type',
    is_active: 'is_active',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type WebhookSubscriptionScalarFieldEnum = (typeof WebhookSubscriptionScalarFieldEnum)[keyof typeof WebhookSubscriptionScalarFieldEnum]


  export const TrackingVisitScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    event_id: 'event_id',
    utm_source: 'utm_source',
    utm_medium: 'utm_medium',
    utm_campaign: 'utm_campaign',
    utm_content: 'utm_content',
    referrer_url: 'referrer_url',
    landing_page: 'landing_page',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type TrackingVisitScalarFieldEnum = (typeof TrackingVisitScalarFieldEnum)[keyof typeof TrackingVisitScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    organization_id: 'organization_id',
    name: 'name',
    description: 'description',
    date: 'date',
    location: 'location',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const TicketScalarFieldEnum: {
    id: 'id',
    event_id: 'event_id',
    name: 'name',
    price: 'price',
    type: 'type',
    total: 'total',
    sold: 'sold',
    start_sale_date: 'start_sale_date',
    end_sale_date: 'end_sale_date',
    is_active: 'is_active',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type TicketScalarFieldEnum = (typeof TicketScalarFieldEnum)[keyof typeof TicketScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    status: 'status',
    payment_method: 'payment_method',
    amount: 'amount',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const OrderItemScalarFieldEnum: {
    id: 'id',
    order_id: 'order_id',
    ticket_id: 'ticket_id',
    quantity: 'quantity',
    price_snapshot: 'price_snapshot',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type OrderItemScalarFieldEnum = (typeof OrderItemScalarFieldEnum)[keyof typeof OrderItemScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    order_id: 'order_id',
    gateway: 'gateway',
    status: 'status',
    txn_code: 'txn_code',
    paid_at: 'paid_at',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const CheckinLogScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    ticket_id: 'ticket_id',
    event_id: 'event_id',
    checkin_time: 'checkin_time',
    verified_by: 'verified_by',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type CheckinLogScalarFieldEnum = (typeof CheckinLogScalarFieldEnum)[keyof typeof CheckinLogScalarFieldEnum]


  export const UserOrganizationScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    organization_id: 'organization_id',
    role: 'role',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UserOrganizationScalarFieldEnum = (typeof UserOrganizationScalarFieldEnum)[keyof typeof UserOrganizationScalarFieldEnum]


  export const EventSettingScalarFieldEnum: {
    id: 'id',
    event_id: 'event_id',
    setting_key: 'setting_key',
    setting_value: 'setting_value',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type EventSettingScalarFieldEnum = (typeof EventSettingScalarFieldEnum)[keyof typeof EventSettingScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    id: 'id',
    file_path: 'file_path',
    file_name: 'file_name',
    file_type: 'file_type',
    file_size: 'file_size',
    alt_text: 'alt_text',
    uploaded_by: 'uploaded_by',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const ImageLinkScalarFieldEnum: {
    id: 'id',
    image_id: 'image_id',
    entity_type: 'entity_type',
    entity_id: 'entity_id',
    organization_id: 'organization_id',
    event_id: 'event_id',
    usage_type: 'usage_type',
    linked_at: 'linked_at',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ImageLinkScalarFieldEnum = (typeof ImageLinkScalarFieldEnum)[keyof typeof ImageLinkScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    is_verified?: BoolFilter<"User"> | boolean
    supabase_id?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    avatar_url?: StringNullableFilter<"User"> | string | null
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    referral_codes?: ReferralCodeListRelationFilter
    email_logs?: EmailLogListRelationFilter
    orders?: OrderListRelationFilter
    checkin_logs?: CheckinLogListRelationFilter
    user_organizations?: UserOrganizationListRelationFilter
    tracking_visits?: TrackingVisitListRelationFilter
    webhook_logs?: WebhookLogListRelationFilter
    images?: ImageListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    role?: SortOrder
    is_verified?: SortOrder
    supabase_id?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    avatar_url?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    referral_codes?: ReferralCodeOrderByRelationAggregateInput
    email_logs?: EmailLogOrderByRelationAggregateInput
    orders?: OrderOrderByRelationAggregateInput
    checkin_logs?: CheckinLogOrderByRelationAggregateInput
    user_organizations?: UserOrganizationOrderByRelationAggregateInput
    tracking_visits?: TrackingVisitOrderByRelationAggregateInput
    webhook_logs?: WebhookLogOrderByRelationAggregateInput
    images?: ImageOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    supabase_id?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    is_verified?: BoolFilter<"User"> | boolean
    phone?: StringNullableFilter<"User"> | string | null
    avatar_url?: StringNullableFilter<"User"> | string | null
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    referral_codes?: ReferralCodeListRelationFilter
    email_logs?: EmailLogListRelationFilter
    orders?: OrderListRelationFilter
    checkin_logs?: CheckinLogListRelationFilter
    user_organizations?: UserOrganizationListRelationFilter
    tracking_visits?: TrackingVisitListRelationFilter
    webhook_logs?: WebhookLogListRelationFilter
    images?: ImageListRelationFilter
  }, "id" | "email" | "supabase_id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    role?: SortOrder
    is_verified?: SortOrder
    supabase_id?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    avatar_url?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    is_verified?: BoolWithAggregatesFilter<"User"> | boolean
    supabase_id?: StringNullableWithAggregatesFilter<"User"> | string | null
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatar_url?: StringNullableWithAggregatesFilter<"User"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type OrganizationWhereInput = {
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    id?: IntFilter<"Organization"> | number
    name?: StringFilter<"Organization"> | string
    contact_email?: StringNullableFilter<"Organization"> | string | null
    phone?: StringNullableFilter<"Organization"> | string | null
    address?: StringNullableFilter<"Organization"> | string | null
    created_at?: DateTimeFilter<"Organization"> | Date | string
    updated_at?: DateTimeFilter<"Organization"> | Date | string
    events?: EventListRelationFilter
    webhook_subscriptions?: WebhookSubscriptionListRelationFilter
    user_organizations?: UserOrganizationListRelationFilter
    image_links?: ImageLinkListRelationFilter
  }

  export type OrganizationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    contact_email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    events?: EventOrderByRelationAggregateInput
    webhook_subscriptions?: WebhookSubscriptionOrderByRelationAggregateInput
    user_organizations?: UserOrganizationOrderByRelationAggregateInput
    image_links?: ImageLinkOrderByRelationAggregateInput
  }

  export type OrganizationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    name?: StringFilter<"Organization"> | string
    contact_email?: StringNullableFilter<"Organization"> | string | null
    phone?: StringNullableFilter<"Organization"> | string | null
    address?: StringNullableFilter<"Organization"> | string | null
    created_at?: DateTimeFilter<"Organization"> | Date | string
    updated_at?: DateTimeFilter<"Organization"> | Date | string
    events?: EventListRelationFilter
    webhook_subscriptions?: WebhookSubscriptionListRelationFilter
    user_organizations?: UserOrganizationListRelationFilter
    image_links?: ImageLinkListRelationFilter
  }, "id">

  export type OrganizationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    contact_email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: OrganizationCountOrderByAggregateInput
    _avg?: OrganizationAvgOrderByAggregateInput
    _max?: OrganizationMaxOrderByAggregateInput
    _min?: OrganizationMinOrderByAggregateInput
    _sum?: OrganizationSumOrderByAggregateInput
  }

  export type OrganizationScalarWhereWithAggregatesInput = {
    AND?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    OR?: OrganizationScalarWhereWithAggregatesInput[]
    NOT?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Organization"> | number
    name?: StringWithAggregatesFilter<"Organization"> | string
    contact_email?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    address?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
  }

  export type PromoCodeWhereInput = {
    AND?: PromoCodeWhereInput | PromoCodeWhereInput[]
    OR?: PromoCodeWhereInput[]
    NOT?: PromoCodeWhereInput | PromoCodeWhereInput[]
    id?: IntFilter<"PromoCode"> | number
    code?: StringFilter<"PromoCode"> | string
    description?: StringNullableFilter<"PromoCode"> | string | null
    discount_type?: StringFilter<"PromoCode"> | string
    discount_value?: DecimalFilter<"PromoCode"> | Decimal | DecimalJsLike | number | string
    max_uses?: IntFilter<"PromoCode"> | number
    uses?: IntFilter<"PromoCode"> | number
    valid_from?: DateTimeNullableFilter<"PromoCode"> | Date | string | null
    valid_until?: DateTimeNullableFilter<"PromoCode"> | Date | string | null
    is_active?: BoolFilter<"PromoCode"> | boolean
    created_at?: DateTimeFilter<"PromoCode"> | Date | string
    updated_at?: DateTimeFilter<"PromoCode"> | Date | string
    order_promos?: OrderPromoListRelationFilter
  }

  export type PromoCodeOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    discount_type?: SortOrder
    discount_value?: SortOrder
    max_uses?: SortOrder
    uses?: SortOrder
    valid_from?: SortOrderInput | SortOrder
    valid_until?: SortOrderInput | SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    order_promos?: OrderPromoOrderByRelationAggregateInput
  }

  export type PromoCodeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: PromoCodeWhereInput | PromoCodeWhereInput[]
    OR?: PromoCodeWhereInput[]
    NOT?: PromoCodeWhereInput | PromoCodeWhereInput[]
    description?: StringNullableFilter<"PromoCode"> | string | null
    discount_type?: StringFilter<"PromoCode"> | string
    discount_value?: DecimalFilter<"PromoCode"> | Decimal | DecimalJsLike | number | string
    max_uses?: IntFilter<"PromoCode"> | number
    uses?: IntFilter<"PromoCode"> | number
    valid_from?: DateTimeNullableFilter<"PromoCode"> | Date | string | null
    valid_until?: DateTimeNullableFilter<"PromoCode"> | Date | string | null
    is_active?: BoolFilter<"PromoCode"> | boolean
    created_at?: DateTimeFilter<"PromoCode"> | Date | string
    updated_at?: DateTimeFilter<"PromoCode"> | Date | string
    order_promos?: OrderPromoListRelationFilter
  }, "id" | "code">

  export type PromoCodeOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    discount_type?: SortOrder
    discount_value?: SortOrder
    max_uses?: SortOrder
    uses?: SortOrder
    valid_from?: SortOrderInput | SortOrder
    valid_until?: SortOrderInput | SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: PromoCodeCountOrderByAggregateInput
    _avg?: PromoCodeAvgOrderByAggregateInput
    _max?: PromoCodeMaxOrderByAggregateInput
    _min?: PromoCodeMinOrderByAggregateInput
    _sum?: PromoCodeSumOrderByAggregateInput
  }

  export type PromoCodeScalarWhereWithAggregatesInput = {
    AND?: PromoCodeScalarWhereWithAggregatesInput | PromoCodeScalarWhereWithAggregatesInput[]
    OR?: PromoCodeScalarWhereWithAggregatesInput[]
    NOT?: PromoCodeScalarWhereWithAggregatesInput | PromoCodeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PromoCode"> | number
    code?: StringWithAggregatesFilter<"PromoCode"> | string
    description?: StringNullableWithAggregatesFilter<"PromoCode"> | string | null
    discount_type?: StringWithAggregatesFilter<"PromoCode"> | string
    discount_value?: DecimalWithAggregatesFilter<"PromoCode"> | Decimal | DecimalJsLike | number | string
    max_uses?: IntWithAggregatesFilter<"PromoCode"> | number
    uses?: IntWithAggregatesFilter<"PromoCode"> | number
    valid_from?: DateTimeNullableWithAggregatesFilter<"PromoCode"> | Date | string | null
    valid_until?: DateTimeNullableWithAggregatesFilter<"PromoCode"> | Date | string | null
    is_active?: BoolWithAggregatesFilter<"PromoCode"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"PromoCode"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"PromoCode"> | Date | string
  }

  export type OrderPromoWhereInput = {
    AND?: OrderPromoWhereInput | OrderPromoWhereInput[]
    OR?: OrderPromoWhereInput[]
    NOT?: OrderPromoWhereInput | OrderPromoWhereInput[]
    id?: IntFilter<"OrderPromo"> | number
    order_id?: IntFilter<"OrderPromo"> | number
    promo_code_id?: IntFilter<"OrderPromo"> | number
    discount_applied?: DecimalFilter<"OrderPromo"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"OrderPromo"> | Date | string
    updated_at?: DateTimeFilter<"OrderPromo"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    promo_code?: XOR<PromoCodeScalarRelationFilter, PromoCodeWhereInput>
  }

  export type OrderPromoOrderByWithRelationInput = {
    id?: SortOrder
    order_id?: SortOrder
    promo_code_id?: SortOrder
    discount_applied?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    order?: OrderOrderByWithRelationInput
    promo_code?: PromoCodeOrderByWithRelationInput
  }

  export type OrderPromoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrderPromoWhereInput | OrderPromoWhereInput[]
    OR?: OrderPromoWhereInput[]
    NOT?: OrderPromoWhereInput | OrderPromoWhereInput[]
    order_id?: IntFilter<"OrderPromo"> | number
    promo_code_id?: IntFilter<"OrderPromo"> | number
    discount_applied?: DecimalFilter<"OrderPromo"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"OrderPromo"> | Date | string
    updated_at?: DateTimeFilter<"OrderPromo"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    promo_code?: XOR<PromoCodeScalarRelationFilter, PromoCodeWhereInput>
  }, "id">

  export type OrderPromoOrderByWithAggregationInput = {
    id?: SortOrder
    order_id?: SortOrder
    promo_code_id?: SortOrder
    discount_applied?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: OrderPromoCountOrderByAggregateInput
    _avg?: OrderPromoAvgOrderByAggregateInput
    _max?: OrderPromoMaxOrderByAggregateInput
    _min?: OrderPromoMinOrderByAggregateInput
    _sum?: OrderPromoSumOrderByAggregateInput
  }

  export type OrderPromoScalarWhereWithAggregatesInput = {
    AND?: OrderPromoScalarWhereWithAggregatesInput | OrderPromoScalarWhereWithAggregatesInput[]
    OR?: OrderPromoScalarWhereWithAggregatesInput[]
    NOT?: OrderPromoScalarWhereWithAggregatesInput | OrderPromoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OrderPromo"> | number
    order_id?: IntWithAggregatesFilter<"OrderPromo"> | number
    promo_code_id?: IntWithAggregatesFilter<"OrderPromo"> | number
    discount_applied?: DecimalWithAggregatesFilter<"OrderPromo"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeWithAggregatesFilter<"OrderPromo"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"OrderPromo"> | Date | string
  }

  export type ReferralCodeWhereInput = {
    AND?: ReferralCodeWhereInput | ReferralCodeWhereInput[]
    OR?: ReferralCodeWhereInput[]
    NOT?: ReferralCodeWhereInput | ReferralCodeWhereInput[]
    id?: IntFilter<"ReferralCode"> | number
    user_id?: StringFilter<"ReferralCode"> | string
    code?: StringFilter<"ReferralCode"> | string
    created_at?: DateTimeFilter<"ReferralCode"> | Date | string
    updated_at?: DateTimeFilter<"ReferralCode"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ReferralCodeOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    code?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ReferralCodeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: ReferralCodeWhereInput | ReferralCodeWhereInput[]
    OR?: ReferralCodeWhereInput[]
    NOT?: ReferralCodeWhereInput | ReferralCodeWhereInput[]
    user_id?: StringFilter<"ReferralCode"> | string
    created_at?: DateTimeFilter<"ReferralCode"> | Date | string
    updated_at?: DateTimeFilter<"ReferralCode"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "code">

  export type ReferralCodeOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    code?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: ReferralCodeCountOrderByAggregateInput
    _avg?: ReferralCodeAvgOrderByAggregateInput
    _max?: ReferralCodeMaxOrderByAggregateInput
    _min?: ReferralCodeMinOrderByAggregateInput
    _sum?: ReferralCodeSumOrderByAggregateInput
  }

  export type ReferralCodeScalarWhereWithAggregatesInput = {
    AND?: ReferralCodeScalarWhereWithAggregatesInput | ReferralCodeScalarWhereWithAggregatesInput[]
    OR?: ReferralCodeScalarWhereWithAggregatesInput[]
    NOT?: ReferralCodeScalarWhereWithAggregatesInput | ReferralCodeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ReferralCode"> | number
    user_id?: StringWithAggregatesFilter<"ReferralCode"> | string
    code?: StringWithAggregatesFilter<"ReferralCode"> | string
    created_at?: DateTimeWithAggregatesFilter<"ReferralCode"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"ReferralCode"> | Date | string
  }

  export type EmailLogWhereInput = {
    AND?: EmailLogWhereInput | EmailLogWhereInput[]
    OR?: EmailLogWhereInput[]
    NOT?: EmailLogWhereInput | EmailLogWhereInput[]
    id?: IntFilter<"EmailLog"> | number
    user_id?: StringFilter<"EmailLog"> | string
    event_id?: IntNullableFilter<"EmailLog"> | number | null
    email_type?: StringFilter<"EmailLog"> | string
    subject?: StringFilter<"EmailLog"> | string
    status?: StringFilter<"EmailLog"> | string
    sent_at?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    error_message?: StringNullableFilter<"EmailLog"> | string | null
    created_at?: DateTimeFilter<"EmailLog"> | Date | string
    updated_at?: DateTimeFilter<"EmailLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    event?: XOR<EventNullableScalarRelationFilter, EventWhereInput> | null
  }

  export type EmailLogOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    event_id?: SortOrderInput | SortOrder
    email_type?: SortOrder
    subject?: SortOrder
    status?: SortOrder
    sent_at?: SortOrderInput | SortOrder
    error_message?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user?: UserOrderByWithRelationInput
    event?: EventOrderByWithRelationInput
  }

  export type EmailLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EmailLogWhereInput | EmailLogWhereInput[]
    OR?: EmailLogWhereInput[]
    NOT?: EmailLogWhereInput | EmailLogWhereInput[]
    user_id?: StringFilter<"EmailLog"> | string
    event_id?: IntNullableFilter<"EmailLog"> | number | null
    email_type?: StringFilter<"EmailLog"> | string
    subject?: StringFilter<"EmailLog"> | string
    status?: StringFilter<"EmailLog"> | string
    sent_at?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    error_message?: StringNullableFilter<"EmailLog"> | string | null
    created_at?: DateTimeFilter<"EmailLog"> | Date | string
    updated_at?: DateTimeFilter<"EmailLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    event?: XOR<EventNullableScalarRelationFilter, EventWhereInput> | null
  }, "id">

  export type EmailLogOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    event_id?: SortOrderInput | SortOrder
    email_type?: SortOrder
    subject?: SortOrder
    status?: SortOrder
    sent_at?: SortOrderInput | SortOrder
    error_message?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: EmailLogCountOrderByAggregateInput
    _avg?: EmailLogAvgOrderByAggregateInput
    _max?: EmailLogMaxOrderByAggregateInput
    _min?: EmailLogMinOrderByAggregateInput
    _sum?: EmailLogSumOrderByAggregateInput
  }

  export type EmailLogScalarWhereWithAggregatesInput = {
    AND?: EmailLogScalarWhereWithAggregatesInput | EmailLogScalarWhereWithAggregatesInput[]
    OR?: EmailLogScalarWhereWithAggregatesInput[]
    NOT?: EmailLogScalarWhereWithAggregatesInput | EmailLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EmailLog"> | number
    user_id?: StringWithAggregatesFilter<"EmailLog"> | string
    event_id?: IntNullableWithAggregatesFilter<"EmailLog"> | number | null
    email_type?: StringWithAggregatesFilter<"EmailLog"> | string
    subject?: StringWithAggregatesFilter<"EmailLog"> | string
    status?: StringWithAggregatesFilter<"EmailLog"> | string
    sent_at?: DateTimeNullableWithAggregatesFilter<"EmailLog"> | Date | string | null
    error_message?: StringNullableWithAggregatesFilter<"EmailLog"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"EmailLog"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"EmailLog"> | Date | string
  }

  export type WebhookLogWhereInput = {
    AND?: WebhookLogWhereInput | WebhookLogWhereInput[]
    OR?: WebhookLogWhereInput[]
    NOT?: WebhookLogWhereInput | WebhookLogWhereInput[]
    id?: IntFilter<"WebhookLog"> | number
    target_url?: StringFilter<"WebhookLog"> | string
    event_type?: StringFilter<"WebhookLog"> | string
    order_id?: IntNullableFilter<"WebhookLog"> | number | null
    event_id?: IntNullableFilter<"WebhookLog"> | number | null
    user_id?: StringNullableFilter<"WebhookLog"> | string | null
    payload?: StringFilter<"WebhookLog"> | string
    status_code?: IntFilter<"WebhookLog"> | number
    response_text?: StringNullableFilter<"WebhookLog"> | string | null
    triggered_at?: DateTimeFilter<"WebhookLog"> | Date | string
    created_at?: DateTimeFilter<"WebhookLog"> | Date | string
    updated_at?: DateTimeFilter<"WebhookLog"> | Date | string
    order?: XOR<OrderNullableScalarRelationFilter, OrderWhereInput> | null
    event?: XOR<EventNullableScalarRelationFilter, EventWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type WebhookLogOrderByWithRelationInput = {
    id?: SortOrder
    target_url?: SortOrder
    event_type?: SortOrder
    order_id?: SortOrderInput | SortOrder
    event_id?: SortOrderInput | SortOrder
    user_id?: SortOrderInput | SortOrder
    payload?: SortOrder
    status_code?: SortOrder
    response_text?: SortOrderInput | SortOrder
    triggered_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    order?: OrderOrderByWithRelationInput
    event?: EventOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type WebhookLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WebhookLogWhereInput | WebhookLogWhereInput[]
    OR?: WebhookLogWhereInput[]
    NOT?: WebhookLogWhereInput | WebhookLogWhereInput[]
    target_url?: StringFilter<"WebhookLog"> | string
    event_type?: StringFilter<"WebhookLog"> | string
    order_id?: IntNullableFilter<"WebhookLog"> | number | null
    event_id?: IntNullableFilter<"WebhookLog"> | number | null
    user_id?: StringNullableFilter<"WebhookLog"> | string | null
    payload?: StringFilter<"WebhookLog"> | string
    status_code?: IntFilter<"WebhookLog"> | number
    response_text?: StringNullableFilter<"WebhookLog"> | string | null
    triggered_at?: DateTimeFilter<"WebhookLog"> | Date | string
    created_at?: DateTimeFilter<"WebhookLog"> | Date | string
    updated_at?: DateTimeFilter<"WebhookLog"> | Date | string
    order?: XOR<OrderNullableScalarRelationFilter, OrderWhereInput> | null
    event?: XOR<EventNullableScalarRelationFilter, EventWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type WebhookLogOrderByWithAggregationInput = {
    id?: SortOrder
    target_url?: SortOrder
    event_type?: SortOrder
    order_id?: SortOrderInput | SortOrder
    event_id?: SortOrderInput | SortOrder
    user_id?: SortOrderInput | SortOrder
    payload?: SortOrder
    status_code?: SortOrder
    response_text?: SortOrderInput | SortOrder
    triggered_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: WebhookLogCountOrderByAggregateInput
    _avg?: WebhookLogAvgOrderByAggregateInput
    _max?: WebhookLogMaxOrderByAggregateInput
    _min?: WebhookLogMinOrderByAggregateInput
    _sum?: WebhookLogSumOrderByAggregateInput
  }

  export type WebhookLogScalarWhereWithAggregatesInput = {
    AND?: WebhookLogScalarWhereWithAggregatesInput | WebhookLogScalarWhereWithAggregatesInput[]
    OR?: WebhookLogScalarWhereWithAggregatesInput[]
    NOT?: WebhookLogScalarWhereWithAggregatesInput | WebhookLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WebhookLog"> | number
    target_url?: StringWithAggregatesFilter<"WebhookLog"> | string
    event_type?: StringWithAggregatesFilter<"WebhookLog"> | string
    order_id?: IntNullableWithAggregatesFilter<"WebhookLog"> | number | null
    event_id?: IntNullableWithAggregatesFilter<"WebhookLog"> | number | null
    user_id?: StringNullableWithAggregatesFilter<"WebhookLog"> | string | null
    payload?: StringWithAggregatesFilter<"WebhookLog"> | string
    status_code?: IntWithAggregatesFilter<"WebhookLog"> | number
    response_text?: StringNullableWithAggregatesFilter<"WebhookLog"> | string | null
    triggered_at?: DateTimeWithAggregatesFilter<"WebhookLog"> | Date | string
    created_at?: DateTimeWithAggregatesFilter<"WebhookLog"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"WebhookLog"> | Date | string
  }

  export type WebhookSubscriptionWhereInput = {
    AND?: WebhookSubscriptionWhereInput | WebhookSubscriptionWhereInput[]
    OR?: WebhookSubscriptionWhereInput[]
    NOT?: WebhookSubscriptionWhereInput | WebhookSubscriptionWhereInput[]
    id?: IntFilter<"WebhookSubscription"> | number
    organization_id?: IntFilter<"WebhookSubscription"> | number
    target_url?: StringFilter<"WebhookSubscription"> | string
    event_type?: StringFilter<"WebhookSubscription"> | string
    is_active?: BoolFilter<"WebhookSubscription"> | boolean
    created_at?: DateTimeFilter<"WebhookSubscription"> | Date | string
    updated_at?: DateTimeFilter<"WebhookSubscription"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }

  export type WebhookSubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    organization_id?: SortOrder
    target_url?: SortOrder
    event_type?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
  }

  export type WebhookSubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WebhookSubscriptionWhereInput | WebhookSubscriptionWhereInput[]
    OR?: WebhookSubscriptionWhereInput[]
    NOT?: WebhookSubscriptionWhereInput | WebhookSubscriptionWhereInput[]
    organization_id?: IntFilter<"WebhookSubscription"> | number
    target_url?: StringFilter<"WebhookSubscription"> | string
    event_type?: StringFilter<"WebhookSubscription"> | string
    is_active?: BoolFilter<"WebhookSubscription"> | boolean
    created_at?: DateTimeFilter<"WebhookSubscription"> | Date | string
    updated_at?: DateTimeFilter<"WebhookSubscription"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }, "id">

  export type WebhookSubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    organization_id?: SortOrder
    target_url?: SortOrder
    event_type?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: WebhookSubscriptionCountOrderByAggregateInput
    _avg?: WebhookSubscriptionAvgOrderByAggregateInput
    _max?: WebhookSubscriptionMaxOrderByAggregateInput
    _min?: WebhookSubscriptionMinOrderByAggregateInput
    _sum?: WebhookSubscriptionSumOrderByAggregateInput
  }

  export type WebhookSubscriptionScalarWhereWithAggregatesInput = {
    AND?: WebhookSubscriptionScalarWhereWithAggregatesInput | WebhookSubscriptionScalarWhereWithAggregatesInput[]
    OR?: WebhookSubscriptionScalarWhereWithAggregatesInput[]
    NOT?: WebhookSubscriptionScalarWhereWithAggregatesInput | WebhookSubscriptionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WebhookSubscription"> | number
    organization_id?: IntWithAggregatesFilter<"WebhookSubscription"> | number
    target_url?: StringWithAggregatesFilter<"WebhookSubscription"> | string
    event_type?: StringWithAggregatesFilter<"WebhookSubscription"> | string
    is_active?: BoolWithAggregatesFilter<"WebhookSubscription"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"WebhookSubscription"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"WebhookSubscription"> | Date | string
  }

  export type TrackingVisitWhereInput = {
    AND?: TrackingVisitWhereInput | TrackingVisitWhereInput[]
    OR?: TrackingVisitWhereInput[]
    NOT?: TrackingVisitWhereInput | TrackingVisitWhereInput[]
    id?: IntFilter<"TrackingVisit"> | number
    user_id?: StringNullableFilter<"TrackingVisit"> | string | null
    event_id?: IntFilter<"TrackingVisit"> | number
    utm_source?: StringNullableFilter<"TrackingVisit"> | string | null
    utm_medium?: StringNullableFilter<"TrackingVisit"> | string | null
    utm_campaign?: StringNullableFilter<"TrackingVisit"> | string | null
    utm_content?: StringNullableFilter<"TrackingVisit"> | string | null
    referrer_url?: StringNullableFilter<"TrackingVisit"> | string | null
    landing_page?: StringNullableFilter<"TrackingVisit"> | string | null
    created_at?: DateTimeFilter<"TrackingVisit"> | Date | string
    updated_at?: DateTimeFilter<"TrackingVisit"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
  }

  export type TrackingVisitOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    event_id?: SortOrder
    utm_source?: SortOrderInput | SortOrder
    utm_medium?: SortOrderInput | SortOrder
    utm_campaign?: SortOrderInput | SortOrder
    utm_content?: SortOrderInput | SortOrder
    referrer_url?: SortOrderInput | SortOrder
    landing_page?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user?: UserOrderByWithRelationInput
    event?: EventOrderByWithRelationInput
  }

  export type TrackingVisitWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TrackingVisitWhereInput | TrackingVisitWhereInput[]
    OR?: TrackingVisitWhereInput[]
    NOT?: TrackingVisitWhereInput | TrackingVisitWhereInput[]
    user_id?: StringNullableFilter<"TrackingVisit"> | string | null
    event_id?: IntFilter<"TrackingVisit"> | number
    utm_source?: StringNullableFilter<"TrackingVisit"> | string | null
    utm_medium?: StringNullableFilter<"TrackingVisit"> | string | null
    utm_campaign?: StringNullableFilter<"TrackingVisit"> | string | null
    utm_content?: StringNullableFilter<"TrackingVisit"> | string | null
    referrer_url?: StringNullableFilter<"TrackingVisit"> | string | null
    landing_page?: StringNullableFilter<"TrackingVisit"> | string | null
    created_at?: DateTimeFilter<"TrackingVisit"> | Date | string
    updated_at?: DateTimeFilter<"TrackingVisit"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
  }, "id">

  export type TrackingVisitOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    event_id?: SortOrder
    utm_source?: SortOrderInput | SortOrder
    utm_medium?: SortOrderInput | SortOrder
    utm_campaign?: SortOrderInput | SortOrder
    utm_content?: SortOrderInput | SortOrder
    referrer_url?: SortOrderInput | SortOrder
    landing_page?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: TrackingVisitCountOrderByAggregateInput
    _avg?: TrackingVisitAvgOrderByAggregateInput
    _max?: TrackingVisitMaxOrderByAggregateInput
    _min?: TrackingVisitMinOrderByAggregateInput
    _sum?: TrackingVisitSumOrderByAggregateInput
  }

  export type TrackingVisitScalarWhereWithAggregatesInput = {
    AND?: TrackingVisitScalarWhereWithAggregatesInput | TrackingVisitScalarWhereWithAggregatesInput[]
    OR?: TrackingVisitScalarWhereWithAggregatesInput[]
    NOT?: TrackingVisitScalarWhereWithAggregatesInput | TrackingVisitScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TrackingVisit"> | number
    user_id?: StringNullableWithAggregatesFilter<"TrackingVisit"> | string | null
    event_id?: IntWithAggregatesFilter<"TrackingVisit"> | number
    utm_source?: StringNullableWithAggregatesFilter<"TrackingVisit"> | string | null
    utm_medium?: StringNullableWithAggregatesFilter<"TrackingVisit"> | string | null
    utm_campaign?: StringNullableWithAggregatesFilter<"TrackingVisit"> | string | null
    utm_content?: StringNullableWithAggregatesFilter<"TrackingVisit"> | string | null
    referrer_url?: StringNullableWithAggregatesFilter<"TrackingVisit"> | string | null
    landing_page?: StringNullableWithAggregatesFilter<"TrackingVisit"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"TrackingVisit"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"TrackingVisit"> | Date | string
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: IntFilter<"Event"> | number
    organization_id?: IntFilter<"Event"> | number
    name?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    date?: DateTimeFilter<"Event"> | Date | string
    location?: StringNullableFilter<"Event"> | string | null
    created_at?: DateTimeFilter<"Event"> | Date | string
    updated_at?: DateTimeFilter<"Event"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    tickets?: TicketListRelationFilter
    email_logs?: EmailLogListRelationFilter
    webhook_logs?: WebhookLogListRelationFilter
    checkin_logs?: CheckinLogListRelationFilter
    tracking_visits?: TrackingVisitListRelationFilter
    event_settings?: EventSettingListRelationFilter
    image_links?: ImageLinkListRelationFilter
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    organization_id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    date?: SortOrder
    location?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    tickets?: TicketOrderByRelationAggregateInput
    email_logs?: EmailLogOrderByRelationAggregateInput
    webhook_logs?: WebhookLogOrderByRelationAggregateInput
    checkin_logs?: CheckinLogOrderByRelationAggregateInput
    tracking_visits?: TrackingVisitOrderByRelationAggregateInput
    event_settings?: EventSettingOrderByRelationAggregateInput
    image_links?: ImageLinkOrderByRelationAggregateInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    organization_id?: IntFilter<"Event"> | number
    name?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    date?: DateTimeFilter<"Event"> | Date | string
    location?: StringNullableFilter<"Event"> | string | null
    created_at?: DateTimeFilter<"Event"> | Date | string
    updated_at?: DateTimeFilter<"Event"> | Date | string
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    tickets?: TicketListRelationFilter
    email_logs?: EmailLogListRelationFilter
    webhook_logs?: WebhookLogListRelationFilter
    checkin_logs?: CheckinLogListRelationFilter
    tracking_visits?: TrackingVisitListRelationFilter
    event_settings?: EventSettingListRelationFilter
    image_links?: ImageLinkListRelationFilter
  }, "id">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    organization_id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    date?: SortOrder
    location?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: EventCountOrderByAggregateInput
    _avg?: EventAvgOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
    _sum?: EventSumOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Event"> | number
    organization_id?: IntWithAggregatesFilter<"Event"> | number
    name?: StringWithAggregatesFilter<"Event"> | string
    description?: StringNullableWithAggregatesFilter<"Event"> | string | null
    date?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    location?: StringNullableWithAggregatesFilter<"Event"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Event"> | Date | string
  }

  export type TicketWhereInput = {
    AND?: TicketWhereInput | TicketWhereInput[]
    OR?: TicketWhereInput[]
    NOT?: TicketWhereInput | TicketWhereInput[]
    id?: IntFilter<"Ticket"> | number
    event_id?: IntFilter<"Ticket"> | number
    name?: StringFilter<"Ticket"> | string
    price?: DecimalFilter<"Ticket"> | Decimal | DecimalJsLike | number | string
    type?: StringFilter<"Ticket"> | string
    total?: IntFilter<"Ticket"> | number
    sold?: IntFilter<"Ticket"> | number
    start_sale_date?: DateTimeNullableFilter<"Ticket"> | Date | string | null
    end_sale_date?: DateTimeNullableFilter<"Ticket"> | Date | string | null
    is_active?: BoolFilter<"Ticket"> | boolean
    created_at?: DateTimeFilter<"Ticket"> | Date | string
    updated_at?: DateTimeFilter<"Ticket"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    order_items?: OrderItemListRelationFilter
    checkin_logs?: CheckinLogListRelationFilter
  }

  export type TicketOrderByWithRelationInput = {
    id?: SortOrder
    event_id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    type?: SortOrder
    total?: SortOrder
    sold?: SortOrder
    start_sale_date?: SortOrderInput | SortOrder
    end_sale_date?: SortOrderInput | SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    event?: EventOrderByWithRelationInput
    order_items?: OrderItemOrderByRelationAggregateInput
    checkin_logs?: CheckinLogOrderByRelationAggregateInput
  }

  export type TicketWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TicketWhereInput | TicketWhereInput[]
    OR?: TicketWhereInput[]
    NOT?: TicketWhereInput | TicketWhereInput[]
    event_id?: IntFilter<"Ticket"> | number
    name?: StringFilter<"Ticket"> | string
    price?: DecimalFilter<"Ticket"> | Decimal | DecimalJsLike | number | string
    type?: StringFilter<"Ticket"> | string
    total?: IntFilter<"Ticket"> | number
    sold?: IntFilter<"Ticket"> | number
    start_sale_date?: DateTimeNullableFilter<"Ticket"> | Date | string | null
    end_sale_date?: DateTimeNullableFilter<"Ticket"> | Date | string | null
    is_active?: BoolFilter<"Ticket"> | boolean
    created_at?: DateTimeFilter<"Ticket"> | Date | string
    updated_at?: DateTimeFilter<"Ticket"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    order_items?: OrderItemListRelationFilter
    checkin_logs?: CheckinLogListRelationFilter
  }, "id">

  export type TicketOrderByWithAggregationInput = {
    id?: SortOrder
    event_id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    type?: SortOrder
    total?: SortOrder
    sold?: SortOrder
    start_sale_date?: SortOrderInput | SortOrder
    end_sale_date?: SortOrderInput | SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: TicketCountOrderByAggregateInput
    _avg?: TicketAvgOrderByAggregateInput
    _max?: TicketMaxOrderByAggregateInput
    _min?: TicketMinOrderByAggregateInput
    _sum?: TicketSumOrderByAggregateInput
  }

  export type TicketScalarWhereWithAggregatesInput = {
    AND?: TicketScalarWhereWithAggregatesInput | TicketScalarWhereWithAggregatesInput[]
    OR?: TicketScalarWhereWithAggregatesInput[]
    NOT?: TicketScalarWhereWithAggregatesInput | TicketScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Ticket"> | number
    event_id?: IntWithAggregatesFilter<"Ticket"> | number
    name?: StringWithAggregatesFilter<"Ticket"> | string
    price?: DecimalWithAggregatesFilter<"Ticket"> | Decimal | DecimalJsLike | number | string
    type?: StringWithAggregatesFilter<"Ticket"> | string
    total?: IntWithAggregatesFilter<"Ticket"> | number
    sold?: IntWithAggregatesFilter<"Ticket"> | number
    start_sale_date?: DateTimeNullableWithAggregatesFilter<"Ticket"> | Date | string | null
    end_sale_date?: DateTimeNullableWithAggregatesFilter<"Ticket"> | Date | string | null
    is_active?: BoolWithAggregatesFilter<"Ticket"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"Ticket"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Ticket"> | Date | string
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: IntFilter<"Order"> | number
    user_id?: StringNullableFilter<"Order"> | string | null
    status?: StringFilter<"Order"> | string
    payment_method?: StringFilter<"Order"> | string
    amount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"Order"> | Date | string
    updated_at?: DateTimeFilter<"Order"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    order_items?: OrderItemListRelationFilter
    order_promos?: OrderPromoListRelationFilter
    payments?: PaymentListRelationFilter
    webhook_logs?: WebhookLogListRelationFilter
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    status?: SortOrder
    payment_method?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user?: UserOrderByWithRelationInput
    order_items?: OrderItemOrderByRelationAggregateInput
    order_promos?: OrderPromoOrderByRelationAggregateInput
    payments?: PaymentOrderByRelationAggregateInput
    webhook_logs?: WebhookLogOrderByRelationAggregateInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    user_id?: StringNullableFilter<"Order"> | string | null
    status?: StringFilter<"Order"> | string
    payment_method?: StringFilter<"Order"> | string
    amount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"Order"> | Date | string
    updated_at?: DateTimeFilter<"Order"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    order_items?: OrderItemListRelationFilter
    order_promos?: OrderPromoListRelationFilter
    payments?: PaymentListRelationFilter
    webhook_logs?: WebhookLogListRelationFilter
  }, "id">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    status?: SortOrder
    payment_method?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Order"> | number
    user_id?: StringNullableWithAggregatesFilter<"Order"> | string | null
    status?: StringWithAggregatesFilter<"Order"> | string
    payment_method?: StringWithAggregatesFilter<"Order"> | string
    amount?: DecimalWithAggregatesFilter<"Order"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Order"> | Date | string
  }

  export type OrderItemWhereInput = {
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    id?: IntFilter<"OrderItem"> | number
    order_id?: IntFilter<"OrderItem"> | number
    ticket_id?: IntFilter<"OrderItem"> | number
    quantity?: IntFilter<"OrderItem"> | number
    price_snapshot?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"OrderItem"> | Date | string
    updated_at?: DateTimeFilter<"OrderItem"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    ticket?: XOR<TicketScalarRelationFilter, TicketWhereInput>
  }

  export type OrderItemOrderByWithRelationInput = {
    id?: SortOrder
    order_id?: SortOrder
    ticket_id?: SortOrder
    quantity?: SortOrder
    price_snapshot?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    order?: OrderOrderByWithRelationInput
    ticket?: TicketOrderByWithRelationInput
  }

  export type OrderItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    order_id?: IntFilter<"OrderItem"> | number
    ticket_id?: IntFilter<"OrderItem"> | number
    quantity?: IntFilter<"OrderItem"> | number
    price_snapshot?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"OrderItem"> | Date | string
    updated_at?: DateTimeFilter<"OrderItem"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    ticket?: XOR<TicketScalarRelationFilter, TicketWhereInput>
  }, "id">

  export type OrderItemOrderByWithAggregationInput = {
    id?: SortOrder
    order_id?: SortOrder
    ticket_id?: SortOrder
    quantity?: SortOrder
    price_snapshot?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: OrderItemCountOrderByAggregateInput
    _avg?: OrderItemAvgOrderByAggregateInput
    _max?: OrderItemMaxOrderByAggregateInput
    _min?: OrderItemMinOrderByAggregateInput
    _sum?: OrderItemSumOrderByAggregateInput
  }

  export type OrderItemScalarWhereWithAggregatesInput = {
    AND?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    OR?: OrderItemScalarWhereWithAggregatesInput[]
    NOT?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OrderItem"> | number
    order_id?: IntWithAggregatesFilter<"OrderItem"> | number
    ticket_id?: IntWithAggregatesFilter<"OrderItem"> | number
    quantity?: IntWithAggregatesFilter<"OrderItem"> | number
    price_snapshot?: DecimalWithAggregatesFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeWithAggregatesFilter<"OrderItem"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"OrderItem"> | Date | string
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: IntFilter<"Payment"> | number
    order_id?: IntFilter<"Payment"> | number
    gateway?: StringFilter<"Payment"> | string
    status?: StringFilter<"Payment"> | string
    txn_code?: StringNullableFilter<"Payment"> | string | null
    paid_at?: DateTimeNullableFilter<"Payment"> | Date | string | null
    created_at?: DateTimeFilter<"Payment"> | Date | string
    updated_at?: DateTimeFilter<"Payment"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    order_id?: SortOrder
    gateway?: SortOrder
    status?: SortOrder
    txn_code?: SortOrderInput | SortOrder
    paid_at?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    order?: OrderOrderByWithRelationInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    order_id?: IntFilter<"Payment"> | number
    gateway?: StringFilter<"Payment"> | string
    status?: StringFilter<"Payment"> | string
    txn_code?: StringNullableFilter<"Payment"> | string | null
    paid_at?: DateTimeNullableFilter<"Payment"> | Date | string | null
    created_at?: DateTimeFilter<"Payment"> | Date | string
    updated_at?: DateTimeFilter<"Payment"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }, "id">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    order_id?: SortOrder
    gateway?: SortOrder
    status?: SortOrder
    txn_code?: SortOrderInput | SortOrder
    paid_at?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Payment"> | number
    order_id?: IntWithAggregatesFilter<"Payment"> | number
    gateway?: StringWithAggregatesFilter<"Payment"> | string
    status?: StringWithAggregatesFilter<"Payment"> | string
    txn_code?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    paid_at?: DateTimeNullableWithAggregatesFilter<"Payment"> | Date | string | null
    created_at?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
  }

  export type CheckinLogWhereInput = {
    AND?: CheckinLogWhereInput | CheckinLogWhereInput[]
    OR?: CheckinLogWhereInput[]
    NOT?: CheckinLogWhereInput | CheckinLogWhereInput[]
    id?: IntFilter<"CheckinLog"> | number
    user_id?: StringFilter<"CheckinLog"> | string
    ticket_id?: IntFilter<"CheckinLog"> | number
    event_id?: IntFilter<"CheckinLog"> | number
    checkin_time?: DateTimeFilter<"CheckinLog"> | Date | string
    verified_by?: StringNullableFilter<"CheckinLog"> | string | null
    created_at?: DateTimeFilter<"CheckinLog"> | Date | string
    updated_at?: DateTimeFilter<"CheckinLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    ticket?: XOR<TicketScalarRelationFilter, TicketWhereInput>
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
  }

  export type CheckinLogOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    ticket_id?: SortOrder
    event_id?: SortOrder
    checkin_time?: SortOrder
    verified_by?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user?: UserOrderByWithRelationInput
    ticket?: TicketOrderByWithRelationInput
    event?: EventOrderByWithRelationInput
  }

  export type CheckinLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CheckinLogWhereInput | CheckinLogWhereInput[]
    OR?: CheckinLogWhereInput[]
    NOT?: CheckinLogWhereInput | CheckinLogWhereInput[]
    user_id?: StringFilter<"CheckinLog"> | string
    ticket_id?: IntFilter<"CheckinLog"> | number
    event_id?: IntFilter<"CheckinLog"> | number
    checkin_time?: DateTimeFilter<"CheckinLog"> | Date | string
    verified_by?: StringNullableFilter<"CheckinLog"> | string | null
    created_at?: DateTimeFilter<"CheckinLog"> | Date | string
    updated_at?: DateTimeFilter<"CheckinLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    ticket?: XOR<TicketScalarRelationFilter, TicketWhereInput>
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
  }, "id">

  export type CheckinLogOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    ticket_id?: SortOrder
    event_id?: SortOrder
    checkin_time?: SortOrder
    verified_by?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: CheckinLogCountOrderByAggregateInput
    _avg?: CheckinLogAvgOrderByAggregateInput
    _max?: CheckinLogMaxOrderByAggregateInput
    _min?: CheckinLogMinOrderByAggregateInput
    _sum?: CheckinLogSumOrderByAggregateInput
  }

  export type CheckinLogScalarWhereWithAggregatesInput = {
    AND?: CheckinLogScalarWhereWithAggregatesInput | CheckinLogScalarWhereWithAggregatesInput[]
    OR?: CheckinLogScalarWhereWithAggregatesInput[]
    NOT?: CheckinLogScalarWhereWithAggregatesInput | CheckinLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CheckinLog"> | number
    user_id?: StringWithAggregatesFilter<"CheckinLog"> | string
    ticket_id?: IntWithAggregatesFilter<"CheckinLog"> | number
    event_id?: IntWithAggregatesFilter<"CheckinLog"> | number
    checkin_time?: DateTimeWithAggregatesFilter<"CheckinLog"> | Date | string
    verified_by?: StringNullableWithAggregatesFilter<"CheckinLog"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"CheckinLog"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"CheckinLog"> | Date | string
  }

  export type UserOrganizationWhereInput = {
    AND?: UserOrganizationWhereInput | UserOrganizationWhereInput[]
    OR?: UserOrganizationWhereInput[]
    NOT?: UserOrganizationWhereInput | UserOrganizationWhereInput[]
    id?: IntFilter<"UserOrganization"> | number
    user_id?: StringFilter<"UserOrganization"> | string
    organization_id?: IntFilter<"UserOrganization"> | number
    role?: StringFilter<"UserOrganization"> | string
    created_at?: DateTimeFilter<"UserOrganization"> | Date | string
    updated_at?: DateTimeFilter<"UserOrganization"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }

  export type UserOrganizationOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    organization_id?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user?: UserOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
  }

  export type UserOrganizationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserOrganizationWhereInput | UserOrganizationWhereInput[]
    OR?: UserOrganizationWhereInput[]
    NOT?: UserOrganizationWhereInput | UserOrganizationWhereInput[]
    user_id?: StringFilter<"UserOrganization"> | string
    organization_id?: IntFilter<"UserOrganization"> | number
    role?: StringFilter<"UserOrganization"> | string
    created_at?: DateTimeFilter<"UserOrganization"> | Date | string
    updated_at?: DateTimeFilter<"UserOrganization"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
  }, "id">

  export type UserOrganizationOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    organization_id?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: UserOrganizationCountOrderByAggregateInput
    _avg?: UserOrganizationAvgOrderByAggregateInput
    _max?: UserOrganizationMaxOrderByAggregateInput
    _min?: UserOrganizationMinOrderByAggregateInput
    _sum?: UserOrganizationSumOrderByAggregateInput
  }

  export type UserOrganizationScalarWhereWithAggregatesInput = {
    AND?: UserOrganizationScalarWhereWithAggregatesInput | UserOrganizationScalarWhereWithAggregatesInput[]
    OR?: UserOrganizationScalarWhereWithAggregatesInput[]
    NOT?: UserOrganizationScalarWhereWithAggregatesInput | UserOrganizationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserOrganization"> | number
    user_id?: StringWithAggregatesFilter<"UserOrganization"> | string
    organization_id?: IntWithAggregatesFilter<"UserOrganization"> | number
    role?: StringWithAggregatesFilter<"UserOrganization"> | string
    created_at?: DateTimeWithAggregatesFilter<"UserOrganization"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"UserOrganization"> | Date | string
  }

  export type EventSettingWhereInput = {
    AND?: EventSettingWhereInput | EventSettingWhereInput[]
    OR?: EventSettingWhereInput[]
    NOT?: EventSettingWhereInput | EventSettingWhereInput[]
    id?: IntFilter<"EventSetting"> | number
    event_id?: IntFilter<"EventSetting"> | number
    setting_key?: StringFilter<"EventSetting"> | string
    setting_value?: StringFilter<"EventSetting"> | string
    created_at?: DateTimeFilter<"EventSetting"> | Date | string
    updated_at?: DateTimeFilter<"EventSetting"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
  }

  export type EventSettingOrderByWithRelationInput = {
    id?: SortOrder
    event_id?: SortOrder
    setting_key?: SortOrder
    setting_value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    event?: EventOrderByWithRelationInput
  }

  export type EventSettingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EventSettingWhereInput | EventSettingWhereInput[]
    OR?: EventSettingWhereInput[]
    NOT?: EventSettingWhereInput | EventSettingWhereInput[]
    event_id?: IntFilter<"EventSetting"> | number
    setting_key?: StringFilter<"EventSetting"> | string
    setting_value?: StringFilter<"EventSetting"> | string
    created_at?: DateTimeFilter<"EventSetting"> | Date | string
    updated_at?: DateTimeFilter<"EventSetting"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
  }, "id">

  export type EventSettingOrderByWithAggregationInput = {
    id?: SortOrder
    event_id?: SortOrder
    setting_key?: SortOrder
    setting_value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: EventSettingCountOrderByAggregateInput
    _avg?: EventSettingAvgOrderByAggregateInput
    _max?: EventSettingMaxOrderByAggregateInput
    _min?: EventSettingMinOrderByAggregateInput
    _sum?: EventSettingSumOrderByAggregateInput
  }

  export type EventSettingScalarWhereWithAggregatesInput = {
    AND?: EventSettingScalarWhereWithAggregatesInput | EventSettingScalarWhereWithAggregatesInput[]
    OR?: EventSettingScalarWhereWithAggregatesInput[]
    NOT?: EventSettingScalarWhereWithAggregatesInput | EventSettingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EventSetting"> | number
    event_id?: IntWithAggregatesFilter<"EventSetting"> | number
    setting_key?: StringWithAggregatesFilter<"EventSetting"> | string
    setting_value?: StringWithAggregatesFilter<"EventSetting"> | string
    created_at?: DateTimeWithAggregatesFilter<"EventSetting"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"EventSetting"> | Date | string
  }

  export type ImageWhereInput = {
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    id?: IntFilter<"Image"> | number
    file_path?: StringFilter<"Image"> | string
    file_name?: StringNullableFilter<"Image"> | string | null
    file_type?: StringNullableFilter<"Image"> | string | null
    file_size?: IntNullableFilter<"Image"> | number | null
    alt_text?: StringNullableFilter<"Image"> | string | null
    uploaded_by?: StringFilter<"Image"> | string
    created_at?: DateTimeFilter<"Image"> | Date | string
    updated_at?: DateTimeFilter<"Image"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    image_links?: ImageLinkListRelationFilter
  }

  export type ImageOrderByWithRelationInput = {
    id?: SortOrder
    file_path?: SortOrder
    file_name?: SortOrderInput | SortOrder
    file_type?: SortOrderInput | SortOrder
    file_size?: SortOrderInput | SortOrder
    alt_text?: SortOrderInput | SortOrder
    uploaded_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user?: UserOrderByWithRelationInput
    image_links?: ImageLinkOrderByRelationAggregateInput
  }

  export type ImageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    file_path?: StringFilter<"Image"> | string
    file_name?: StringNullableFilter<"Image"> | string | null
    file_type?: StringNullableFilter<"Image"> | string | null
    file_size?: IntNullableFilter<"Image"> | number | null
    alt_text?: StringNullableFilter<"Image"> | string | null
    uploaded_by?: StringFilter<"Image"> | string
    created_at?: DateTimeFilter<"Image"> | Date | string
    updated_at?: DateTimeFilter<"Image"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    image_links?: ImageLinkListRelationFilter
  }, "id">

  export type ImageOrderByWithAggregationInput = {
    id?: SortOrder
    file_path?: SortOrder
    file_name?: SortOrderInput | SortOrder
    file_type?: SortOrderInput | SortOrder
    file_size?: SortOrderInput | SortOrder
    alt_text?: SortOrderInput | SortOrder
    uploaded_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: ImageCountOrderByAggregateInput
    _avg?: ImageAvgOrderByAggregateInput
    _max?: ImageMaxOrderByAggregateInput
    _min?: ImageMinOrderByAggregateInput
    _sum?: ImageSumOrderByAggregateInput
  }

  export type ImageScalarWhereWithAggregatesInput = {
    AND?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    OR?: ImageScalarWhereWithAggregatesInput[]
    NOT?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Image"> | number
    file_path?: StringWithAggregatesFilter<"Image"> | string
    file_name?: StringNullableWithAggregatesFilter<"Image"> | string | null
    file_type?: StringNullableWithAggregatesFilter<"Image"> | string | null
    file_size?: IntNullableWithAggregatesFilter<"Image"> | number | null
    alt_text?: StringNullableWithAggregatesFilter<"Image"> | string | null
    uploaded_by?: StringWithAggregatesFilter<"Image"> | string
    created_at?: DateTimeWithAggregatesFilter<"Image"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Image"> | Date | string
  }

  export type ImageLinkWhereInput = {
    AND?: ImageLinkWhereInput | ImageLinkWhereInput[]
    OR?: ImageLinkWhereInput[]
    NOT?: ImageLinkWhereInput | ImageLinkWhereInput[]
    id?: IntFilter<"ImageLink"> | number
    image_id?: IntFilter<"ImageLink"> | number
    entity_type?: StringFilter<"ImageLink"> | string
    entity_id?: IntFilter<"ImageLink"> | number
    organization_id?: IntNullableFilter<"ImageLink"> | number | null
    event_id?: IntNullableFilter<"ImageLink"> | number | null
    usage_type?: StringFilter<"ImageLink"> | string
    linked_at?: DateTimeFilter<"ImageLink"> | Date | string
    created_at?: DateTimeFilter<"ImageLink"> | Date | string
    updated_at?: DateTimeFilter<"ImageLink"> | Date | string
    image?: XOR<ImageScalarRelationFilter, ImageWhereInput>
    organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
    event?: XOR<EventNullableScalarRelationFilter, EventWhereInput> | null
  }

  export type ImageLinkOrderByWithRelationInput = {
    id?: SortOrder
    image_id?: SortOrder
    entity_type?: SortOrder
    entity_id?: SortOrder
    organization_id?: SortOrderInput | SortOrder
    event_id?: SortOrderInput | SortOrder
    usage_type?: SortOrder
    linked_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    image?: ImageOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
    event?: EventOrderByWithRelationInput
  }

  export type ImageLinkWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ImageLinkWhereInput | ImageLinkWhereInput[]
    OR?: ImageLinkWhereInput[]
    NOT?: ImageLinkWhereInput | ImageLinkWhereInput[]
    image_id?: IntFilter<"ImageLink"> | number
    entity_type?: StringFilter<"ImageLink"> | string
    entity_id?: IntFilter<"ImageLink"> | number
    organization_id?: IntNullableFilter<"ImageLink"> | number | null
    event_id?: IntNullableFilter<"ImageLink"> | number | null
    usage_type?: StringFilter<"ImageLink"> | string
    linked_at?: DateTimeFilter<"ImageLink"> | Date | string
    created_at?: DateTimeFilter<"ImageLink"> | Date | string
    updated_at?: DateTimeFilter<"ImageLink"> | Date | string
    image?: XOR<ImageScalarRelationFilter, ImageWhereInput>
    organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
    event?: XOR<EventNullableScalarRelationFilter, EventWhereInput> | null
  }, "id">

  export type ImageLinkOrderByWithAggregationInput = {
    id?: SortOrder
    image_id?: SortOrder
    entity_type?: SortOrder
    entity_id?: SortOrder
    organization_id?: SortOrderInput | SortOrder
    event_id?: SortOrderInput | SortOrder
    usage_type?: SortOrder
    linked_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: ImageLinkCountOrderByAggregateInput
    _avg?: ImageLinkAvgOrderByAggregateInput
    _max?: ImageLinkMaxOrderByAggregateInput
    _min?: ImageLinkMinOrderByAggregateInput
    _sum?: ImageLinkSumOrderByAggregateInput
  }

  export type ImageLinkScalarWhereWithAggregatesInput = {
    AND?: ImageLinkScalarWhereWithAggregatesInput | ImageLinkScalarWhereWithAggregatesInput[]
    OR?: ImageLinkScalarWhereWithAggregatesInput[]
    NOT?: ImageLinkScalarWhereWithAggregatesInput | ImageLinkScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ImageLink"> | number
    image_id?: IntWithAggregatesFilter<"ImageLink"> | number
    entity_type?: StringWithAggregatesFilter<"ImageLink"> | string
    entity_id?: IntWithAggregatesFilter<"ImageLink"> | number
    organization_id?: IntNullableWithAggregatesFilter<"ImageLink"> | number | null
    event_id?: IntNullableWithAggregatesFilter<"ImageLink"> | number | null
    usage_type?: StringWithAggregatesFilter<"ImageLink"> | string
    linked_at?: DateTimeWithAggregatesFilter<"ImageLink"> | Date | string
    created_at?: DateTimeWithAggregatesFilter<"ImageLink"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"ImageLink"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    is_verified?: boolean
    supabase_id?: string | null
    phone?: string | null
    avatar_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    referral_codes?: ReferralCodeCreateNestedManyWithoutUserInput
    email_logs?: EmailLogCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    checkin_logs?: CheckinLogCreateNestedManyWithoutUserInput
    user_organizations?: UserOrganizationCreateNestedManyWithoutUserInput
    tracking_visits?: TrackingVisitCreateNestedManyWithoutUserInput
    webhook_logs?: WebhookLogCreateNestedManyWithoutUserInput
    images?: ImageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    is_verified?: boolean
    supabase_id?: string | null
    phone?: string | null
    avatar_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    referral_codes?: ReferralCodeUncheckedCreateNestedManyWithoutUserInput
    email_logs?: EmailLogUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    checkin_logs?: CheckinLogUncheckedCreateNestedManyWithoutUserInput
    user_organizations?: UserOrganizationUncheckedCreateNestedManyWithoutUserInput
    tracking_visits?: TrackingVisitUncheckedCreateNestedManyWithoutUserInput
    webhook_logs?: WebhookLogUncheckedCreateNestedManyWithoutUserInput
    images?: ImageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    supabase_id?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    referral_codes?: ReferralCodeUpdateManyWithoutUserNestedInput
    email_logs?: EmailLogUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    checkin_logs?: CheckinLogUpdateManyWithoutUserNestedInput
    user_organizations?: UserOrganizationUpdateManyWithoutUserNestedInput
    tracking_visits?: TrackingVisitUpdateManyWithoutUserNestedInput
    webhook_logs?: WebhookLogUpdateManyWithoutUserNestedInput
    images?: ImageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    supabase_id?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    referral_codes?: ReferralCodeUncheckedUpdateManyWithoutUserNestedInput
    email_logs?: EmailLogUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    checkin_logs?: CheckinLogUncheckedUpdateManyWithoutUserNestedInput
    user_organizations?: UserOrganizationUncheckedUpdateManyWithoutUserNestedInput
    tracking_visits?: TrackingVisitUncheckedUpdateManyWithoutUserNestedInput
    webhook_logs?: WebhookLogUncheckedUpdateManyWithoutUserNestedInput
    images?: ImageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    is_verified?: boolean
    supabase_id?: string | null
    phone?: string | null
    avatar_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    supabase_id?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    supabase_id?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationCreateInput = {
    name: string
    contact_email?: string | null
    phone?: string | null
    address?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    events?: EventCreateNestedManyWithoutOrganizationInput
    webhook_subscriptions?: WebhookSubscriptionCreateNestedManyWithoutOrganizationInput
    user_organizations?: UserOrganizationCreateNestedManyWithoutOrganizationInput
    image_links?: ImageLinkCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateInput = {
    id?: number
    name: string
    contact_email?: string | null
    phone?: string | null
    address?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutOrganizationInput
    webhook_subscriptions?: WebhookSubscriptionUncheckedCreateNestedManyWithoutOrganizationInput
    user_organizations?: UserOrganizationUncheckedCreateNestedManyWithoutOrganizationInput
    image_links?: ImageLinkUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    contact_email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutOrganizationNestedInput
    webhook_subscriptions?: WebhookSubscriptionUpdateManyWithoutOrganizationNestedInput
    user_organizations?: UserOrganizationUpdateManyWithoutOrganizationNestedInput
    image_links?: ImageLinkUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contact_email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutOrganizationNestedInput
    webhook_subscriptions?: WebhookSubscriptionUncheckedUpdateManyWithoutOrganizationNestedInput
    user_organizations?: UserOrganizationUncheckedUpdateManyWithoutOrganizationNestedInput
    image_links?: ImageLinkUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateManyInput = {
    id?: number
    name: string
    contact_email?: string | null
    phone?: string | null
    address?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type OrganizationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    contact_email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contact_email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromoCodeCreateInput = {
    code: string
    description?: string | null
    discount_type: string
    discount_value: Decimal | DecimalJsLike | number | string
    max_uses?: number
    uses?: number
    valid_from?: Date | string | null
    valid_until?: Date | string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    order_promos?: OrderPromoCreateNestedManyWithoutPromo_codeInput
  }

  export type PromoCodeUncheckedCreateInput = {
    id?: number
    code: string
    description?: string | null
    discount_type: string
    discount_value: Decimal | DecimalJsLike | number | string
    max_uses?: number
    uses?: number
    valid_from?: Date | string | null
    valid_until?: Date | string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    order_promos?: OrderPromoUncheckedCreateNestedManyWithoutPromo_codeInput
  }

  export type PromoCodeUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    discount_type?: StringFieldUpdateOperationsInput | string
    discount_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    max_uses?: IntFieldUpdateOperationsInput | number
    uses?: IntFieldUpdateOperationsInput | number
    valid_from?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valid_until?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order_promos?: OrderPromoUpdateManyWithoutPromo_codeNestedInput
  }

  export type PromoCodeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    discount_type?: StringFieldUpdateOperationsInput | string
    discount_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    max_uses?: IntFieldUpdateOperationsInput | number
    uses?: IntFieldUpdateOperationsInput | number
    valid_from?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valid_until?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order_promos?: OrderPromoUncheckedUpdateManyWithoutPromo_codeNestedInput
  }

  export type PromoCodeCreateManyInput = {
    id?: number
    code: string
    description?: string | null
    discount_type: string
    discount_value: Decimal | DecimalJsLike | number | string
    max_uses?: number
    uses?: number
    valid_from?: Date | string | null
    valid_until?: Date | string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PromoCodeUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    discount_type?: StringFieldUpdateOperationsInput | string
    discount_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    max_uses?: IntFieldUpdateOperationsInput | number
    uses?: IntFieldUpdateOperationsInput | number
    valid_from?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valid_until?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromoCodeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    discount_type?: StringFieldUpdateOperationsInput | string
    discount_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    max_uses?: IntFieldUpdateOperationsInput | number
    uses?: IntFieldUpdateOperationsInput | number
    valid_from?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valid_until?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderPromoCreateInput = {
    discount_applied: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
    order: OrderCreateNestedOneWithoutOrder_promosInput
    promo_code: PromoCodeCreateNestedOneWithoutOrder_promosInput
  }

  export type OrderPromoUncheckedCreateInput = {
    id?: number
    order_id: number
    promo_code_id: number
    discount_applied: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type OrderPromoUpdateInput = {
    discount_applied?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutOrder_promosNestedInput
    promo_code?: PromoCodeUpdateOneRequiredWithoutOrder_promosNestedInput
  }

  export type OrderPromoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    promo_code_id?: IntFieldUpdateOperationsInput | number
    discount_applied?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderPromoCreateManyInput = {
    id?: number
    order_id: number
    promo_code_id: number
    discount_applied: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type OrderPromoUpdateManyMutationInput = {
    discount_applied?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderPromoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    promo_code_id?: IntFieldUpdateOperationsInput | number
    discount_applied?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralCodeCreateInput = {
    code: string
    created_at?: Date | string
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutReferral_codesInput
  }

  export type ReferralCodeUncheckedCreateInput = {
    id?: number
    user_id: string
    code: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ReferralCodeUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReferral_codesNestedInput
  }

  export type ReferralCodeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralCodeCreateManyInput = {
    id?: number
    user_id: string
    code: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ReferralCodeUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralCodeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailLogCreateInput = {
    email_type: string
    subject: string
    status: string
    sent_at?: Date | string | null
    error_message?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutEmail_logsInput
    event?: EventCreateNestedOneWithoutEmail_logsInput
  }

  export type EmailLogUncheckedCreateInput = {
    id?: number
    user_id: string
    event_id?: number | null
    email_type: string
    subject: string
    status: string
    sent_at?: Date | string | null
    error_message?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type EmailLogUpdateInput = {
    email_type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    sent_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error_message?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEmail_logsNestedInput
    event?: EventUpdateOneWithoutEmail_logsNestedInput
  }

  export type EmailLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    email_type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    sent_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error_message?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailLogCreateManyInput = {
    id?: number
    user_id: string
    event_id?: number | null
    email_type: string
    subject: string
    status: string
    sent_at?: Date | string | null
    error_message?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type EmailLogUpdateManyMutationInput = {
    email_type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    sent_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error_message?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    email_type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    sent_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error_message?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookLogCreateInput = {
    target_url: string
    event_type: string
    payload: string
    status_code: number
    response_text?: string | null
    triggered_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    order?: OrderCreateNestedOneWithoutWebhook_logsInput
    event?: EventCreateNestedOneWithoutWebhook_logsInput
    user?: UserCreateNestedOneWithoutWebhook_logsInput
  }

  export type WebhookLogUncheckedCreateInput = {
    id?: number
    target_url: string
    event_type: string
    order_id?: number | null
    event_id?: number | null
    user_id?: string | null
    payload: string
    status_code: number
    response_text?: string | null
    triggered_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WebhookLogUpdateInput = {
    target_url?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    status_code?: IntFieldUpdateOperationsInput | number
    response_text?: NullableStringFieldUpdateOperationsInput | string | null
    triggered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneWithoutWebhook_logsNestedInput
    event?: EventUpdateOneWithoutWebhook_logsNestedInput
    user?: UserUpdateOneWithoutWebhook_logsNestedInput
  }

  export type WebhookLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    target_url?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: StringFieldUpdateOperationsInput | string
    status_code?: IntFieldUpdateOperationsInput | number
    response_text?: NullableStringFieldUpdateOperationsInput | string | null
    triggered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookLogCreateManyInput = {
    id?: number
    target_url: string
    event_type: string
    order_id?: number | null
    event_id?: number | null
    user_id?: string | null
    payload: string
    status_code: number
    response_text?: string | null
    triggered_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WebhookLogUpdateManyMutationInput = {
    target_url?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    status_code?: IntFieldUpdateOperationsInput | number
    response_text?: NullableStringFieldUpdateOperationsInput | string | null
    triggered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    target_url?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: StringFieldUpdateOperationsInput | string
    status_code?: IntFieldUpdateOperationsInput | number
    response_text?: NullableStringFieldUpdateOperationsInput | string | null
    triggered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookSubscriptionCreateInput = {
    target_url: string
    event_type: string
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    organization: OrganizationCreateNestedOneWithoutWebhook_subscriptionsInput
  }

  export type WebhookSubscriptionUncheckedCreateInput = {
    id?: number
    organization_id: number
    target_url: string
    event_type: string
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WebhookSubscriptionUpdateInput = {
    target_url?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutWebhook_subscriptionsNestedInput
  }

  export type WebhookSubscriptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    organization_id?: IntFieldUpdateOperationsInput | number
    target_url?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookSubscriptionCreateManyInput = {
    id?: number
    organization_id: number
    target_url: string
    event_type: string
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WebhookSubscriptionUpdateManyMutationInput = {
    target_url?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookSubscriptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    organization_id?: IntFieldUpdateOperationsInput | number
    target_url?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackingVisitCreateInput = {
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_content?: string | null
    referrer_url?: string | null
    landing_page?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user?: UserCreateNestedOneWithoutTracking_visitsInput
    event: EventCreateNestedOneWithoutTracking_visitsInput
  }

  export type TrackingVisitUncheckedCreateInput = {
    id?: number
    user_id?: string | null
    event_id: number
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_content?: string | null
    referrer_url?: string | null
    landing_page?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TrackingVisitUpdateInput = {
    utm_source?: NullableStringFieldUpdateOperationsInput | string | null
    utm_medium?: NullableStringFieldUpdateOperationsInput | string | null
    utm_campaign?: NullableStringFieldUpdateOperationsInput | string | null
    utm_content?: NullableStringFieldUpdateOperationsInput | string | null
    referrer_url?: NullableStringFieldUpdateOperationsInput | string | null
    landing_page?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTracking_visitsNestedInput
    event?: EventUpdateOneRequiredWithoutTracking_visitsNestedInput
  }

  export type TrackingVisitUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    event_id?: IntFieldUpdateOperationsInput | number
    utm_source?: NullableStringFieldUpdateOperationsInput | string | null
    utm_medium?: NullableStringFieldUpdateOperationsInput | string | null
    utm_campaign?: NullableStringFieldUpdateOperationsInput | string | null
    utm_content?: NullableStringFieldUpdateOperationsInput | string | null
    referrer_url?: NullableStringFieldUpdateOperationsInput | string | null
    landing_page?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackingVisitCreateManyInput = {
    id?: number
    user_id?: string | null
    event_id: number
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_content?: string | null
    referrer_url?: string | null
    landing_page?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TrackingVisitUpdateManyMutationInput = {
    utm_source?: NullableStringFieldUpdateOperationsInput | string | null
    utm_medium?: NullableStringFieldUpdateOperationsInput | string | null
    utm_campaign?: NullableStringFieldUpdateOperationsInput | string | null
    utm_content?: NullableStringFieldUpdateOperationsInput | string | null
    referrer_url?: NullableStringFieldUpdateOperationsInput | string | null
    landing_page?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackingVisitUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    event_id?: IntFieldUpdateOperationsInput | number
    utm_source?: NullableStringFieldUpdateOperationsInput | string | null
    utm_medium?: NullableStringFieldUpdateOperationsInput | string | null
    utm_campaign?: NullableStringFieldUpdateOperationsInput | string | null
    utm_content?: NullableStringFieldUpdateOperationsInput | string | null
    referrer_url?: NullableStringFieldUpdateOperationsInput | string | null
    landing_page?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateInput = {
    name: string
    description?: string | null
    date: Date | string
    location?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    organization: OrganizationCreateNestedOneWithoutEventsInput
    tickets?: TicketCreateNestedManyWithoutEventInput
    email_logs?: EmailLogCreateNestedManyWithoutEventInput
    webhook_logs?: WebhookLogCreateNestedManyWithoutEventInput
    checkin_logs?: CheckinLogCreateNestedManyWithoutEventInput
    tracking_visits?: TrackingVisitCreateNestedManyWithoutEventInput
    event_settings?: EventSettingCreateNestedManyWithoutEventInput
    image_links?: ImageLinkCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateInput = {
    id?: number
    organization_id: number
    name: string
    description?: string | null
    date: Date | string
    location?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    tickets?: TicketUncheckedCreateNestedManyWithoutEventInput
    email_logs?: EmailLogUncheckedCreateNestedManyWithoutEventInput
    webhook_logs?: WebhookLogUncheckedCreateNestedManyWithoutEventInput
    checkin_logs?: CheckinLogUncheckedCreateNestedManyWithoutEventInput
    tracking_visits?: TrackingVisitUncheckedCreateNestedManyWithoutEventInput
    event_settings?: EventSettingUncheckedCreateNestedManyWithoutEventInput
    image_links?: ImageLinkUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutEventsNestedInput
    tickets?: TicketUpdateManyWithoutEventNestedInput
    email_logs?: EmailLogUpdateManyWithoutEventNestedInput
    webhook_logs?: WebhookLogUpdateManyWithoutEventNestedInput
    checkin_logs?: CheckinLogUpdateManyWithoutEventNestedInput
    tracking_visits?: TrackingVisitUpdateManyWithoutEventNestedInput
    event_settings?: EventSettingUpdateManyWithoutEventNestedInput
    image_links?: ImageLinkUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    organization_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: TicketUncheckedUpdateManyWithoutEventNestedInput
    email_logs?: EmailLogUncheckedUpdateManyWithoutEventNestedInput
    webhook_logs?: WebhookLogUncheckedUpdateManyWithoutEventNestedInput
    checkin_logs?: CheckinLogUncheckedUpdateManyWithoutEventNestedInput
    tracking_visits?: TrackingVisitUncheckedUpdateManyWithoutEventNestedInput
    event_settings?: EventSettingUncheckedUpdateManyWithoutEventNestedInput
    image_links?: ImageLinkUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventCreateManyInput = {
    id?: number
    organization_id: number
    name: string
    description?: string | null
    date: Date | string
    location?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type EventUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    organization_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketCreateInput = {
    name: string
    price: Decimal | DecimalJsLike | number | string
    type: string
    total: number
    sold: number
    start_sale_date?: Date | string | null
    end_sale_date?: Date | string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    event: EventCreateNestedOneWithoutTicketsInput
    order_items?: OrderItemCreateNestedManyWithoutTicketInput
    checkin_logs?: CheckinLogCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateInput = {
    id?: number
    event_id: number
    name: string
    price: Decimal | DecimalJsLike | number | string
    type: string
    total: number
    sold: number
    start_sale_date?: Date | string | null
    end_sale_date?: Date | string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    order_items?: OrderItemUncheckedCreateNestedManyWithoutTicketInput
    checkin_logs?: CheckinLogUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    type?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    sold?: IntFieldUpdateOperationsInput | number
    start_sale_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_sale_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutTicketsNestedInput
    order_items?: OrderItemUpdateManyWithoutTicketNestedInput
    checkin_logs?: CheckinLogUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    type?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    sold?: IntFieldUpdateOperationsInput | number
    start_sale_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_sale_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order_items?: OrderItemUncheckedUpdateManyWithoutTicketNestedInput
    checkin_logs?: CheckinLogUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type TicketCreateManyInput = {
    id?: number
    event_id: number
    name: string
    price: Decimal | DecimalJsLike | number | string
    type: string
    total: number
    sold: number
    start_sale_date?: Date | string | null
    end_sale_date?: Date | string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TicketUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    type?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    sold?: IntFieldUpdateOperationsInput | number
    start_sale_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_sale_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    type?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    sold?: IntFieldUpdateOperationsInput | number
    start_sale_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_sale_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCreateInput = {
    status: string
    payment_method: string
    amount: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
    user?: UserCreateNestedOneWithoutOrdersInput
    order_items?: OrderItemCreateNestedManyWithoutOrderInput
    order_promos?: OrderPromoCreateNestedManyWithoutOrderInput
    payments?: PaymentCreateNestedManyWithoutOrderInput
    webhook_logs?: WebhookLogCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    id?: number
    user_id?: string | null
    status: string
    payment_method: string
    amount: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
    order_items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    order_promos?: OrderPromoUncheckedCreateNestedManyWithoutOrderInput
    payments?: PaymentUncheckedCreateNestedManyWithoutOrderInput
    webhook_logs?: WebhookLogUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutOrdersNestedInput
    order_items?: OrderItemUpdateManyWithoutOrderNestedInput
    order_promos?: OrderPromoUpdateManyWithoutOrderNestedInput
    payments?: PaymentUpdateManyWithoutOrderNestedInput
    webhook_logs?: WebhookLogUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order_items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    order_promos?: OrderPromoUncheckedUpdateManyWithoutOrderNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutOrderNestedInput
    webhook_logs?: WebhookLogUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: number
    user_id?: string | null
    status: string
    payment_method: string
    amount: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type OrderUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemCreateInput = {
    quantity: number
    price_snapshot: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
    order: OrderCreateNestedOneWithoutOrder_itemsInput
    ticket: TicketCreateNestedOneWithoutOrder_itemsInput
  }

  export type OrderItemUncheckedCreateInput = {
    id?: number
    order_id: number
    ticket_id: number
    quantity: number
    price_snapshot: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type OrderItemUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price_snapshot?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutOrder_itemsNestedInput
    ticket?: TicketUpdateOneRequiredWithoutOrder_itemsNestedInput
  }

  export type OrderItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price_snapshot?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemCreateManyInput = {
    id?: number
    order_id: number
    ticket_id: number
    quantity: number
    price_snapshot: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type OrderItemUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price_snapshot?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price_snapshot?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateInput = {
    gateway: string
    status: string
    txn_code?: string | null
    paid_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    order: OrderCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: number
    order_id: number
    gateway: string
    status: string
    txn_code?: string | null
    paid_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PaymentUpdateInput = {
    gateway?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    txn_code?: NullableStringFieldUpdateOperationsInput | string | null
    paid_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    gateway?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    txn_code?: NullableStringFieldUpdateOperationsInput | string | null
    paid_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateManyInput = {
    id?: number
    order_id: number
    gateway: string
    status: string
    txn_code?: string | null
    paid_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PaymentUpdateManyMutationInput = {
    gateway?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    txn_code?: NullableStringFieldUpdateOperationsInput | string | null
    paid_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    gateway?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    txn_code?: NullableStringFieldUpdateOperationsInput | string | null
    paid_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CheckinLogCreateInput = {
    checkin_time: Date | string
    verified_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutCheckin_logsInput
    ticket: TicketCreateNestedOneWithoutCheckin_logsInput
    event: EventCreateNestedOneWithoutCheckin_logsInput
  }

  export type CheckinLogUncheckedCreateInput = {
    id?: number
    user_id: string
    ticket_id: number
    event_id: number
    checkin_time: Date | string
    verified_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CheckinLogUpdateInput = {
    checkin_time?: DateTimeFieldUpdateOperationsInput | Date | string
    verified_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCheckin_logsNestedInput
    ticket?: TicketUpdateOneRequiredWithoutCheckin_logsNestedInput
    event?: EventUpdateOneRequiredWithoutCheckin_logsNestedInput
  }

  export type CheckinLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    ticket_id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    checkin_time?: DateTimeFieldUpdateOperationsInput | Date | string
    verified_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CheckinLogCreateManyInput = {
    id?: number
    user_id: string
    ticket_id: number
    event_id: number
    checkin_time: Date | string
    verified_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CheckinLogUpdateManyMutationInput = {
    checkin_time?: DateTimeFieldUpdateOperationsInput | Date | string
    verified_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CheckinLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    ticket_id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    checkin_time?: DateTimeFieldUpdateOperationsInput | Date | string
    verified_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserOrganizationCreateInput = {
    role: string
    created_at?: Date | string
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutUser_organizationsInput
    organization: OrganizationCreateNestedOneWithoutUser_organizationsInput
  }

  export type UserOrganizationUncheckedCreateInput = {
    id?: number
    user_id: string
    organization_id: number
    role: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserOrganizationUpdateInput = {
    role?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUser_organizationsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutUser_organizationsNestedInput
  }

  export type UserOrganizationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    organization_id?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserOrganizationCreateManyInput = {
    id?: number
    user_id: string
    organization_id: number
    role: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserOrganizationUpdateManyMutationInput = {
    role?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserOrganizationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    organization_id?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventSettingCreateInput = {
    setting_key: string
    setting_value: string
    created_at?: Date | string
    updated_at?: Date | string
    event: EventCreateNestedOneWithoutEvent_settingsInput
  }

  export type EventSettingUncheckedCreateInput = {
    id?: number
    event_id: number
    setting_key: string
    setting_value: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type EventSettingUpdateInput = {
    setting_key?: StringFieldUpdateOperationsInput | string
    setting_value?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutEvent_settingsNestedInput
  }

  export type EventSettingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    setting_key?: StringFieldUpdateOperationsInput | string
    setting_value?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventSettingCreateManyInput = {
    id?: number
    event_id: number
    setting_key: string
    setting_value: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type EventSettingUpdateManyMutationInput = {
    setting_key?: StringFieldUpdateOperationsInput | string
    setting_value?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventSettingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    setting_key?: StringFieldUpdateOperationsInput | string
    setting_value?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageCreateInput = {
    file_path: string
    file_name?: string | null
    file_type?: string | null
    file_size?: number | null
    alt_text?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutImagesInput
    image_links?: ImageLinkCreateNestedManyWithoutImageInput
  }

  export type ImageUncheckedCreateInput = {
    id?: number
    file_path: string
    file_name?: string | null
    file_type?: string | null
    file_size?: number | null
    alt_text?: string | null
    uploaded_by: string
    created_at?: Date | string
    updated_at?: Date | string
    image_links?: ImageLinkUncheckedCreateNestedManyWithoutImageInput
  }

  export type ImageUpdateInput = {
    file_path?: StringFieldUpdateOperationsInput | string
    file_name?: NullableStringFieldUpdateOperationsInput | string | null
    file_type?: NullableStringFieldUpdateOperationsInput | string | null
    file_size?: NullableIntFieldUpdateOperationsInput | number | null
    alt_text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutImagesNestedInput
    image_links?: ImageLinkUpdateManyWithoutImageNestedInput
  }

  export type ImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    file_path?: StringFieldUpdateOperationsInput | string
    file_name?: NullableStringFieldUpdateOperationsInput | string | null
    file_type?: NullableStringFieldUpdateOperationsInput | string | null
    file_size?: NullableIntFieldUpdateOperationsInput | number | null
    alt_text?: NullableStringFieldUpdateOperationsInput | string | null
    uploaded_by?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image_links?: ImageLinkUncheckedUpdateManyWithoutImageNestedInput
  }

  export type ImageCreateManyInput = {
    id?: number
    file_path: string
    file_name?: string | null
    file_type?: string | null
    file_size?: number | null
    alt_text?: string | null
    uploaded_by: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ImageUpdateManyMutationInput = {
    file_path?: StringFieldUpdateOperationsInput | string
    file_name?: NullableStringFieldUpdateOperationsInput | string | null
    file_type?: NullableStringFieldUpdateOperationsInput | string | null
    file_size?: NullableIntFieldUpdateOperationsInput | number | null
    alt_text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    file_path?: StringFieldUpdateOperationsInput | string
    file_name?: NullableStringFieldUpdateOperationsInput | string | null
    file_type?: NullableStringFieldUpdateOperationsInput | string | null
    file_size?: NullableIntFieldUpdateOperationsInput | number | null
    alt_text?: NullableStringFieldUpdateOperationsInput | string | null
    uploaded_by?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageLinkCreateInput = {
    entity_type: string
    entity_id: number
    usage_type: string
    linked_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    image: ImageCreateNestedOneWithoutImage_linksInput
    organization?: OrganizationCreateNestedOneWithoutImage_linksInput
    event?: EventCreateNestedOneWithoutImage_linksInput
  }

  export type ImageLinkUncheckedCreateInput = {
    id?: number
    image_id: number
    entity_type: string
    entity_id: number
    organization_id?: number | null
    event_id?: number | null
    usage_type: string
    linked_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ImageLinkUpdateInput = {
    entity_type?: StringFieldUpdateOperationsInput | string
    entity_id?: IntFieldUpdateOperationsInput | number
    usage_type?: StringFieldUpdateOperationsInput | string
    linked_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: ImageUpdateOneRequiredWithoutImage_linksNestedInput
    organization?: OrganizationUpdateOneWithoutImage_linksNestedInput
    event?: EventUpdateOneWithoutImage_linksNestedInput
  }

  export type ImageLinkUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_id?: IntFieldUpdateOperationsInput | number
    entity_type?: StringFieldUpdateOperationsInput | string
    entity_id?: IntFieldUpdateOperationsInput | number
    organization_id?: NullableIntFieldUpdateOperationsInput | number | null
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    usage_type?: StringFieldUpdateOperationsInput | string
    linked_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageLinkCreateManyInput = {
    id?: number
    image_id: number
    entity_type: string
    entity_id: number
    organization_id?: number | null
    event_id?: number | null
    usage_type: string
    linked_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ImageLinkUpdateManyMutationInput = {
    entity_type?: StringFieldUpdateOperationsInput | string
    entity_id?: IntFieldUpdateOperationsInput | number
    usage_type?: StringFieldUpdateOperationsInput | string
    linked_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageLinkUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_id?: IntFieldUpdateOperationsInput | number
    entity_type?: StringFieldUpdateOperationsInput | string
    entity_id?: IntFieldUpdateOperationsInput | number
    organization_id?: NullableIntFieldUpdateOperationsInput | number | null
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    usage_type?: StringFieldUpdateOperationsInput | string
    linked_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ReferralCodeListRelationFilter = {
    every?: ReferralCodeWhereInput
    some?: ReferralCodeWhereInput
    none?: ReferralCodeWhereInput
  }

  export type EmailLogListRelationFilter = {
    every?: EmailLogWhereInput
    some?: EmailLogWhereInput
    none?: EmailLogWhereInput
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type CheckinLogListRelationFilter = {
    every?: CheckinLogWhereInput
    some?: CheckinLogWhereInput
    none?: CheckinLogWhereInput
  }

  export type UserOrganizationListRelationFilter = {
    every?: UserOrganizationWhereInput
    some?: UserOrganizationWhereInput
    none?: UserOrganizationWhereInput
  }

  export type TrackingVisitListRelationFilter = {
    every?: TrackingVisitWhereInput
    some?: TrackingVisitWhereInput
    none?: TrackingVisitWhereInput
  }

  export type WebhookLogListRelationFilter = {
    every?: WebhookLogWhereInput
    some?: WebhookLogWhereInput
    none?: WebhookLogWhereInput
  }

  export type ImageListRelationFilter = {
    every?: ImageWhereInput
    some?: ImageWhereInput
    none?: ImageWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ReferralCodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CheckinLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrganizationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TrackingVisitOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WebhookLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    is_verified?: SortOrder
    supabase_id?: SortOrder
    phone?: SortOrder
    avatar_url?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    is_verified?: SortOrder
    supabase_id?: SortOrder
    phone?: SortOrder
    avatar_url?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    is_verified?: SortOrder
    supabase_id?: SortOrder
    phone?: SortOrder
    avatar_url?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type WebhookSubscriptionListRelationFilter = {
    every?: WebhookSubscriptionWhereInput
    some?: WebhookSubscriptionWhereInput
    none?: WebhookSubscriptionWhereInput
  }

  export type ImageLinkListRelationFilter = {
    every?: ImageLinkWhereInput
    some?: ImageLinkWhereInput
    none?: ImageLinkWhereInput
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WebhookSubscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ImageLinkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contact_email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OrganizationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OrganizationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contact_email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OrganizationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contact_email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OrganizationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type OrderPromoListRelationFilter = {
    every?: OrderPromoWhereInput
    some?: OrderPromoWhereInput
    none?: OrderPromoWhereInput
  }

  export type OrderPromoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PromoCodeCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    description?: SortOrder
    discount_type?: SortOrder
    discount_value?: SortOrder
    max_uses?: SortOrder
    uses?: SortOrder
    valid_from?: SortOrder
    valid_until?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PromoCodeAvgOrderByAggregateInput = {
    id?: SortOrder
    discount_value?: SortOrder
    max_uses?: SortOrder
    uses?: SortOrder
  }

  export type PromoCodeMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    description?: SortOrder
    discount_type?: SortOrder
    discount_value?: SortOrder
    max_uses?: SortOrder
    uses?: SortOrder
    valid_from?: SortOrder
    valid_until?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PromoCodeMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    description?: SortOrder
    discount_type?: SortOrder
    discount_value?: SortOrder
    max_uses?: SortOrder
    uses?: SortOrder
    valid_from?: SortOrder
    valid_until?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PromoCodeSumOrderByAggregateInput = {
    id?: SortOrder
    discount_value?: SortOrder
    max_uses?: SortOrder
    uses?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type OrderScalarRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type PromoCodeScalarRelationFilter = {
    is?: PromoCodeWhereInput
    isNot?: PromoCodeWhereInput
  }

  export type OrderPromoCountOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    promo_code_id?: SortOrder
    discount_applied?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OrderPromoAvgOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    promo_code_id?: SortOrder
    discount_applied?: SortOrder
  }

  export type OrderPromoMaxOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    promo_code_id?: SortOrder
    discount_applied?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OrderPromoMinOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    promo_code_id?: SortOrder
    discount_applied?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OrderPromoSumOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    promo_code_id?: SortOrder
    discount_applied?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ReferralCodeCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    code?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ReferralCodeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ReferralCodeMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    code?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ReferralCodeMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    code?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ReferralCodeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EventNullableScalarRelationFilter = {
    is?: EventWhereInput | null
    isNot?: EventWhereInput | null
  }

  export type EmailLogCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    event_id?: SortOrder
    email_type?: SortOrder
    subject?: SortOrder
    status?: SortOrder
    sent_at?: SortOrder
    error_message?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EmailLogAvgOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
  }

  export type EmailLogMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    event_id?: SortOrder
    email_type?: SortOrder
    subject?: SortOrder
    status?: SortOrder
    sent_at?: SortOrder
    error_message?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EmailLogMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    event_id?: SortOrder
    email_type?: SortOrder
    subject?: SortOrder
    status?: SortOrder
    sent_at?: SortOrder
    error_message?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EmailLogSumOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type OrderNullableScalarRelationFilter = {
    is?: OrderWhereInput | null
    isNot?: OrderWhereInput | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type WebhookLogCountOrderByAggregateInput = {
    id?: SortOrder
    target_url?: SortOrder
    event_type?: SortOrder
    order_id?: SortOrder
    event_id?: SortOrder
    user_id?: SortOrder
    payload?: SortOrder
    status_code?: SortOrder
    response_text?: SortOrder
    triggered_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type WebhookLogAvgOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    event_id?: SortOrder
    status_code?: SortOrder
  }

  export type WebhookLogMaxOrderByAggregateInput = {
    id?: SortOrder
    target_url?: SortOrder
    event_type?: SortOrder
    order_id?: SortOrder
    event_id?: SortOrder
    user_id?: SortOrder
    payload?: SortOrder
    status_code?: SortOrder
    response_text?: SortOrder
    triggered_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type WebhookLogMinOrderByAggregateInput = {
    id?: SortOrder
    target_url?: SortOrder
    event_type?: SortOrder
    order_id?: SortOrder
    event_id?: SortOrder
    user_id?: SortOrder
    payload?: SortOrder
    status_code?: SortOrder
    response_text?: SortOrder
    triggered_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type WebhookLogSumOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    event_id?: SortOrder
    status_code?: SortOrder
  }

  export type OrganizationScalarRelationFilter = {
    is?: OrganizationWhereInput
    isNot?: OrganizationWhereInput
  }

  export type WebhookSubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    organization_id?: SortOrder
    target_url?: SortOrder
    event_type?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type WebhookSubscriptionAvgOrderByAggregateInput = {
    id?: SortOrder
    organization_id?: SortOrder
  }

  export type WebhookSubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    organization_id?: SortOrder
    target_url?: SortOrder
    event_type?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type WebhookSubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    organization_id?: SortOrder
    target_url?: SortOrder
    event_type?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type WebhookSubscriptionSumOrderByAggregateInput = {
    id?: SortOrder
    organization_id?: SortOrder
  }

  export type EventScalarRelationFilter = {
    is?: EventWhereInput
    isNot?: EventWhereInput
  }

  export type TrackingVisitCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    event_id?: SortOrder
    utm_source?: SortOrder
    utm_medium?: SortOrder
    utm_campaign?: SortOrder
    utm_content?: SortOrder
    referrer_url?: SortOrder
    landing_page?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TrackingVisitAvgOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
  }

  export type TrackingVisitMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    event_id?: SortOrder
    utm_source?: SortOrder
    utm_medium?: SortOrder
    utm_campaign?: SortOrder
    utm_content?: SortOrder
    referrer_url?: SortOrder
    landing_page?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TrackingVisitMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    event_id?: SortOrder
    utm_source?: SortOrder
    utm_medium?: SortOrder
    utm_campaign?: SortOrder
    utm_content?: SortOrder
    referrer_url?: SortOrder
    landing_page?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TrackingVisitSumOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
  }

  export type TicketListRelationFilter = {
    every?: TicketWhereInput
    some?: TicketWhereInput
    none?: TicketWhereInput
  }

  export type EventSettingListRelationFilter = {
    every?: EventSettingWhereInput
    some?: EventSettingWhereInput
    none?: EventSettingWhereInput
  }

  export type TicketOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventSettingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    organization_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    date?: SortOrder
    location?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EventAvgOrderByAggregateInput = {
    id?: SortOrder
    organization_id?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    organization_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    date?: SortOrder
    location?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    organization_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    date?: SortOrder
    location?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EventSumOrderByAggregateInput = {
    id?: SortOrder
    organization_id?: SortOrder
  }

  export type OrderItemListRelationFilter = {
    every?: OrderItemWhereInput
    some?: OrderItemWhereInput
    none?: OrderItemWhereInput
  }

  export type OrderItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TicketCountOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    type?: SortOrder
    total?: SortOrder
    sold?: SortOrder
    start_sale_date?: SortOrder
    end_sale_date?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TicketAvgOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    price?: SortOrder
    total?: SortOrder
    sold?: SortOrder
  }

  export type TicketMaxOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    type?: SortOrder
    total?: SortOrder
    sold?: SortOrder
    start_sale_date?: SortOrder
    end_sale_date?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TicketMinOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    type?: SortOrder
    total?: SortOrder
    sold?: SortOrder
    start_sale_date?: SortOrder
    end_sale_date?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TicketSumOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    price?: SortOrder
    total?: SortOrder
    sold?: SortOrder
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    status?: SortOrder
    payment_method?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    status?: SortOrder
    payment_method?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    status?: SortOrder
    payment_method?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
  }

  export type TicketScalarRelationFilter = {
    is?: TicketWhereInput
    isNot?: TicketWhereInput
  }

  export type OrderItemCountOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    ticket_id?: SortOrder
    quantity?: SortOrder
    price_snapshot?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OrderItemAvgOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    ticket_id?: SortOrder
    quantity?: SortOrder
    price_snapshot?: SortOrder
  }

  export type OrderItemMaxOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    ticket_id?: SortOrder
    quantity?: SortOrder
    price_snapshot?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OrderItemMinOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    ticket_id?: SortOrder
    quantity?: SortOrder
    price_snapshot?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OrderItemSumOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    ticket_id?: SortOrder
    quantity?: SortOrder
    price_snapshot?: SortOrder
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    gateway?: SortOrder
    status?: SortOrder
    txn_code?: SortOrder
    paid_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    gateway?: SortOrder
    status?: SortOrder
    txn_code?: SortOrder
    paid_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    gateway?: SortOrder
    status?: SortOrder
    txn_code?: SortOrder
    paid_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
  }

  export type CheckinLogCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    ticket_id?: SortOrder
    event_id?: SortOrder
    checkin_time?: SortOrder
    verified_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CheckinLogAvgOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    event_id?: SortOrder
  }

  export type CheckinLogMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    ticket_id?: SortOrder
    event_id?: SortOrder
    checkin_time?: SortOrder
    verified_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CheckinLogMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    ticket_id?: SortOrder
    event_id?: SortOrder
    checkin_time?: SortOrder
    verified_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CheckinLogSumOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
    event_id?: SortOrder
  }

  export type UserOrganizationCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    organization_id?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserOrganizationAvgOrderByAggregateInput = {
    id?: SortOrder
    organization_id?: SortOrder
  }

  export type UserOrganizationMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    organization_id?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserOrganizationMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    organization_id?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserOrganizationSumOrderByAggregateInput = {
    id?: SortOrder
    organization_id?: SortOrder
  }

  export type EventSettingCountOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    setting_key?: SortOrder
    setting_value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EventSettingAvgOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
  }

  export type EventSettingMaxOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    setting_key?: SortOrder
    setting_value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EventSettingMinOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    setting_key?: SortOrder
    setting_value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EventSettingSumOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
  }

  export type ImageCountOrderByAggregateInput = {
    id?: SortOrder
    file_path?: SortOrder
    file_name?: SortOrder
    file_type?: SortOrder
    file_size?: SortOrder
    alt_text?: SortOrder
    uploaded_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ImageAvgOrderByAggregateInput = {
    id?: SortOrder
    file_size?: SortOrder
  }

  export type ImageMaxOrderByAggregateInput = {
    id?: SortOrder
    file_path?: SortOrder
    file_name?: SortOrder
    file_type?: SortOrder
    file_size?: SortOrder
    alt_text?: SortOrder
    uploaded_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ImageMinOrderByAggregateInput = {
    id?: SortOrder
    file_path?: SortOrder
    file_name?: SortOrder
    file_type?: SortOrder
    file_size?: SortOrder
    alt_text?: SortOrder
    uploaded_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ImageSumOrderByAggregateInput = {
    id?: SortOrder
    file_size?: SortOrder
  }

  export type ImageScalarRelationFilter = {
    is?: ImageWhereInput
    isNot?: ImageWhereInput
  }

  export type OrganizationNullableScalarRelationFilter = {
    is?: OrganizationWhereInput | null
    isNot?: OrganizationWhereInput | null
  }

  export type ImageLinkCountOrderByAggregateInput = {
    id?: SortOrder
    image_id?: SortOrder
    entity_type?: SortOrder
    entity_id?: SortOrder
    organization_id?: SortOrder
    event_id?: SortOrder
    usage_type?: SortOrder
    linked_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ImageLinkAvgOrderByAggregateInput = {
    id?: SortOrder
    image_id?: SortOrder
    entity_id?: SortOrder
    organization_id?: SortOrder
    event_id?: SortOrder
  }

  export type ImageLinkMaxOrderByAggregateInput = {
    id?: SortOrder
    image_id?: SortOrder
    entity_type?: SortOrder
    entity_id?: SortOrder
    organization_id?: SortOrder
    event_id?: SortOrder
    usage_type?: SortOrder
    linked_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ImageLinkMinOrderByAggregateInput = {
    id?: SortOrder
    image_id?: SortOrder
    entity_type?: SortOrder
    entity_id?: SortOrder
    organization_id?: SortOrder
    event_id?: SortOrder
    usage_type?: SortOrder
    linked_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ImageLinkSumOrderByAggregateInput = {
    id?: SortOrder
    image_id?: SortOrder
    entity_id?: SortOrder
    organization_id?: SortOrder
    event_id?: SortOrder
  }

  export type ReferralCodeCreateNestedManyWithoutUserInput = {
    create?: XOR<ReferralCodeCreateWithoutUserInput, ReferralCodeUncheckedCreateWithoutUserInput> | ReferralCodeCreateWithoutUserInput[] | ReferralCodeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReferralCodeCreateOrConnectWithoutUserInput | ReferralCodeCreateOrConnectWithoutUserInput[]
    createMany?: ReferralCodeCreateManyUserInputEnvelope
    connect?: ReferralCodeWhereUniqueInput | ReferralCodeWhereUniqueInput[]
  }

  export type EmailLogCreateNestedManyWithoutUserInput = {
    create?: XOR<EmailLogCreateWithoutUserInput, EmailLogUncheckedCreateWithoutUserInput> | EmailLogCreateWithoutUserInput[] | EmailLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailLogCreateOrConnectWithoutUserInput | EmailLogCreateOrConnectWithoutUserInput[]
    createMany?: EmailLogCreateManyUserInputEnvelope
    connect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type CheckinLogCreateNestedManyWithoutUserInput = {
    create?: XOR<CheckinLogCreateWithoutUserInput, CheckinLogUncheckedCreateWithoutUserInput> | CheckinLogCreateWithoutUserInput[] | CheckinLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CheckinLogCreateOrConnectWithoutUserInput | CheckinLogCreateOrConnectWithoutUserInput[]
    createMany?: CheckinLogCreateManyUserInputEnvelope
    connect?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
  }

  export type UserOrganizationCreateNestedManyWithoutUserInput = {
    create?: XOR<UserOrganizationCreateWithoutUserInput, UserOrganizationUncheckedCreateWithoutUserInput> | UserOrganizationCreateWithoutUserInput[] | UserOrganizationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserOrganizationCreateOrConnectWithoutUserInput | UserOrganizationCreateOrConnectWithoutUserInput[]
    createMany?: UserOrganizationCreateManyUserInputEnvelope
    connect?: UserOrganizationWhereUniqueInput | UserOrganizationWhereUniqueInput[]
  }

  export type TrackingVisitCreateNestedManyWithoutUserInput = {
    create?: XOR<TrackingVisitCreateWithoutUserInput, TrackingVisitUncheckedCreateWithoutUserInput> | TrackingVisitCreateWithoutUserInput[] | TrackingVisitUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TrackingVisitCreateOrConnectWithoutUserInput | TrackingVisitCreateOrConnectWithoutUserInput[]
    createMany?: TrackingVisitCreateManyUserInputEnvelope
    connect?: TrackingVisitWhereUniqueInput | TrackingVisitWhereUniqueInput[]
  }

  export type WebhookLogCreateNestedManyWithoutUserInput = {
    create?: XOR<WebhookLogCreateWithoutUserInput, WebhookLogUncheckedCreateWithoutUserInput> | WebhookLogCreateWithoutUserInput[] | WebhookLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WebhookLogCreateOrConnectWithoutUserInput | WebhookLogCreateOrConnectWithoutUserInput[]
    createMany?: WebhookLogCreateManyUserInputEnvelope
    connect?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
  }

  export type ImageCreateNestedManyWithoutUserInput = {
    create?: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput> | ImageCreateWithoutUserInput[] | ImageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutUserInput | ImageCreateOrConnectWithoutUserInput[]
    createMany?: ImageCreateManyUserInputEnvelope
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
  }

  export type ReferralCodeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReferralCodeCreateWithoutUserInput, ReferralCodeUncheckedCreateWithoutUserInput> | ReferralCodeCreateWithoutUserInput[] | ReferralCodeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReferralCodeCreateOrConnectWithoutUserInput | ReferralCodeCreateOrConnectWithoutUserInput[]
    createMany?: ReferralCodeCreateManyUserInputEnvelope
    connect?: ReferralCodeWhereUniqueInput | ReferralCodeWhereUniqueInput[]
  }

  export type EmailLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EmailLogCreateWithoutUserInput, EmailLogUncheckedCreateWithoutUserInput> | EmailLogCreateWithoutUserInput[] | EmailLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailLogCreateOrConnectWithoutUserInput | EmailLogCreateOrConnectWithoutUserInput[]
    createMany?: EmailLogCreateManyUserInputEnvelope
    connect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type CheckinLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CheckinLogCreateWithoutUserInput, CheckinLogUncheckedCreateWithoutUserInput> | CheckinLogCreateWithoutUserInput[] | CheckinLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CheckinLogCreateOrConnectWithoutUserInput | CheckinLogCreateOrConnectWithoutUserInput[]
    createMany?: CheckinLogCreateManyUserInputEnvelope
    connect?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
  }

  export type UserOrganizationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserOrganizationCreateWithoutUserInput, UserOrganizationUncheckedCreateWithoutUserInput> | UserOrganizationCreateWithoutUserInput[] | UserOrganizationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserOrganizationCreateOrConnectWithoutUserInput | UserOrganizationCreateOrConnectWithoutUserInput[]
    createMany?: UserOrganizationCreateManyUserInputEnvelope
    connect?: UserOrganizationWhereUniqueInput | UserOrganizationWhereUniqueInput[]
  }

  export type TrackingVisitUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TrackingVisitCreateWithoutUserInput, TrackingVisitUncheckedCreateWithoutUserInput> | TrackingVisitCreateWithoutUserInput[] | TrackingVisitUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TrackingVisitCreateOrConnectWithoutUserInput | TrackingVisitCreateOrConnectWithoutUserInput[]
    createMany?: TrackingVisitCreateManyUserInputEnvelope
    connect?: TrackingVisitWhereUniqueInput | TrackingVisitWhereUniqueInput[]
  }

  export type WebhookLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WebhookLogCreateWithoutUserInput, WebhookLogUncheckedCreateWithoutUserInput> | WebhookLogCreateWithoutUserInput[] | WebhookLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WebhookLogCreateOrConnectWithoutUserInput | WebhookLogCreateOrConnectWithoutUserInput[]
    createMany?: WebhookLogCreateManyUserInputEnvelope
    connect?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
  }

  export type ImageUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput> | ImageCreateWithoutUserInput[] | ImageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutUserInput | ImageCreateOrConnectWithoutUserInput[]
    createMany?: ImageCreateManyUserInputEnvelope
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ReferralCodeUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReferralCodeCreateWithoutUserInput, ReferralCodeUncheckedCreateWithoutUserInput> | ReferralCodeCreateWithoutUserInput[] | ReferralCodeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReferralCodeCreateOrConnectWithoutUserInput | ReferralCodeCreateOrConnectWithoutUserInput[]
    upsert?: ReferralCodeUpsertWithWhereUniqueWithoutUserInput | ReferralCodeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReferralCodeCreateManyUserInputEnvelope
    set?: ReferralCodeWhereUniqueInput | ReferralCodeWhereUniqueInput[]
    disconnect?: ReferralCodeWhereUniqueInput | ReferralCodeWhereUniqueInput[]
    delete?: ReferralCodeWhereUniqueInput | ReferralCodeWhereUniqueInput[]
    connect?: ReferralCodeWhereUniqueInput | ReferralCodeWhereUniqueInput[]
    update?: ReferralCodeUpdateWithWhereUniqueWithoutUserInput | ReferralCodeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReferralCodeUpdateManyWithWhereWithoutUserInput | ReferralCodeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReferralCodeScalarWhereInput | ReferralCodeScalarWhereInput[]
  }

  export type EmailLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<EmailLogCreateWithoutUserInput, EmailLogUncheckedCreateWithoutUserInput> | EmailLogCreateWithoutUserInput[] | EmailLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailLogCreateOrConnectWithoutUserInput | EmailLogCreateOrConnectWithoutUserInput[]
    upsert?: EmailLogUpsertWithWhereUniqueWithoutUserInput | EmailLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EmailLogCreateManyUserInputEnvelope
    set?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    disconnect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    delete?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    connect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    update?: EmailLogUpdateWithWhereUniqueWithoutUserInput | EmailLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EmailLogUpdateManyWithWhereWithoutUserInput | EmailLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EmailLogScalarWhereInput | EmailLogScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type CheckinLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<CheckinLogCreateWithoutUserInput, CheckinLogUncheckedCreateWithoutUserInput> | CheckinLogCreateWithoutUserInput[] | CheckinLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CheckinLogCreateOrConnectWithoutUserInput | CheckinLogCreateOrConnectWithoutUserInput[]
    upsert?: CheckinLogUpsertWithWhereUniqueWithoutUserInput | CheckinLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CheckinLogCreateManyUserInputEnvelope
    set?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    disconnect?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    delete?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    connect?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    update?: CheckinLogUpdateWithWhereUniqueWithoutUserInput | CheckinLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CheckinLogUpdateManyWithWhereWithoutUserInput | CheckinLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CheckinLogScalarWhereInput | CheckinLogScalarWhereInput[]
  }

  export type UserOrganizationUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserOrganizationCreateWithoutUserInput, UserOrganizationUncheckedCreateWithoutUserInput> | UserOrganizationCreateWithoutUserInput[] | UserOrganizationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserOrganizationCreateOrConnectWithoutUserInput | UserOrganizationCreateOrConnectWithoutUserInput[]
    upsert?: UserOrganizationUpsertWithWhereUniqueWithoutUserInput | UserOrganizationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserOrganizationCreateManyUserInputEnvelope
    set?: UserOrganizationWhereUniqueInput | UserOrganizationWhereUniqueInput[]
    disconnect?: UserOrganizationWhereUniqueInput | UserOrganizationWhereUniqueInput[]
    delete?: UserOrganizationWhereUniqueInput | UserOrganizationWhereUniqueInput[]
    connect?: UserOrganizationWhereUniqueInput | UserOrganizationWhereUniqueInput[]
    update?: UserOrganizationUpdateWithWhereUniqueWithoutUserInput | UserOrganizationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserOrganizationUpdateManyWithWhereWithoutUserInput | UserOrganizationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserOrganizationScalarWhereInput | UserOrganizationScalarWhereInput[]
  }

  export type TrackingVisitUpdateManyWithoutUserNestedInput = {
    create?: XOR<TrackingVisitCreateWithoutUserInput, TrackingVisitUncheckedCreateWithoutUserInput> | TrackingVisitCreateWithoutUserInput[] | TrackingVisitUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TrackingVisitCreateOrConnectWithoutUserInput | TrackingVisitCreateOrConnectWithoutUserInput[]
    upsert?: TrackingVisitUpsertWithWhereUniqueWithoutUserInput | TrackingVisitUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TrackingVisitCreateManyUserInputEnvelope
    set?: TrackingVisitWhereUniqueInput | TrackingVisitWhereUniqueInput[]
    disconnect?: TrackingVisitWhereUniqueInput | TrackingVisitWhereUniqueInput[]
    delete?: TrackingVisitWhereUniqueInput | TrackingVisitWhereUniqueInput[]
    connect?: TrackingVisitWhereUniqueInput | TrackingVisitWhereUniqueInput[]
    update?: TrackingVisitUpdateWithWhereUniqueWithoutUserInput | TrackingVisitUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TrackingVisitUpdateManyWithWhereWithoutUserInput | TrackingVisitUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TrackingVisitScalarWhereInput | TrackingVisitScalarWhereInput[]
  }

  export type WebhookLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<WebhookLogCreateWithoutUserInput, WebhookLogUncheckedCreateWithoutUserInput> | WebhookLogCreateWithoutUserInput[] | WebhookLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WebhookLogCreateOrConnectWithoutUserInput | WebhookLogCreateOrConnectWithoutUserInput[]
    upsert?: WebhookLogUpsertWithWhereUniqueWithoutUserInput | WebhookLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WebhookLogCreateManyUserInputEnvelope
    set?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    disconnect?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    delete?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    connect?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    update?: WebhookLogUpdateWithWhereUniqueWithoutUserInput | WebhookLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WebhookLogUpdateManyWithWhereWithoutUserInput | WebhookLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WebhookLogScalarWhereInput | WebhookLogScalarWhereInput[]
  }

  export type ImageUpdateManyWithoutUserNestedInput = {
    create?: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput> | ImageCreateWithoutUserInput[] | ImageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutUserInput | ImageCreateOrConnectWithoutUserInput[]
    upsert?: ImageUpsertWithWhereUniqueWithoutUserInput | ImageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ImageCreateManyUserInputEnvelope
    set?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    disconnect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    delete?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    update?: ImageUpdateWithWhereUniqueWithoutUserInput | ImageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ImageUpdateManyWithWhereWithoutUserInput | ImageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ImageScalarWhereInput | ImageScalarWhereInput[]
  }

  export type ReferralCodeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReferralCodeCreateWithoutUserInput, ReferralCodeUncheckedCreateWithoutUserInput> | ReferralCodeCreateWithoutUserInput[] | ReferralCodeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReferralCodeCreateOrConnectWithoutUserInput | ReferralCodeCreateOrConnectWithoutUserInput[]
    upsert?: ReferralCodeUpsertWithWhereUniqueWithoutUserInput | ReferralCodeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReferralCodeCreateManyUserInputEnvelope
    set?: ReferralCodeWhereUniqueInput | ReferralCodeWhereUniqueInput[]
    disconnect?: ReferralCodeWhereUniqueInput | ReferralCodeWhereUniqueInput[]
    delete?: ReferralCodeWhereUniqueInput | ReferralCodeWhereUniqueInput[]
    connect?: ReferralCodeWhereUniqueInput | ReferralCodeWhereUniqueInput[]
    update?: ReferralCodeUpdateWithWhereUniqueWithoutUserInput | ReferralCodeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReferralCodeUpdateManyWithWhereWithoutUserInput | ReferralCodeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReferralCodeScalarWhereInput | ReferralCodeScalarWhereInput[]
  }

  export type EmailLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EmailLogCreateWithoutUserInput, EmailLogUncheckedCreateWithoutUserInput> | EmailLogCreateWithoutUserInput[] | EmailLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailLogCreateOrConnectWithoutUserInput | EmailLogCreateOrConnectWithoutUserInput[]
    upsert?: EmailLogUpsertWithWhereUniqueWithoutUserInput | EmailLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EmailLogCreateManyUserInputEnvelope
    set?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    disconnect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    delete?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    connect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    update?: EmailLogUpdateWithWhereUniqueWithoutUserInput | EmailLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EmailLogUpdateManyWithWhereWithoutUserInput | EmailLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EmailLogScalarWhereInput | EmailLogScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type CheckinLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CheckinLogCreateWithoutUserInput, CheckinLogUncheckedCreateWithoutUserInput> | CheckinLogCreateWithoutUserInput[] | CheckinLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CheckinLogCreateOrConnectWithoutUserInput | CheckinLogCreateOrConnectWithoutUserInput[]
    upsert?: CheckinLogUpsertWithWhereUniqueWithoutUserInput | CheckinLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CheckinLogCreateManyUserInputEnvelope
    set?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    disconnect?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    delete?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    connect?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    update?: CheckinLogUpdateWithWhereUniqueWithoutUserInput | CheckinLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CheckinLogUpdateManyWithWhereWithoutUserInput | CheckinLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CheckinLogScalarWhereInput | CheckinLogScalarWhereInput[]
  }

  export type UserOrganizationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserOrganizationCreateWithoutUserInput, UserOrganizationUncheckedCreateWithoutUserInput> | UserOrganizationCreateWithoutUserInput[] | UserOrganizationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserOrganizationCreateOrConnectWithoutUserInput | UserOrganizationCreateOrConnectWithoutUserInput[]
    upsert?: UserOrganizationUpsertWithWhereUniqueWithoutUserInput | UserOrganizationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserOrganizationCreateManyUserInputEnvelope
    set?: UserOrganizationWhereUniqueInput | UserOrganizationWhereUniqueInput[]
    disconnect?: UserOrganizationWhereUniqueInput | UserOrganizationWhereUniqueInput[]
    delete?: UserOrganizationWhereUniqueInput | UserOrganizationWhereUniqueInput[]
    connect?: UserOrganizationWhereUniqueInput | UserOrganizationWhereUniqueInput[]
    update?: UserOrganizationUpdateWithWhereUniqueWithoutUserInput | UserOrganizationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserOrganizationUpdateManyWithWhereWithoutUserInput | UserOrganizationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserOrganizationScalarWhereInput | UserOrganizationScalarWhereInput[]
  }

  export type TrackingVisitUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TrackingVisitCreateWithoutUserInput, TrackingVisitUncheckedCreateWithoutUserInput> | TrackingVisitCreateWithoutUserInput[] | TrackingVisitUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TrackingVisitCreateOrConnectWithoutUserInput | TrackingVisitCreateOrConnectWithoutUserInput[]
    upsert?: TrackingVisitUpsertWithWhereUniqueWithoutUserInput | TrackingVisitUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TrackingVisitCreateManyUserInputEnvelope
    set?: TrackingVisitWhereUniqueInput | TrackingVisitWhereUniqueInput[]
    disconnect?: TrackingVisitWhereUniqueInput | TrackingVisitWhereUniqueInput[]
    delete?: TrackingVisitWhereUniqueInput | TrackingVisitWhereUniqueInput[]
    connect?: TrackingVisitWhereUniqueInput | TrackingVisitWhereUniqueInput[]
    update?: TrackingVisitUpdateWithWhereUniqueWithoutUserInput | TrackingVisitUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TrackingVisitUpdateManyWithWhereWithoutUserInput | TrackingVisitUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TrackingVisitScalarWhereInput | TrackingVisitScalarWhereInput[]
  }

  export type WebhookLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WebhookLogCreateWithoutUserInput, WebhookLogUncheckedCreateWithoutUserInput> | WebhookLogCreateWithoutUserInput[] | WebhookLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WebhookLogCreateOrConnectWithoutUserInput | WebhookLogCreateOrConnectWithoutUserInput[]
    upsert?: WebhookLogUpsertWithWhereUniqueWithoutUserInput | WebhookLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WebhookLogCreateManyUserInputEnvelope
    set?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    disconnect?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    delete?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    connect?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    update?: WebhookLogUpdateWithWhereUniqueWithoutUserInput | WebhookLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WebhookLogUpdateManyWithWhereWithoutUserInput | WebhookLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WebhookLogScalarWhereInput | WebhookLogScalarWhereInput[]
  }

  export type ImageUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput> | ImageCreateWithoutUserInput[] | ImageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutUserInput | ImageCreateOrConnectWithoutUserInput[]
    upsert?: ImageUpsertWithWhereUniqueWithoutUserInput | ImageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ImageCreateManyUserInputEnvelope
    set?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    disconnect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    delete?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    update?: ImageUpdateWithWhereUniqueWithoutUserInput | ImageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ImageUpdateManyWithWhereWithoutUserInput | ImageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ImageScalarWhereInput | ImageScalarWhereInput[]
  }

  export type EventCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<EventCreateWithoutOrganizationInput, EventUncheckedCreateWithoutOrganizationInput> | EventCreateWithoutOrganizationInput[] | EventUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: EventCreateOrConnectWithoutOrganizationInput | EventCreateOrConnectWithoutOrganizationInput[]
    createMany?: EventCreateManyOrganizationInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type WebhookSubscriptionCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<WebhookSubscriptionCreateWithoutOrganizationInput, WebhookSubscriptionUncheckedCreateWithoutOrganizationInput> | WebhookSubscriptionCreateWithoutOrganizationInput[] | WebhookSubscriptionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: WebhookSubscriptionCreateOrConnectWithoutOrganizationInput | WebhookSubscriptionCreateOrConnectWithoutOrganizationInput[]
    createMany?: WebhookSubscriptionCreateManyOrganizationInputEnvelope
    connect?: WebhookSubscriptionWhereUniqueInput | WebhookSubscriptionWhereUniqueInput[]
  }

  export type UserOrganizationCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UserOrganizationCreateWithoutOrganizationInput, UserOrganizationUncheckedCreateWithoutOrganizationInput> | UserOrganizationCreateWithoutOrganizationInput[] | UserOrganizationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserOrganizationCreateOrConnectWithoutOrganizationInput | UserOrganizationCreateOrConnectWithoutOrganizationInput[]
    createMany?: UserOrganizationCreateManyOrganizationInputEnvelope
    connect?: UserOrganizationWhereUniqueInput | UserOrganizationWhereUniqueInput[]
  }

  export type ImageLinkCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ImageLinkCreateWithoutOrganizationInput, ImageLinkUncheckedCreateWithoutOrganizationInput> | ImageLinkCreateWithoutOrganizationInput[] | ImageLinkUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ImageLinkCreateOrConnectWithoutOrganizationInput | ImageLinkCreateOrConnectWithoutOrganizationInput[]
    createMany?: ImageLinkCreateManyOrganizationInputEnvelope
    connect?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<EventCreateWithoutOrganizationInput, EventUncheckedCreateWithoutOrganizationInput> | EventCreateWithoutOrganizationInput[] | EventUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: EventCreateOrConnectWithoutOrganizationInput | EventCreateOrConnectWithoutOrganizationInput[]
    createMany?: EventCreateManyOrganizationInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type WebhookSubscriptionUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<WebhookSubscriptionCreateWithoutOrganizationInput, WebhookSubscriptionUncheckedCreateWithoutOrganizationInput> | WebhookSubscriptionCreateWithoutOrganizationInput[] | WebhookSubscriptionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: WebhookSubscriptionCreateOrConnectWithoutOrganizationInput | WebhookSubscriptionCreateOrConnectWithoutOrganizationInput[]
    createMany?: WebhookSubscriptionCreateManyOrganizationInputEnvelope
    connect?: WebhookSubscriptionWhereUniqueInput | WebhookSubscriptionWhereUniqueInput[]
  }

  export type UserOrganizationUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UserOrganizationCreateWithoutOrganizationInput, UserOrganizationUncheckedCreateWithoutOrganizationInput> | UserOrganizationCreateWithoutOrganizationInput[] | UserOrganizationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserOrganizationCreateOrConnectWithoutOrganizationInput | UserOrganizationCreateOrConnectWithoutOrganizationInput[]
    createMany?: UserOrganizationCreateManyOrganizationInputEnvelope
    connect?: UserOrganizationWhereUniqueInput | UserOrganizationWhereUniqueInput[]
  }

  export type ImageLinkUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ImageLinkCreateWithoutOrganizationInput, ImageLinkUncheckedCreateWithoutOrganizationInput> | ImageLinkCreateWithoutOrganizationInput[] | ImageLinkUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ImageLinkCreateOrConnectWithoutOrganizationInput | ImageLinkCreateOrConnectWithoutOrganizationInput[]
    createMany?: ImageLinkCreateManyOrganizationInputEnvelope
    connect?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
  }

  export type EventUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<EventCreateWithoutOrganizationInput, EventUncheckedCreateWithoutOrganizationInput> | EventCreateWithoutOrganizationInput[] | EventUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: EventCreateOrConnectWithoutOrganizationInput | EventCreateOrConnectWithoutOrganizationInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutOrganizationInput | EventUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: EventCreateManyOrganizationInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutOrganizationInput | EventUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: EventUpdateManyWithWhereWithoutOrganizationInput | EventUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type WebhookSubscriptionUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<WebhookSubscriptionCreateWithoutOrganizationInput, WebhookSubscriptionUncheckedCreateWithoutOrganizationInput> | WebhookSubscriptionCreateWithoutOrganizationInput[] | WebhookSubscriptionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: WebhookSubscriptionCreateOrConnectWithoutOrganizationInput | WebhookSubscriptionCreateOrConnectWithoutOrganizationInput[]
    upsert?: WebhookSubscriptionUpsertWithWhereUniqueWithoutOrganizationInput | WebhookSubscriptionUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: WebhookSubscriptionCreateManyOrganizationInputEnvelope
    set?: WebhookSubscriptionWhereUniqueInput | WebhookSubscriptionWhereUniqueInput[]
    disconnect?: WebhookSubscriptionWhereUniqueInput | WebhookSubscriptionWhereUniqueInput[]
    delete?: WebhookSubscriptionWhereUniqueInput | WebhookSubscriptionWhereUniqueInput[]
    connect?: WebhookSubscriptionWhereUniqueInput | WebhookSubscriptionWhereUniqueInput[]
    update?: WebhookSubscriptionUpdateWithWhereUniqueWithoutOrganizationInput | WebhookSubscriptionUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: WebhookSubscriptionUpdateManyWithWhereWithoutOrganizationInput | WebhookSubscriptionUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: WebhookSubscriptionScalarWhereInput | WebhookSubscriptionScalarWhereInput[]
  }

  export type UserOrganizationUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UserOrganizationCreateWithoutOrganizationInput, UserOrganizationUncheckedCreateWithoutOrganizationInput> | UserOrganizationCreateWithoutOrganizationInput[] | UserOrganizationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserOrganizationCreateOrConnectWithoutOrganizationInput | UserOrganizationCreateOrConnectWithoutOrganizationInput[]
    upsert?: UserOrganizationUpsertWithWhereUniqueWithoutOrganizationInput | UserOrganizationUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UserOrganizationCreateManyOrganizationInputEnvelope
    set?: UserOrganizationWhereUniqueInput | UserOrganizationWhereUniqueInput[]
    disconnect?: UserOrganizationWhereUniqueInput | UserOrganizationWhereUniqueInput[]
    delete?: UserOrganizationWhereUniqueInput | UserOrganizationWhereUniqueInput[]
    connect?: UserOrganizationWhereUniqueInput | UserOrganizationWhereUniqueInput[]
    update?: UserOrganizationUpdateWithWhereUniqueWithoutOrganizationInput | UserOrganizationUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UserOrganizationUpdateManyWithWhereWithoutOrganizationInput | UserOrganizationUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UserOrganizationScalarWhereInput | UserOrganizationScalarWhereInput[]
  }

  export type ImageLinkUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ImageLinkCreateWithoutOrganizationInput, ImageLinkUncheckedCreateWithoutOrganizationInput> | ImageLinkCreateWithoutOrganizationInput[] | ImageLinkUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ImageLinkCreateOrConnectWithoutOrganizationInput | ImageLinkCreateOrConnectWithoutOrganizationInput[]
    upsert?: ImageLinkUpsertWithWhereUniqueWithoutOrganizationInput | ImageLinkUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ImageLinkCreateManyOrganizationInputEnvelope
    set?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    disconnect?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    delete?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    connect?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    update?: ImageLinkUpdateWithWhereUniqueWithoutOrganizationInput | ImageLinkUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ImageLinkUpdateManyWithWhereWithoutOrganizationInput | ImageLinkUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ImageLinkScalarWhereInput | ImageLinkScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EventUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<EventCreateWithoutOrganizationInput, EventUncheckedCreateWithoutOrganizationInput> | EventCreateWithoutOrganizationInput[] | EventUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: EventCreateOrConnectWithoutOrganizationInput | EventCreateOrConnectWithoutOrganizationInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutOrganizationInput | EventUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: EventCreateManyOrganizationInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutOrganizationInput | EventUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: EventUpdateManyWithWhereWithoutOrganizationInput | EventUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type WebhookSubscriptionUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<WebhookSubscriptionCreateWithoutOrganizationInput, WebhookSubscriptionUncheckedCreateWithoutOrganizationInput> | WebhookSubscriptionCreateWithoutOrganizationInput[] | WebhookSubscriptionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: WebhookSubscriptionCreateOrConnectWithoutOrganizationInput | WebhookSubscriptionCreateOrConnectWithoutOrganizationInput[]
    upsert?: WebhookSubscriptionUpsertWithWhereUniqueWithoutOrganizationInput | WebhookSubscriptionUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: WebhookSubscriptionCreateManyOrganizationInputEnvelope
    set?: WebhookSubscriptionWhereUniqueInput | WebhookSubscriptionWhereUniqueInput[]
    disconnect?: WebhookSubscriptionWhereUniqueInput | WebhookSubscriptionWhereUniqueInput[]
    delete?: WebhookSubscriptionWhereUniqueInput | WebhookSubscriptionWhereUniqueInput[]
    connect?: WebhookSubscriptionWhereUniqueInput | WebhookSubscriptionWhereUniqueInput[]
    update?: WebhookSubscriptionUpdateWithWhereUniqueWithoutOrganizationInput | WebhookSubscriptionUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: WebhookSubscriptionUpdateManyWithWhereWithoutOrganizationInput | WebhookSubscriptionUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: WebhookSubscriptionScalarWhereInput | WebhookSubscriptionScalarWhereInput[]
  }

  export type UserOrganizationUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UserOrganizationCreateWithoutOrganizationInput, UserOrganizationUncheckedCreateWithoutOrganizationInput> | UserOrganizationCreateWithoutOrganizationInput[] | UserOrganizationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserOrganizationCreateOrConnectWithoutOrganizationInput | UserOrganizationCreateOrConnectWithoutOrganizationInput[]
    upsert?: UserOrganizationUpsertWithWhereUniqueWithoutOrganizationInput | UserOrganizationUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UserOrganizationCreateManyOrganizationInputEnvelope
    set?: UserOrganizationWhereUniqueInput | UserOrganizationWhereUniqueInput[]
    disconnect?: UserOrganizationWhereUniqueInput | UserOrganizationWhereUniqueInput[]
    delete?: UserOrganizationWhereUniqueInput | UserOrganizationWhereUniqueInput[]
    connect?: UserOrganizationWhereUniqueInput | UserOrganizationWhereUniqueInput[]
    update?: UserOrganizationUpdateWithWhereUniqueWithoutOrganizationInput | UserOrganizationUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UserOrganizationUpdateManyWithWhereWithoutOrganizationInput | UserOrganizationUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UserOrganizationScalarWhereInput | UserOrganizationScalarWhereInput[]
  }

  export type ImageLinkUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ImageLinkCreateWithoutOrganizationInput, ImageLinkUncheckedCreateWithoutOrganizationInput> | ImageLinkCreateWithoutOrganizationInput[] | ImageLinkUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ImageLinkCreateOrConnectWithoutOrganizationInput | ImageLinkCreateOrConnectWithoutOrganizationInput[]
    upsert?: ImageLinkUpsertWithWhereUniqueWithoutOrganizationInput | ImageLinkUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ImageLinkCreateManyOrganizationInputEnvelope
    set?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    disconnect?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    delete?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    connect?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    update?: ImageLinkUpdateWithWhereUniqueWithoutOrganizationInput | ImageLinkUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ImageLinkUpdateManyWithWhereWithoutOrganizationInput | ImageLinkUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ImageLinkScalarWhereInput | ImageLinkScalarWhereInput[]
  }

  export type OrderPromoCreateNestedManyWithoutPromo_codeInput = {
    create?: XOR<OrderPromoCreateWithoutPromo_codeInput, OrderPromoUncheckedCreateWithoutPromo_codeInput> | OrderPromoCreateWithoutPromo_codeInput[] | OrderPromoUncheckedCreateWithoutPromo_codeInput[]
    connectOrCreate?: OrderPromoCreateOrConnectWithoutPromo_codeInput | OrderPromoCreateOrConnectWithoutPromo_codeInput[]
    createMany?: OrderPromoCreateManyPromo_codeInputEnvelope
    connect?: OrderPromoWhereUniqueInput | OrderPromoWhereUniqueInput[]
  }

  export type OrderPromoUncheckedCreateNestedManyWithoutPromo_codeInput = {
    create?: XOR<OrderPromoCreateWithoutPromo_codeInput, OrderPromoUncheckedCreateWithoutPromo_codeInput> | OrderPromoCreateWithoutPromo_codeInput[] | OrderPromoUncheckedCreateWithoutPromo_codeInput[]
    connectOrCreate?: OrderPromoCreateOrConnectWithoutPromo_codeInput | OrderPromoCreateOrConnectWithoutPromo_codeInput[]
    createMany?: OrderPromoCreateManyPromo_codeInputEnvelope
    connect?: OrderPromoWhereUniqueInput | OrderPromoWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type OrderPromoUpdateManyWithoutPromo_codeNestedInput = {
    create?: XOR<OrderPromoCreateWithoutPromo_codeInput, OrderPromoUncheckedCreateWithoutPromo_codeInput> | OrderPromoCreateWithoutPromo_codeInput[] | OrderPromoUncheckedCreateWithoutPromo_codeInput[]
    connectOrCreate?: OrderPromoCreateOrConnectWithoutPromo_codeInput | OrderPromoCreateOrConnectWithoutPromo_codeInput[]
    upsert?: OrderPromoUpsertWithWhereUniqueWithoutPromo_codeInput | OrderPromoUpsertWithWhereUniqueWithoutPromo_codeInput[]
    createMany?: OrderPromoCreateManyPromo_codeInputEnvelope
    set?: OrderPromoWhereUniqueInput | OrderPromoWhereUniqueInput[]
    disconnect?: OrderPromoWhereUniqueInput | OrderPromoWhereUniqueInput[]
    delete?: OrderPromoWhereUniqueInput | OrderPromoWhereUniqueInput[]
    connect?: OrderPromoWhereUniqueInput | OrderPromoWhereUniqueInput[]
    update?: OrderPromoUpdateWithWhereUniqueWithoutPromo_codeInput | OrderPromoUpdateWithWhereUniqueWithoutPromo_codeInput[]
    updateMany?: OrderPromoUpdateManyWithWhereWithoutPromo_codeInput | OrderPromoUpdateManyWithWhereWithoutPromo_codeInput[]
    deleteMany?: OrderPromoScalarWhereInput | OrderPromoScalarWhereInput[]
  }

  export type OrderPromoUncheckedUpdateManyWithoutPromo_codeNestedInput = {
    create?: XOR<OrderPromoCreateWithoutPromo_codeInput, OrderPromoUncheckedCreateWithoutPromo_codeInput> | OrderPromoCreateWithoutPromo_codeInput[] | OrderPromoUncheckedCreateWithoutPromo_codeInput[]
    connectOrCreate?: OrderPromoCreateOrConnectWithoutPromo_codeInput | OrderPromoCreateOrConnectWithoutPromo_codeInput[]
    upsert?: OrderPromoUpsertWithWhereUniqueWithoutPromo_codeInput | OrderPromoUpsertWithWhereUniqueWithoutPromo_codeInput[]
    createMany?: OrderPromoCreateManyPromo_codeInputEnvelope
    set?: OrderPromoWhereUniqueInput | OrderPromoWhereUniqueInput[]
    disconnect?: OrderPromoWhereUniqueInput | OrderPromoWhereUniqueInput[]
    delete?: OrderPromoWhereUniqueInput | OrderPromoWhereUniqueInput[]
    connect?: OrderPromoWhereUniqueInput | OrderPromoWhereUniqueInput[]
    update?: OrderPromoUpdateWithWhereUniqueWithoutPromo_codeInput | OrderPromoUpdateWithWhereUniqueWithoutPromo_codeInput[]
    updateMany?: OrderPromoUpdateManyWithWhereWithoutPromo_codeInput | OrderPromoUpdateManyWithWhereWithoutPromo_codeInput[]
    deleteMany?: OrderPromoScalarWhereInput | OrderPromoScalarWhereInput[]
  }

  export type OrderCreateNestedOneWithoutOrder_promosInput = {
    create?: XOR<OrderCreateWithoutOrder_promosInput, OrderUncheckedCreateWithoutOrder_promosInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrder_promosInput
    connect?: OrderWhereUniqueInput
  }

  export type PromoCodeCreateNestedOneWithoutOrder_promosInput = {
    create?: XOR<PromoCodeCreateWithoutOrder_promosInput, PromoCodeUncheckedCreateWithoutOrder_promosInput>
    connectOrCreate?: PromoCodeCreateOrConnectWithoutOrder_promosInput
    connect?: PromoCodeWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutOrder_promosNestedInput = {
    create?: XOR<OrderCreateWithoutOrder_promosInput, OrderUncheckedCreateWithoutOrder_promosInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrder_promosInput
    upsert?: OrderUpsertWithoutOrder_promosInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutOrder_promosInput, OrderUpdateWithoutOrder_promosInput>, OrderUncheckedUpdateWithoutOrder_promosInput>
  }

  export type PromoCodeUpdateOneRequiredWithoutOrder_promosNestedInput = {
    create?: XOR<PromoCodeCreateWithoutOrder_promosInput, PromoCodeUncheckedCreateWithoutOrder_promosInput>
    connectOrCreate?: PromoCodeCreateOrConnectWithoutOrder_promosInput
    upsert?: PromoCodeUpsertWithoutOrder_promosInput
    connect?: PromoCodeWhereUniqueInput
    update?: XOR<XOR<PromoCodeUpdateToOneWithWhereWithoutOrder_promosInput, PromoCodeUpdateWithoutOrder_promosInput>, PromoCodeUncheckedUpdateWithoutOrder_promosInput>
  }

  export type UserCreateNestedOneWithoutReferral_codesInput = {
    create?: XOR<UserCreateWithoutReferral_codesInput, UserUncheckedCreateWithoutReferral_codesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferral_codesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReferral_codesNestedInput = {
    create?: XOR<UserCreateWithoutReferral_codesInput, UserUncheckedCreateWithoutReferral_codesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferral_codesInput
    upsert?: UserUpsertWithoutReferral_codesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReferral_codesInput, UserUpdateWithoutReferral_codesInput>, UserUncheckedUpdateWithoutReferral_codesInput>
  }

  export type UserCreateNestedOneWithoutEmail_logsInput = {
    create?: XOR<UserCreateWithoutEmail_logsInput, UserUncheckedCreateWithoutEmail_logsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmail_logsInput
    connect?: UserWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutEmail_logsInput = {
    create?: XOR<EventCreateWithoutEmail_logsInput, EventUncheckedCreateWithoutEmail_logsInput>
    connectOrCreate?: EventCreateOrConnectWithoutEmail_logsInput
    connect?: EventWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutEmail_logsNestedInput = {
    create?: XOR<UserCreateWithoutEmail_logsInput, UserUncheckedCreateWithoutEmail_logsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmail_logsInput
    upsert?: UserUpsertWithoutEmail_logsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmail_logsInput, UserUpdateWithoutEmail_logsInput>, UserUncheckedUpdateWithoutEmail_logsInput>
  }

  export type EventUpdateOneWithoutEmail_logsNestedInput = {
    create?: XOR<EventCreateWithoutEmail_logsInput, EventUncheckedCreateWithoutEmail_logsInput>
    connectOrCreate?: EventCreateOrConnectWithoutEmail_logsInput
    upsert?: EventUpsertWithoutEmail_logsInput
    disconnect?: EventWhereInput | boolean
    delete?: EventWhereInput | boolean
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutEmail_logsInput, EventUpdateWithoutEmail_logsInput>, EventUncheckedUpdateWithoutEmail_logsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OrderCreateNestedOneWithoutWebhook_logsInput = {
    create?: XOR<OrderCreateWithoutWebhook_logsInput, OrderUncheckedCreateWithoutWebhook_logsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutWebhook_logsInput
    connect?: OrderWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutWebhook_logsInput = {
    create?: XOR<EventCreateWithoutWebhook_logsInput, EventUncheckedCreateWithoutWebhook_logsInput>
    connectOrCreate?: EventCreateOrConnectWithoutWebhook_logsInput
    connect?: EventWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutWebhook_logsInput = {
    create?: XOR<UserCreateWithoutWebhook_logsInput, UserUncheckedCreateWithoutWebhook_logsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWebhook_logsInput
    connect?: UserWhereUniqueInput
  }

  export type OrderUpdateOneWithoutWebhook_logsNestedInput = {
    create?: XOR<OrderCreateWithoutWebhook_logsInput, OrderUncheckedCreateWithoutWebhook_logsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutWebhook_logsInput
    upsert?: OrderUpsertWithoutWebhook_logsInput
    disconnect?: OrderWhereInput | boolean
    delete?: OrderWhereInput | boolean
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutWebhook_logsInput, OrderUpdateWithoutWebhook_logsInput>, OrderUncheckedUpdateWithoutWebhook_logsInput>
  }

  export type EventUpdateOneWithoutWebhook_logsNestedInput = {
    create?: XOR<EventCreateWithoutWebhook_logsInput, EventUncheckedCreateWithoutWebhook_logsInput>
    connectOrCreate?: EventCreateOrConnectWithoutWebhook_logsInput
    upsert?: EventUpsertWithoutWebhook_logsInput
    disconnect?: EventWhereInput | boolean
    delete?: EventWhereInput | boolean
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutWebhook_logsInput, EventUpdateWithoutWebhook_logsInput>, EventUncheckedUpdateWithoutWebhook_logsInput>
  }

  export type UserUpdateOneWithoutWebhook_logsNestedInput = {
    create?: XOR<UserCreateWithoutWebhook_logsInput, UserUncheckedCreateWithoutWebhook_logsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWebhook_logsInput
    upsert?: UserUpsertWithoutWebhook_logsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWebhook_logsInput, UserUpdateWithoutWebhook_logsInput>, UserUncheckedUpdateWithoutWebhook_logsInput>
  }

  export type OrganizationCreateNestedOneWithoutWebhook_subscriptionsInput = {
    create?: XOR<OrganizationCreateWithoutWebhook_subscriptionsInput, OrganizationUncheckedCreateWithoutWebhook_subscriptionsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutWebhook_subscriptionsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type OrganizationUpdateOneRequiredWithoutWebhook_subscriptionsNestedInput = {
    create?: XOR<OrganizationCreateWithoutWebhook_subscriptionsInput, OrganizationUncheckedCreateWithoutWebhook_subscriptionsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutWebhook_subscriptionsInput
    upsert?: OrganizationUpsertWithoutWebhook_subscriptionsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutWebhook_subscriptionsInput, OrganizationUpdateWithoutWebhook_subscriptionsInput>, OrganizationUncheckedUpdateWithoutWebhook_subscriptionsInput>
  }

  export type UserCreateNestedOneWithoutTracking_visitsInput = {
    create?: XOR<UserCreateWithoutTracking_visitsInput, UserUncheckedCreateWithoutTracking_visitsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTracking_visitsInput
    connect?: UserWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutTracking_visitsInput = {
    create?: XOR<EventCreateWithoutTracking_visitsInput, EventUncheckedCreateWithoutTracking_visitsInput>
    connectOrCreate?: EventCreateOrConnectWithoutTracking_visitsInput
    connect?: EventWhereUniqueInput
  }

  export type UserUpdateOneWithoutTracking_visitsNestedInput = {
    create?: XOR<UserCreateWithoutTracking_visitsInput, UserUncheckedCreateWithoutTracking_visitsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTracking_visitsInput
    upsert?: UserUpsertWithoutTracking_visitsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTracking_visitsInput, UserUpdateWithoutTracking_visitsInput>, UserUncheckedUpdateWithoutTracking_visitsInput>
  }

  export type EventUpdateOneRequiredWithoutTracking_visitsNestedInput = {
    create?: XOR<EventCreateWithoutTracking_visitsInput, EventUncheckedCreateWithoutTracking_visitsInput>
    connectOrCreate?: EventCreateOrConnectWithoutTracking_visitsInput
    upsert?: EventUpsertWithoutTracking_visitsInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutTracking_visitsInput, EventUpdateWithoutTracking_visitsInput>, EventUncheckedUpdateWithoutTracking_visitsInput>
  }

  export type OrganizationCreateNestedOneWithoutEventsInput = {
    create?: XOR<OrganizationCreateWithoutEventsInput, OrganizationUncheckedCreateWithoutEventsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutEventsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type TicketCreateNestedManyWithoutEventInput = {
    create?: XOR<TicketCreateWithoutEventInput, TicketUncheckedCreateWithoutEventInput> | TicketCreateWithoutEventInput[] | TicketUncheckedCreateWithoutEventInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutEventInput | TicketCreateOrConnectWithoutEventInput[]
    createMany?: TicketCreateManyEventInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type EmailLogCreateNestedManyWithoutEventInput = {
    create?: XOR<EmailLogCreateWithoutEventInput, EmailLogUncheckedCreateWithoutEventInput> | EmailLogCreateWithoutEventInput[] | EmailLogUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EmailLogCreateOrConnectWithoutEventInput | EmailLogCreateOrConnectWithoutEventInput[]
    createMany?: EmailLogCreateManyEventInputEnvelope
    connect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
  }

  export type WebhookLogCreateNestedManyWithoutEventInput = {
    create?: XOR<WebhookLogCreateWithoutEventInput, WebhookLogUncheckedCreateWithoutEventInput> | WebhookLogCreateWithoutEventInput[] | WebhookLogUncheckedCreateWithoutEventInput[]
    connectOrCreate?: WebhookLogCreateOrConnectWithoutEventInput | WebhookLogCreateOrConnectWithoutEventInput[]
    createMany?: WebhookLogCreateManyEventInputEnvelope
    connect?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
  }

  export type CheckinLogCreateNestedManyWithoutEventInput = {
    create?: XOR<CheckinLogCreateWithoutEventInput, CheckinLogUncheckedCreateWithoutEventInput> | CheckinLogCreateWithoutEventInput[] | CheckinLogUncheckedCreateWithoutEventInput[]
    connectOrCreate?: CheckinLogCreateOrConnectWithoutEventInput | CheckinLogCreateOrConnectWithoutEventInput[]
    createMany?: CheckinLogCreateManyEventInputEnvelope
    connect?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
  }

  export type TrackingVisitCreateNestedManyWithoutEventInput = {
    create?: XOR<TrackingVisitCreateWithoutEventInput, TrackingVisitUncheckedCreateWithoutEventInput> | TrackingVisitCreateWithoutEventInput[] | TrackingVisitUncheckedCreateWithoutEventInput[]
    connectOrCreate?: TrackingVisitCreateOrConnectWithoutEventInput | TrackingVisitCreateOrConnectWithoutEventInput[]
    createMany?: TrackingVisitCreateManyEventInputEnvelope
    connect?: TrackingVisitWhereUniqueInput | TrackingVisitWhereUniqueInput[]
  }

  export type EventSettingCreateNestedManyWithoutEventInput = {
    create?: XOR<EventSettingCreateWithoutEventInput, EventSettingUncheckedCreateWithoutEventInput> | EventSettingCreateWithoutEventInput[] | EventSettingUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventSettingCreateOrConnectWithoutEventInput | EventSettingCreateOrConnectWithoutEventInput[]
    createMany?: EventSettingCreateManyEventInputEnvelope
    connect?: EventSettingWhereUniqueInput | EventSettingWhereUniqueInput[]
  }

  export type ImageLinkCreateNestedManyWithoutEventInput = {
    create?: XOR<ImageLinkCreateWithoutEventInput, ImageLinkUncheckedCreateWithoutEventInput> | ImageLinkCreateWithoutEventInput[] | ImageLinkUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ImageLinkCreateOrConnectWithoutEventInput | ImageLinkCreateOrConnectWithoutEventInput[]
    createMany?: ImageLinkCreateManyEventInputEnvelope
    connect?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
  }

  export type TicketUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<TicketCreateWithoutEventInput, TicketUncheckedCreateWithoutEventInput> | TicketCreateWithoutEventInput[] | TicketUncheckedCreateWithoutEventInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutEventInput | TicketCreateOrConnectWithoutEventInput[]
    createMany?: TicketCreateManyEventInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type EmailLogUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<EmailLogCreateWithoutEventInput, EmailLogUncheckedCreateWithoutEventInput> | EmailLogCreateWithoutEventInput[] | EmailLogUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EmailLogCreateOrConnectWithoutEventInput | EmailLogCreateOrConnectWithoutEventInput[]
    createMany?: EmailLogCreateManyEventInputEnvelope
    connect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
  }

  export type WebhookLogUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<WebhookLogCreateWithoutEventInput, WebhookLogUncheckedCreateWithoutEventInput> | WebhookLogCreateWithoutEventInput[] | WebhookLogUncheckedCreateWithoutEventInput[]
    connectOrCreate?: WebhookLogCreateOrConnectWithoutEventInput | WebhookLogCreateOrConnectWithoutEventInput[]
    createMany?: WebhookLogCreateManyEventInputEnvelope
    connect?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
  }

  export type CheckinLogUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<CheckinLogCreateWithoutEventInput, CheckinLogUncheckedCreateWithoutEventInput> | CheckinLogCreateWithoutEventInput[] | CheckinLogUncheckedCreateWithoutEventInput[]
    connectOrCreate?: CheckinLogCreateOrConnectWithoutEventInput | CheckinLogCreateOrConnectWithoutEventInput[]
    createMany?: CheckinLogCreateManyEventInputEnvelope
    connect?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
  }

  export type TrackingVisitUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<TrackingVisitCreateWithoutEventInput, TrackingVisitUncheckedCreateWithoutEventInput> | TrackingVisitCreateWithoutEventInput[] | TrackingVisitUncheckedCreateWithoutEventInput[]
    connectOrCreate?: TrackingVisitCreateOrConnectWithoutEventInput | TrackingVisitCreateOrConnectWithoutEventInput[]
    createMany?: TrackingVisitCreateManyEventInputEnvelope
    connect?: TrackingVisitWhereUniqueInput | TrackingVisitWhereUniqueInput[]
  }

  export type EventSettingUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<EventSettingCreateWithoutEventInput, EventSettingUncheckedCreateWithoutEventInput> | EventSettingCreateWithoutEventInput[] | EventSettingUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventSettingCreateOrConnectWithoutEventInput | EventSettingCreateOrConnectWithoutEventInput[]
    createMany?: EventSettingCreateManyEventInputEnvelope
    connect?: EventSettingWhereUniqueInput | EventSettingWhereUniqueInput[]
  }

  export type ImageLinkUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<ImageLinkCreateWithoutEventInput, ImageLinkUncheckedCreateWithoutEventInput> | ImageLinkCreateWithoutEventInput[] | ImageLinkUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ImageLinkCreateOrConnectWithoutEventInput | ImageLinkCreateOrConnectWithoutEventInput[]
    createMany?: ImageLinkCreateManyEventInputEnvelope
    connect?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
  }

  export type OrganizationUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<OrganizationCreateWithoutEventsInput, OrganizationUncheckedCreateWithoutEventsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutEventsInput
    upsert?: OrganizationUpsertWithoutEventsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutEventsInput, OrganizationUpdateWithoutEventsInput>, OrganizationUncheckedUpdateWithoutEventsInput>
  }

  export type TicketUpdateManyWithoutEventNestedInput = {
    create?: XOR<TicketCreateWithoutEventInput, TicketUncheckedCreateWithoutEventInput> | TicketCreateWithoutEventInput[] | TicketUncheckedCreateWithoutEventInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutEventInput | TicketCreateOrConnectWithoutEventInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutEventInput | TicketUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: TicketCreateManyEventInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutEventInput | TicketUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutEventInput | TicketUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type EmailLogUpdateManyWithoutEventNestedInput = {
    create?: XOR<EmailLogCreateWithoutEventInput, EmailLogUncheckedCreateWithoutEventInput> | EmailLogCreateWithoutEventInput[] | EmailLogUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EmailLogCreateOrConnectWithoutEventInput | EmailLogCreateOrConnectWithoutEventInput[]
    upsert?: EmailLogUpsertWithWhereUniqueWithoutEventInput | EmailLogUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EmailLogCreateManyEventInputEnvelope
    set?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    disconnect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    delete?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    connect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    update?: EmailLogUpdateWithWhereUniqueWithoutEventInput | EmailLogUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EmailLogUpdateManyWithWhereWithoutEventInput | EmailLogUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EmailLogScalarWhereInput | EmailLogScalarWhereInput[]
  }

  export type WebhookLogUpdateManyWithoutEventNestedInput = {
    create?: XOR<WebhookLogCreateWithoutEventInput, WebhookLogUncheckedCreateWithoutEventInput> | WebhookLogCreateWithoutEventInput[] | WebhookLogUncheckedCreateWithoutEventInput[]
    connectOrCreate?: WebhookLogCreateOrConnectWithoutEventInput | WebhookLogCreateOrConnectWithoutEventInput[]
    upsert?: WebhookLogUpsertWithWhereUniqueWithoutEventInput | WebhookLogUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: WebhookLogCreateManyEventInputEnvelope
    set?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    disconnect?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    delete?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    connect?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    update?: WebhookLogUpdateWithWhereUniqueWithoutEventInput | WebhookLogUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: WebhookLogUpdateManyWithWhereWithoutEventInput | WebhookLogUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: WebhookLogScalarWhereInput | WebhookLogScalarWhereInput[]
  }

  export type CheckinLogUpdateManyWithoutEventNestedInput = {
    create?: XOR<CheckinLogCreateWithoutEventInput, CheckinLogUncheckedCreateWithoutEventInput> | CheckinLogCreateWithoutEventInput[] | CheckinLogUncheckedCreateWithoutEventInput[]
    connectOrCreate?: CheckinLogCreateOrConnectWithoutEventInput | CheckinLogCreateOrConnectWithoutEventInput[]
    upsert?: CheckinLogUpsertWithWhereUniqueWithoutEventInput | CheckinLogUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: CheckinLogCreateManyEventInputEnvelope
    set?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    disconnect?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    delete?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    connect?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    update?: CheckinLogUpdateWithWhereUniqueWithoutEventInput | CheckinLogUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: CheckinLogUpdateManyWithWhereWithoutEventInput | CheckinLogUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: CheckinLogScalarWhereInput | CheckinLogScalarWhereInput[]
  }

  export type TrackingVisitUpdateManyWithoutEventNestedInput = {
    create?: XOR<TrackingVisitCreateWithoutEventInput, TrackingVisitUncheckedCreateWithoutEventInput> | TrackingVisitCreateWithoutEventInput[] | TrackingVisitUncheckedCreateWithoutEventInput[]
    connectOrCreate?: TrackingVisitCreateOrConnectWithoutEventInput | TrackingVisitCreateOrConnectWithoutEventInput[]
    upsert?: TrackingVisitUpsertWithWhereUniqueWithoutEventInput | TrackingVisitUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: TrackingVisitCreateManyEventInputEnvelope
    set?: TrackingVisitWhereUniqueInput | TrackingVisitWhereUniqueInput[]
    disconnect?: TrackingVisitWhereUniqueInput | TrackingVisitWhereUniqueInput[]
    delete?: TrackingVisitWhereUniqueInput | TrackingVisitWhereUniqueInput[]
    connect?: TrackingVisitWhereUniqueInput | TrackingVisitWhereUniqueInput[]
    update?: TrackingVisitUpdateWithWhereUniqueWithoutEventInput | TrackingVisitUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: TrackingVisitUpdateManyWithWhereWithoutEventInput | TrackingVisitUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: TrackingVisitScalarWhereInput | TrackingVisitScalarWhereInput[]
  }

  export type EventSettingUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventSettingCreateWithoutEventInput, EventSettingUncheckedCreateWithoutEventInput> | EventSettingCreateWithoutEventInput[] | EventSettingUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventSettingCreateOrConnectWithoutEventInput | EventSettingCreateOrConnectWithoutEventInput[]
    upsert?: EventSettingUpsertWithWhereUniqueWithoutEventInput | EventSettingUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventSettingCreateManyEventInputEnvelope
    set?: EventSettingWhereUniqueInput | EventSettingWhereUniqueInput[]
    disconnect?: EventSettingWhereUniqueInput | EventSettingWhereUniqueInput[]
    delete?: EventSettingWhereUniqueInput | EventSettingWhereUniqueInput[]
    connect?: EventSettingWhereUniqueInput | EventSettingWhereUniqueInput[]
    update?: EventSettingUpdateWithWhereUniqueWithoutEventInput | EventSettingUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventSettingUpdateManyWithWhereWithoutEventInput | EventSettingUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventSettingScalarWhereInput | EventSettingScalarWhereInput[]
  }

  export type ImageLinkUpdateManyWithoutEventNestedInput = {
    create?: XOR<ImageLinkCreateWithoutEventInput, ImageLinkUncheckedCreateWithoutEventInput> | ImageLinkCreateWithoutEventInput[] | ImageLinkUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ImageLinkCreateOrConnectWithoutEventInput | ImageLinkCreateOrConnectWithoutEventInput[]
    upsert?: ImageLinkUpsertWithWhereUniqueWithoutEventInput | ImageLinkUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: ImageLinkCreateManyEventInputEnvelope
    set?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    disconnect?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    delete?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    connect?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    update?: ImageLinkUpdateWithWhereUniqueWithoutEventInput | ImageLinkUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: ImageLinkUpdateManyWithWhereWithoutEventInput | ImageLinkUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: ImageLinkScalarWhereInput | ImageLinkScalarWhereInput[]
  }

  export type TicketUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<TicketCreateWithoutEventInput, TicketUncheckedCreateWithoutEventInput> | TicketCreateWithoutEventInput[] | TicketUncheckedCreateWithoutEventInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutEventInput | TicketCreateOrConnectWithoutEventInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutEventInput | TicketUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: TicketCreateManyEventInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutEventInput | TicketUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutEventInput | TicketUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type EmailLogUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<EmailLogCreateWithoutEventInput, EmailLogUncheckedCreateWithoutEventInput> | EmailLogCreateWithoutEventInput[] | EmailLogUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EmailLogCreateOrConnectWithoutEventInput | EmailLogCreateOrConnectWithoutEventInput[]
    upsert?: EmailLogUpsertWithWhereUniqueWithoutEventInput | EmailLogUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EmailLogCreateManyEventInputEnvelope
    set?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    disconnect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    delete?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    connect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    update?: EmailLogUpdateWithWhereUniqueWithoutEventInput | EmailLogUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EmailLogUpdateManyWithWhereWithoutEventInput | EmailLogUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EmailLogScalarWhereInput | EmailLogScalarWhereInput[]
  }

  export type WebhookLogUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<WebhookLogCreateWithoutEventInput, WebhookLogUncheckedCreateWithoutEventInput> | WebhookLogCreateWithoutEventInput[] | WebhookLogUncheckedCreateWithoutEventInput[]
    connectOrCreate?: WebhookLogCreateOrConnectWithoutEventInput | WebhookLogCreateOrConnectWithoutEventInput[]
    upsert?: WebhookLogUpsertWithWhereUniqueWithoutEventInput | WebhookLogUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: WebhookLogCreateManyEventInputEnvelope
    set?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    disconnect?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    delete?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    connect?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    update?: WebhookLogUpdateWithWhereUniqueWithoutEventInput | WebhookLogUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: WebhookLogUpdateManyWithWhereWithoutEventInput | WebhookLogUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: WebhookLogScalarWhereInput | WebhookLogScalarWhereInput[]
  }

  export type CheckinLogUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<CheckinLogCreateWithoutEventInput, CheckinLogUncheckedCreateWithoutEventInput> | CheckinLogCreateWithoutEventInput[] | CheckinLogUncheckedCreateWithoutEventInput[]
    connectOrCreate?: CheckinLogCreateOrConnectWithoutEventInput | CheckinLogCreateOrConnectWithoutEventInput[]
    upsert?: CheckinLogUpsertWithWhereUniqueWithoutEventInput | CheckinLogUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: CheckinLogCreateManyEventInputEnvelope
    set?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    disconnect?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    delete?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    connect?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    update?: CheckinLogUpdateWithWhereUniqueWithoutEventInput | CheckinLogUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: CheckinLogUpdateManyWithWhereWithoutEventInput | CheckinLogUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: CheckinLogScalarWhereInput | CheckinLogScalarWhereInput[]
  }

  export type TrackingVisitUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<TrackingVisitCreateWithoutEventInput, TrackingVisitUncheckedCreateWithoutEventInput> | TrackingVisitCreateWithoutEventInput[] | TrackingVisitUncheckedCreateWithoutEventInput[]
    connectOrCreate?: TrackingVisitCreateOrConnectWithoutEventInput | TrackingVisitCreateOrConnectWithoutEventInput[]
    upsert?: TrackingVisitUpsertWithWhereUniqueWithoutEventInput | TrackingVisitUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: TrackingVisitCreateManyEventInputEnvelope
    set?: TrackingVisitWhereUniqueInput | TrackingVisitWhereUniqueInput[]
    disconnect?: TrackingVisitWhereUniqueInput | TrackingVisitWhereUniqueInput[]
    delete?: TrackingVisitWhereUniqueInput | TrackingVisitWhereUniqueInput[]
    connect?: TrackingVisitWhereUniqueInput | TrackingVisitWhereUniqueInput[]
    update?: TrackingVisitUpdateWithWhereUniqueWithoutEventInput | TrackingVisitUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: TrackingVisitUpdateManyWithWhereWithoutEventInput | TrackingVisitUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: TrackingVisitScalarWhereInput | TrackingVisitScalarWhereInput[]
  }

  export type EventSettingUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventSettingCreateWithoutEventInput, EventSettingUncheckedCreateWithoutEventInput> | EventSettingCreateWithoutEventInput[] | EventSettingUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventSettingCreateOrConnectWithoutEventInput | EventSettingCreateOrConnectWithoutEventInput[]
    upsert?: EventSettingUpsertWithWhereUniqueWithoutEventInput | EventSettingUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventSettingCreateManyEventInputEnvelope
    set?: EventSettingWhereUniqueInput | EventSettingWhereUniqueInput[]
    disconnect?: EventSettingWhereUniqueInput | EventSettingWhereUniqueInput[]
    delete?: EventSettingWhereUniqueInput | EventSettingWhereUniqueInput[]
    connect?: EventSettingWhereUniqueInput | EventSettingWhereUniqueInput[]
    update?: EventSettingUpdateWithWhereUniqueWithoutEventInput | EventSettingUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventSettingUpdateManyWithWhereWithoutEventInput | EventSettingUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventSettingScalarWhereInput | EventSettingScalarWhereInput[]
  }

  export type ImageLinkUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<ImageLinkCreateWithoutEventInput, ImageLinkUncheckedCreateWithoutEventInput> | ImageLinkCreateWithoutEventInput[] | ImageLinkUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ImageLinkCreateOrConnectWithoutEventInput | ImageLinkCreateOrConnectWithoutEventInput[]
    upsert?: ImageLinkUpsertWithWhereUniqueWithoutEventInput | ImageLinkUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: ImageLinkCreateManyEventInputEnvelope
    set?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    disconnect?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    delete?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    connect?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    update?: ImageLinkUpdateWithWhereUniqueWithoutEventInput | ImageLinkUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: ImageLinkUpdateManyWithWhereWithoutEventInput | ImageLinkUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: ImageLinkScalarWhereInput | ImageLinkScalarWhereInput[]
  }

  export type EventCreateNestedOneWithoutTicketsInput = {
    create?: XOR<EventCreateWithoutTicketsInput, EventUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: EventCreateOrConnectWithoutTicketsInput
    connect?: EventWhereUniqueInput
  }

  export type OrderItemCreateNestedManyWithoutTicketInput = {
    create?: XOR<OrderItemCreateWithoutTicketInput, OrderItemUncheckedCreateWithoutTicketInput> | OrderItemCreateWithoutTicketInput[] | OrderItemUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutTicketInput | OrderItemCreateOrConnectWithoutTicketInput[]
    createMany?: OrderItemCreateManyTicketInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type CheckinLogCreateNestedManyWithoutTicketInput = {
    create?: XOR<CheckinLogCreateWithoutTicketInput, CheckinLogUncheckedCreateWithoutTicketInput> | CheckinLogCreateWithoutTicketInput[] | CheckinLogUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: CheckinLogCreateOrConnectWithoutTicketInput | CheckinLogCreateOrConnectWithoutTicketInput[]
    createMany?: CheckinLogCreateManyTicketInputEnvelope
    connect?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutTicketInput = {
    create?: XOR<OrderItemCreateWithoutTicketInput, OrderItemUncheckedCreateWithoutTicketInput> | OrderItemCreateWithoutTicketInput[] | OrderItemUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutTicketInput | OrderItemCreateOrConnectWithoutTicketInput[]
    createMany?: OrderItemCreateManyTicketInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type CheckinLogUncheckedCreateNestedManyWithoutTicketInput = {
    create?: XOR<CheckinLogCreateWithoutTicketInput, CheckinLogUncheckedCreateWithoutTicketInput> | CheckinLogCreateWithoutTicketInput[] | CheckinLogUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: CheckinLogCreateOrConnectWithoutTicketInput | CheckinLogCreateOrConnectWithoutTicketInput[]
    createMany?: CheckinLogCreateManyTicketInputEnvelope
    connect?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
  }

  export type EventUpdateOneRequiredWithoutTicketsNestedInput = {
    create?: XOR<EventCreateWithoutTicketsInput, EventUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: EventCreateOrConnectWithoutTicketsInput
    upsert?: EventUpsertWithoutTicketsInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutTicketsInput, EventUpdateWithoutTicketsInput>, EventUncheckedUpdateWithoutTicketsInput>
  }

  export type OrderItemUpdateManyWithoutTicketNestedInput = {
    create?: XOR<OrderItemCreateWithoutTicketInput, OrderItemUncheckedCreateWithoutTicketInput> | OrderItemCreateWithoutTicketInput[] | OrderItemUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutTicketInput | OrderItemCreateOrConnectWithoutTicketInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutTicketInput | OrderItemUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: OrderItemCreateManyTicketInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutTicketInput | OrderItemUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutTicketInput | OrderItemUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type CheckinLogUpdateManyWithoutTicketNestedInput = {
    create?: XOR<CheckinLogCreateWithoutTicketInput, CheckinLogUncheckedCreateWithoutTicketInput> | CheckinLogCreateWithoutTicketInput[] | CheckinLogUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: CheckinLogCreateOrConnectWithoutTicketInput | CheckinLogCreateOrConnectWithoutTicketInput[]
    upsert?: CheckinLogUpsertWithWhereUniqueWithoutTicketInput | CheckinLogUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: CheckinLogCreateManyTicketInputEnvelope
    set?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    disconnect?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    delete?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    connect?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    update?: CheckinLogUpdateWithWhereUniqueWithoutTicketInput | CheckinLogUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: CheckinLogUpdateManyWithWhereWithoutTicketInput | CheckinLogUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: CheckinLogScalarWhereInput | CheckinLogScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutTicketNestedInput = {
    create?: XOR<OrderItemCreateWithoutTicketInput, OrderItemUncheckedCreateWithoutTicketInput> | OrderItemCreateWithoutTicketInput[] | OrderItemUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutTicketInput | OrderItemCreateOrConnectWithoutTicketInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutTicketInput | OrderItemUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: OrderItemCreateManyTicketInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutTicketInput | OrderItemUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutTicketInput | OrderItemUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type CheckinLogUncheckedUpdateManyWithoutTicketNestedInput = {
    create?: XOR<CheckinLogCreateWithoutTicketInput, CheckinLogUncheckedCreateWithoutTicketInput> | CheckinLogCreateWithoutTicketInput[] | CheckinLogUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: CheckinLogCreateOrConnectWithoutTicketInput | CheckinLogCreateOrConnectWithoutTicketInput[]
    upsert?: CheckinLogUpsertWithWhereUniqueWithoutTicketInput | CheckinLogUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: CheckinLogCreateManyTicketInputEnvelope
    set?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    disconnect?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    delete?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    connect?: CheckinLogWhereUniqueInput | CheckinLogWhereUniqueInput[]
    update?: CheckinLogUpdateWithWhereUniqueWithoutTicketInput | CheckinLogUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: CheckinLogUpdateManyWithWhereWithoutTicketInput | CheckinLogUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: CheckinLogScalarWhereInput | CheckinLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutOrdersInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type OrderItemCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type OrderPromoCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderPromoCreateWithoutOrderInput, OrderPromoUncheckedCreateWithoutOrderInput> | OrderPromoCreateWithoutOrderInput[] | OrderPromoUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderPromoCreateOrConnectWithoutOrderInput | OrderPromoCreateOrConnectWithoutOrderInput[]
    createMany?: OrderPromoCreateManyOrderInputEnvelope
    connect?: OrderPromoWhereUniqueInput | OrderPromoWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutOrderInput = {
    create?: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput> | PaymentCreateWithoutOrderInput[] | PaymentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutOrderInput | PaymentCreateOrConnectWithoutOrderInput[]
    createMany?: PaymentCreateManyOrderInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type WebhookLogCreateNestedManyWithoutOrderInput = {
    create?: XOR<WebhookLogCreateWithoutOrderInput, WebhookLogUncheckedCreateWithoutOrderInput> | WebhookLogCreateWithoutOrderInput[] | WebhookLogUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: WebhookLogCreateOrConnectWithoutOrderInput | WebhookLogCreateOrConnectWithoutOrderInput[]
    createMany?: WebhookLogCreateManyOrderInputEnvelope
    connect?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type OrderPromoUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderPromoCreateWithoutOrderInput, OrderPromoUncheckedCreateWithoutOrderInput> | OrderPromoCreateWithoutOrderInput[] | OrderPromoUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderPromoCreateOrConnectWithoutOrderInput | OrderPromoCreateOrConnectWithoutOrderInput[]
    createMany?: OrderPromoCreateManyOrderInputEnvelope
    connect?: OrderPromoWhereUniqueInput | OrderPromoWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput> | PaymentCreateWithoutOrderInput[] | PaymentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutOrderInput | PaymentCreateOrConnectWithoutOrderInput[]
    createMany?: PaymentCreateManyOrderInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type WebhookLogUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<WebhookLogCreateWithoutOrderInput, WebhookLogUncheckedCreateWithoutOrderInput> | WebhookLogCreateWithoutOrderInput[] | WebhookLogUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: WebhookLogCreateOrConnectWithoutOrderInput | WebhookLogCreateOrConnectWithoutOrderInput[]
    createMany?: WebhookLogCreateManyOrderInputEnvelope
    connect?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutOrdersNestedInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    upsert?: UserUpsertWithoutOrdersInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrdersInput, UserUpdateWithoutOrdersInput>, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type OrderItemUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type OrderPromoUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderPromoCreateWithoutOrderInput, OrderPromoUncheckedCreateWithoutOrderInput> | OrderPromoCreateWithoutOrderInput[] | OrderPromoUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderPromoCreateOrConnectWithoutOrderInput | OrderPromoCreateOrConnectWithoutOrderInput[]
    upsert?: OrderPromoUpsertWithWhereUniqueWithoutOrderInput | OrderPromoUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderPromoCreateManyOrderInputEnvelope
    set?: OrderPromoWhereUniqueInput | OrderPromoWhereUniqueInput[]
    disconnect?: OrderPromoWhereUniqueInput | OrderPromoWhereUniqueInput[]
    delete?: OrderPromoWhereUniqueInput | OrderPromoWhereUniqueInput[]
    connect?: OrderPromoWhereUniqueInput | OrderPromoWhereUniqueInput[]
    update?: OrderPromoUpdateWithWhereUniqueWithoutOrderInput | OrderPromoUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderPromoUpdateManyWithWhereWithoutOrderInput | OrderPromoUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderPromoScalarWhereInput | OrderPromoScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutOrderNestedInput = {
    create?: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput> | PaymentCreateWithoutOrderInput[] | PaymentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutOrderInput | PaymentCreateOrConnectWithoutOrderInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutOrderInput | PaymentUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: PaymentCreateManyOrderInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutOrderInput | PaymentUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutOrderInput | PaymentUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type WebhookLogUpdateManyWithoutOrderNestedInput = {
    create?: XOR<WebhookLogCreateWithoutOrderInput, WebhookLogUncheckedCreateWithoutOrderInput> | WebhookLogCreateWithoutOrderInput[] | WebhookLogUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: WebhookLogCreateOrConnectWithoutOrderInput | WebhookLogCreateOrConnectWithoutOrderInput[]
    upsert?: WebhookLogUpsertWithWhereUniqueWithoutOrderInput | WebhookLogUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: WebhookLogCreateManyOrderInputEnvelope
    set?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    disconnect?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    delete?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    connect?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    update?: WebhookLogUpdateWithWhereUniqueWithoutOrderInput | WebhookLogUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: WebhookLogUpdateManyWithWhereWithoutOrderInput | WebhookLogUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: WebhookLogScalarWhereInput | WebhookLogScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type OrderPromoUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderPromoCreateWithoutOrderInput, OrderPromoUncheckedCreateWithoutOrderInput> | OrderPromoCreateWithoutOrderInput[] | OrderPromoUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderPromoCreateOrConnectWithoutOrderInput | OrderPromoCreateOrConnectWithoutOrderInput[]
    upsert?: OrderPromoUpsertWithWhereUniqueWithoutOrderInput | OrderPromoUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderPromoCreateManyOrderInputEnvelope
    set?: OrderPromoWhereUniqueInput | OrderPromoWhereUniqueInput[]
    disconnect?: OrderPromoWhereUniqueInput | OrderPromoWhereUniqueInput[]
    delete?: OrderPromoWhereUniqueInput | OrderPromoWhereUniqueInput[]
    connect?: OrderPromoWhereUniqueInput | OrderPromoWhereUniqueInput[]
    update?: OrderPromoUpdateWithWhereUniqueWithoutOrderInput | OrderPromoUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderPromoUpdateManyWithWhereWithoutOrderInput | OrderPromoUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderPromoScalarWhereInput | OrderPromoScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput> | PaymentCreateWithoutOrderInput[] | PaymentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutOrderInput | PaymentCreateOrConnectWithoutOrderInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutOrderInput | PaymentUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: PaymentCreateManyOrderInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutOrderInput | PaymentUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutOrderInput | PaymentUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type WebhookLogUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<WebhookLogCreateWithoutOrderInput, WebhookLogUncheckedCreateWithoutOrderInput> | WebhookLogCreateWithoutOrderInput[] | WebhookLogUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: WebhookLogCreateOrConnectWithoutOrderInput | WebhookLogCreateOrConnectWithoutOrderInput[]
    upsert?: WebhookLogUpsertWithWhereUniqueWithoutOrderInput | WebhookLogUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: WebhookLogCreateManyOrderInputEnvelope
    set?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    disconnect?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    delete?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    connect?: WebhookLogWhereUniqueInput | WebhookLogWhereUniqueInput[]
    update?: WebhookLogUpdateWithWhereUniqueWithoutOrderInput | WebhookLogUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: WebhookLogUpdateManyWithWhereWithoutOrderInput | WebhookLogUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: WebhookLogScalarWhereInput | WebhookLogScalarWhereInput[]
  }

  export type OrderCreateNestedOneWithoutOrder_itemsInput = {
    create?: XOR<OrderCreateWithoutOrder_itemsInput, OrderUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrder_itemsInput
    connect?: OrderWhereUniqueInput
  }

  export type TicketCreateNestedOneWithoutOrder_itemsInput = {
    create?: XOR<TicketCreateWithoutOrder_itemsInput, TicketUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: TicketCreateOrConnectWithoutOrder_itemsInput
    connect?: TicketWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutOrder_itemsNestedInput = {
    create?: XOR<OrderCreateWithoutOrder_itemsInput, OrderUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrder_itemsInput
    upsert?: OrderUpsertWithoutOrder_itemsInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutOrder_itemsInput, OrderUpdateWithoutOrder_itemsInput>, OrderUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type TicketUpdateOneRequiredWithoutOrder_itemsNestedInput = {
    create?: XOR<TicketCreateWithoutOrder_itemsInput, TicketUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: TicketCreateOrConnectWithoutOrder_itemsInput
    upsert?: TicketUpsertWithoutOrder_itemsInput
    connect?: TicketWhereUniqueInput
    update?: XOR<XOR<TicketUpdateToOneWithWhereWithoutOrder_itemsInput, TicketUpdateWithoutOrder_itemsInput>, TicketUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type OrderCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<OrderCreateWithoutPaymentsInput, OrderUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutPaymentsInput
    connect?: OrderWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<OrderCreateWithoutPaymentsInput, OrderUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutPaymentsInput
    upsert?: OrderUpsertWithoutPaymentsInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutPaymentsInput, OrderUpdateWithoutPaymentsInput>, OrderUncheckedUpdateWithoutPaymentsInput>
  }

  export type UserCreateNestedOneWithoutCheckin_logsInput = {
    create?: XOR<UserCreateWithoutCheckin_logsInput, UserUncheckedCreateWithoutCheckin_logsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCheckin_logsInput
    connect?: UserWhereUniqueInput
  }

  export type TicketCreateNestedOneWithoutCheckin_logsInput = {
    create?: XOR<TicketCreateWithoutCheckin_logsInput, TicketUncheckedCreateWithoutCheckin_logsInput>
    connectOrCreate?: TicketCreateOrConnectWithoutCheckin_logsInput
    connect?: TicketWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutCheckin_logsInput = {
    create?: XOR<EventCreateWithoutCheckin_logsInput, EventUncheckedCreateWithoutCheckin_logsInput>
    connectOrCreate?: EventCreateOrConnectWithoutCheckin_logsInput
    connect?: EventWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCheckin_logsNestedInput = {
    create?: XOR<UserCreateWithoutCheckin_logsInput, UserUncheckedCreateWithoutCheckin_logsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCheckin_logsInput
    upsert?: UserUpsertWithoutCheckin_logsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCheckin_logsInput, UserUpdateWithoutCheckin_logsInput>, UserUncheckedUpdateWithoutCheckin_logsInput>
  }

  export type TicketUpdateOneRequiredWithoutCheckin_logsNestedInput = {
    create?: XOR<TicketCreateWithoutCheckin_logsInput, TicketUncheckedCreateWithoutCheckin_logsInput>
    connectOrCreate?: TicketCreateOrConnectWithoutCheckin_logsInput
    upsert?: TicketUpsertWithoutCheckin_logsInput
    connect?: TicketWhereUniqueInput
    update?: XOR<XOR<TicketUpdateToOneWithWhereWithoutCheckin_logsInput, TicketUpdateWithoutCheckin_logsInput>, TicketUncheckedUpdateWithoutCheckin_logsInput>
  }

  export type EventUpdateOneRequiredWithoutCheckin_logsNestedInput = {
    create?: XOR<EventCreateWithoutCheckin_logsInput, EventUncheckedCreateWithoutCheckin_logsInput>
    connectOrCreate?: EventCreateOrConnectWithoutCheckin_logsInput
    upsert?: EventUpsertWithoutCheckin_logsInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutCheckin_logsInput, EventUpdateWithoutCheckin_logsInput>, EventUncheckedUpdateWithoutCheckin_logsInput>
  }

  export type UserCreateNestedOneWithoutUser_organizationsInput = {
    create?: XOR<UserCreateWithoutUser_organizationsInput, UserUncheckedCreateWithoutUser_organizationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUser_organizationsInput
    connect?: UserWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutUser_organizationsInput = {
    create?: XOR<OrganizationCreateWithoutUser_organizationsInput, OrganizationUncheckedCreateWithoutUser_organizationsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUser_organizationsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUser_organizationsNestedInput = {
    create?: XOR<UserCreateWithoutUser_organizationsInput, UserUncheckedCreateWithoutUser_organizationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUser_organizationsInput
    upsert?: UserUpsertWithoutUser_organizationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUser_organizationsInput, UserUpdateWithoutUser_organizationsInput>, UserUncheckedUpdateWithoutUser_organizationsInput>
  }

  export type OrganizationUpdateOneRequiredWithoutUser_organizationsNestedInput = {
    create?: XOR<OrganizationCreateWithoutUser_organizationsInput, OrganizationUncheckedCreateWithoutUser_organizationsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUser_organizationsInput
    upsert?: OrganizationUpsertWithoutUser_organizationsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutUser_organizationsInput, OrganizationUpdateWithoutUser_organizationsInput>, OrganizationUncheckedUpdateWithoutUser_organizationsInput>
  }

  export type EventCreateNestedOneWithoutEvent_settingsInput = {
    create?: XOR<EventCreateWithoutEvent_settingsInput, EventUncheckedCreateWithoutEvent_settingsInput>
    connectOrCreate?: EventCreateOrConnectWithoutEvent_settingsInput
    connect?: EventWhereUniqueInput
  }

  export type EventUpdateOneRequiredWithoutEvent_settingsNestedInput = {
    create?: XOR<EventCreateWithoutEvent_settingsInput, EventUncheckedCreateWithoutEvent_settingsInput>
    connectOrCreate?: EventCreateOrConnectWithoutEvent_settingsInput
    upsert?: EventUpsertWithoutEvent_settingsInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutEvent_settingsInput, EventUpdateWithoutEvent_settingsInput>, EventUncheckedUpdateWithoutEvent_settingsInput>
  }

  export type UserCreateNestedOneWithoutImagesInput = {
    create?: XOR<UserCreateWithoutImagesInput, UserUncheckedCreateWithoutImagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutImagesInput
    connect?: UserWhereUniqueInput
  }

  export type ImageLinkCreateNestedManyWithoutImageInput = {
    create?: XOR<ImageLinkCreateWithoutImageInput, ImageLinkUncheckedCreateWithoutImageInput> | ImageLinkCreateWithoutImageInput[] | ImageLinkUncheckedCreateWithoutImageInput[]
    connectOrCreate?: ImageLinkCreateOrConnectWithoutImageInput | ImageLinkCreateOrConnectWithoutImageInput[]
    createMany?: ImageLinkCreateManyImageInputEnvelope
    connect?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
  }

  export type ImageLinkUncheckedCreateNestedManyWithoutImageInput = {
    create?: XOR<ImageLinkCreateWithoutImageInput, ImageLinkUncheckedCreateWithoutImageInput> | ImageLinkCreateWithoutImageInput[] | ImageLinkUncheckedCreateWithoutImageInput[]
    connectOrCreate?: ImageLinkCreateOrConnectWithoutImageInput | ImageLinkCreateOrConnectWithoutImageInput[]
    createMany?: ImageLinkCreateManyImageInputEnvelope
    connect?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<UserCreateWithoutImagesInput, UserUncheckedCreateWithoutImagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutImagesInput
    upsert?: UserUpsertWithoutImagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutImagesInput, UserUpdateWithoutImagesInput>, UserUncheckedUpdateWithoutImagesInput>
  }

  export type ImageLinkUpdateManyWithoutImageNestedInput = {
    create?: XOR<ImageLinkCreateWithoutImageInput, ImageLinkUncheckedCreateWithoutImageInput> | ImageLinkCreateWithoutImageInput[] | ImageLinkUncheckedCreateWithoutImageInput[]
    connectOrCreate?: ImageLinkCreateOrConnectWithoutImageInput | ImageLinkCreateOrConnectWithoutImageInput[]
    upsert?: ImageLinkUpsertWithWhereUniqueWithoutImageInput | ImageLinkUpsertWithWhereUniqueWithoutImageInput[]
    createMany?: ImageLinkCreateManyImageInputEnvelope
    set?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    disconnect?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    delete?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    connect?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    update?: ImageLinkUpdateWithWhereUniqueWithoutImageInput | ImageLinkUpdateWithWhereUniqueWithoutImageInput[]
    updateMany?: ImageLinkUpdateManyWithWhereWithoutImageInput | ImageLinkUpdateManyWithWhereWithoutImageInput[]
    deleteMany?: ImageLinkScalarWhereInput | ImageLinkScalarWhereInput[]
  }

  export type ImageLinkUncheckedUpdateManyWithoutImageNestedInput = {
    create?: XOR<ImageLinkCreateWithoutImageInput, ImageLinkUncheckedCreateWithoutImageInput> | ImageLinkCreateWithoutImageInput[] | ImageLinkUncheckedCreateWithoutImageInput[]
    connectOrCreate?: ImageLinkCreateOrConnectWithoutImageInput | ImageLinkCreateOrConnectWithoutImageInput[]
    upsert?: ImageLinkUpsertWithWhereUniqueWithoutImageInput | ImageLinkUpsertWithWhereUniqueWithoutImageInput[]
    createMany?: ImageLinkCreateManyImageInputEnvelope
    set?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    disconnect?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    delete?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    connect?: ImageLinkWhereUniqueInput | ImageLinkWhereUniqueInput[]
    update?: ImageLinkUpdateWithWhereUniqueWithoutImageInput | ImageLinkUpdateWithWhereUniqueWithoutImageInput[]
    updateMany?: ImageLinkUpdateManyWithWhereWithoutImageInput | ImageLinkUpdateManyWithWhereWithoutImageInput[]
    deleteMany?: ImageLinkScalarWhereInput | ImageLinkScalarWhereInput[]
  }

  export type ImageCreateNestedOneWithoutImage_linksInput = {
    create?: XOR<ImageCreateWithoutImage_linksInput, ImageUncheckedCreateWithoutImage_linksInput>
    connectOrCreate?: ImageCreateOrConnectWithoutImage_linksInput
    connect?: ImageWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutImage_linksInput = {
    create?: XOR<OrganizationCreateWithoutImage_linksInput, OrganizationUncheckedCreateWithoutImage_linksInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutImage_linksInput
    connect?: OrganizationWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutImage_linksInput = {
    create?: XOR<EventCreateWithoutImage_linksInput, EventUncheckedCreateWithoutImage_linksInput>
    connectOrCreate?: EventCreateOrConnectWithoutImage_linksInput
    connect?: EventWhereUniqueInput
  }

  export type ImageUpdateOneRequiredWithoutImage_linksNestedInput = {
    create?: XOR<ImageCreateWithoutImage_linksInput, ImageUncheckedCreateWithoutImage_linksInput>
    connectOrCreate?: ImageCreateOrConnectWithoutImage_linksInput
    upsert?: ImageUpsertWithoutImage_linksInput
    connect?: ImageWhereUniqueInput
    update?: XOR<XOR<ImageUpdateToOneWithWhereWithoutImage_linksInput, ImageUpdateWithoutImage_linksInput>, ImageUncheckedUpdateWithoutImage_linksInput>
  }

  export type OrganizationUpdateOneWithoutImage_linksNestedInput = {
    create?: XOR<OrganizationCreateWithoutImage_linksInput, OrganizationUncheckedCreateWithoutImage_linksInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutImage_linksInput
    upsert?: OrganizationUpsertWithoutImage_linksInput
    disconnect?: OrganizationWhereInput | boolean
    delete?: OrganizationWhereInput | boolean
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutImage_linksInput, OrganizationUpdateWithoutImage_linksInput>, OrganizationUncheckedUpdateWithoutImage_linksInput>
  }

  export type EventUpdateOneWithoutImage_linksNestedInput = {
    create?: XOR<EventCreateWithoutImage_linksInput, EventUncheckedCreateWithoutImage_linksInput>
    connectOrCreate?: EventCreateOrConnectWithoutImage_linksInput
    upsert?: EventUpsertWithoutImage_linksInput
    disconnect?: EventWhereInput | boolean
    delete?: EventWhereInput | boolean
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutImage_linksInput, EventUpdateWithoutImage_linksInput>, EventUncheckedUpdateWithoutImage_linksInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ReferralCodeCreateWithoutUserInput = {
    code: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ReferralCodeUncheckedCreateWithoutUserInput = {
    id?: number
    code: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ReferralCodeCreateOrConnectWithoutUserInput = {
    where: ReferralCodeWhereUniqueInput
    create: XOR<ReferralCodeCreateWithoutUserInput, ReferralCodeUncheckedCreateWithoutUserInput>
  }

  export type ReferralCodeCreateManyUserInputEnvelope = {
    data: ReferralCodeCreateManyUserInput | ReferralCodeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EmailLogCreateWithoutUserInput = {
    email_type: string
    subject: string
    status: string
    sent_at?: Date | string | null
    error_message?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    event?: EventCreateNestedOneWithoutEmail_logsInput
  }

  export type EmailLogUncheckedCreateWithoutUserInput = {
    id?: number
    event_id?: number | null
    email_type: string
    subject: string
    status: string
    sent_at?: Date | string | null
    error_message?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type EmailLogCreateOrConnectWithoutUserInput = {
    where: EmailLogWhereUniqueInput
    create: XOR<EmailLogCreateWithoutUserInput, EmailLogUncheckedCreateWithoutUserInput>
  }

  export type EmailLogCreateManyUserInputEnvelope = {
    data: EmailLogCreateManyUserInput | EmailLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutUserInput = {
    status: string
    payment_method: string
    amount: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
    order_items?: OrderItemCreateNestedManyWithoutOrderInput
    order_promos?: OrderPromoCreateNestedManyWithoutOrderInput
    payments?: PaymentCreateNestedManyWithoutOrderInput
    webhook_logs?: WebhookLogCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutUserInput = {
    id?: number
    status: string
    payment_method: string
    amount: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
    order_items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    order_promos?: OrderPromoUncheckedCreateNestedManyWithoutOrderInput
    payments?: PaymentUncheckedCreateNestedManyWithoutOrderInput
    webhook_logs?: WebhookLogUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutUserInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderCreateManyUserInputEnvelope = {
    data: OrderCreateManyUserInput | OrderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CheckinLogCreateWithoutUserInput = {
    checkin_time: Date | string
    verified_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    ticket: TicketCreateNestedOneWithoutCheckin_logsInput
    event: EventCreateNestedOneWithoutCheckin_logsInput
  }

  export type CheckinLogUncheckedCreateWithoutUserInput = {
    id?: number
    ticket_id: number
    event_id: number
    checkin_time: Date | string
    verified_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CheckinLogCreateOrConnectWithoutUserInput = {
    where: CheckinLogWhereUniqueInput
    create: XOR<CheckinLogCreateWithoutUserInput, CheckinLogUncheckedCreateWithoutUserInput>
  }

  export type CheckinLogCreateManyUserInputEnvelope = {
    data: CheckinLogCreateManyUserInput | CheckinLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserOrganizationCreateWithoutUserInput = {
    role: string
    created_at?: Date | string
    updated_at?: Date | string
    organization: OrganizationCreateNestedOneWithoutUser_organizationsInput
  }

  export type UserOrganizationUncheckedCreateWithoutUserInput = {
    id?: number
    organization_id: number
    role: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserOrganizationCreateOrConnectWithoutUserInput = {
    where: UserOrganizationWhereUniqueInput
    create: XOR<UserOrganizationCreateWithoutUserInput, UserOrganizationUncheckedCreateWithoutUserInput>
  }

  export type UserOrganizationCreateManyUserInputEnvelope = {
    data: UserOrganizationCreateManyUserInput | UserOrganizationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TrackingVisitCreateWithoutUserInput = {
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_content?: string | null
    referrer_url?: string | null
    landing_page?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    event: EventCreateNestedOneWithoutTracking_visitsInput
  }

  export type TrackingVisitUncheckedCreateWithoutUserInput = {
    id?: number
    event_id: number
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_content?: string | null
    referrer_url?: string | null
    landing_page?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TrackingVisitCreateOrConnectWithoutUserInput = {
    where: TrackingVisitWhereUniqueInput
    create: XOR<TrackingVisitCreateWithoutUserInput, TrackingVisitUncheckedCreateWithoutUserInput>
  }

  export type TrackingVisitCreateManyUserInputEnvelope = {
    data: TrackingVisitCreateManyUserInput | TrackingVisitCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WebhookLogCreateWithoutUserInput = {
    target_url: string
    event_type: string
    payload: string
    status_code: number
    response_text?: string | null
    triggered_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    order?: OrderCreateNestedOneWithoutWebhook_logsInput
    event?: EventCreateNestedOneWithoutWebhook_logsInput
  }

  export type WebhookLogUncheckedCreateWithoutUserInput = {
    id?: number
    target_url: string
    event_type: string
    order_id?: number | null
    event_id?: number | null
    payload: string
    status_code: number
    response_text?: string | null
    triggered_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WebhookLogCreateOrConnectWithoutUserInput = {
    where: WebhookLogWhereUniqueInput
    create: XOR<WebhookLogCreateWithoutUserInput, WebhookLogUncheckedCreateWithoutUserInput>
  }

  export type WebhookLogCreateManyUserInputEnvelope = {
    data: WebhookLogCreateManyUserInput | WebhookLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ImageCreateWithoutUserInput = {
    file_path: string
    file_name?: string | null
    file_type?: string | null
    file_size?: number | null
    alt_text?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    image_links?: ImageLinkCreateNestedManyWithoutImageInput
  }

  export type ImageUncheckedCreateWithoutUserInput = {
    id?: number
    file_path: string
    file_name?: string | null
    file_type?: string | null
    file_size?: number | null
    alt_text?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    image_links?: ImageLinkUncheckedCreateNestedManyWithoutImageInput
  }

  export type ImageCreateOrConnectWithoutUserInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput>
  }

  export type ImageCreateManyUserInputEnvelope = {
    data: ImageCreateManyUserInput | ImageCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReferralCodeUpsertWithWhereUniqueWithoutUserInput = {
    where: ReferralCodeWhereUniqueInput
    update: XOR<ReferralCodeUpdateWithoutUserInput, ReferralCodeUncheckedUpdateWithoutUserInput>
    create: XOR<ReferralCodeCreateWithoutUserInput, ReferralCodeUncheckedCreateWithoutUserInput>
  }

  export type ReferralCodeUpdateWithWhereUniqueWithoutUserInput = {
    where: ReferralCodeWhereUniqueInput
    data: XOR<ReferralCodeUpdateWithoutUserInput, ReferralCodeUncheckedUpdateWithoutUserInput>
  }

  export type ReferralCodeUpdateManyWithWhereWithoutUserInput = {
    where: ReferralCodeScalarWhereInput
    data: XOR<ReferralCodeUpdateManyMutationInput, ReferralCodeUncheckedUpdateManyWithoutUserInput>
  }

  export type ReferralCodeScalarWhereInput = {
    AND?: ReferralCodeScalarWhereInput | ReferralCodeScalarWhereInput[]
    OR?: ReferralCodeScalarWhereInput[]
    NOT?: ReferralCodeScalarWhereInput | ReferralCodeScalarWhereInput[]
    id?: IntFilter<"ReferralCode"> | number
    user_id?: StringFilter<"ReferralCode"> | string
    code?: StringFilter<"ReferralCode"> | string
    created_at?: DateTimeFilter<"ReferralCode"> | Date | string
    updated_at?: DateTimeFilter<"ReferralCode"> | Date | string
  }

  export type EmailLogUpsertWithWhereUniqueWithoutUserInput = {
    where: EmailLogWhereUniqueInput
    update: XOR<EmailLogUpdateWithoutUserInput, EmailLogUncheckedUpdateWithoutUserInput>
    create: XOR<EmailLogCreateWithoutUserInput, EmailLogUncheckedCreateWithoutUserInput>
  }

  export type EmailLogUpdateWithWhereUniqueWithoutUserInput = {
    where: EmailLogWhereUniqueInput
    data: XOR<EmailLogUpdateWithoutUserInput, EmailLogUncheckedUpdateWithoutUserInput>
  }

  export type EmailLogUpdateManyWithWhereWithoutUserInput = {
    where: EmailLogScalarWhereInput
    data: XOR<EmailLogUpdateManyMutationInput, EmailLogUncheckedUpdateManyWithoutUserInput>
  }

  export type EmailLogScalarWhereInput = {
    AND?: EmailLogScalarWhereInput | EmailLogScalarWhereInput[]
    OR?: EmailLogScalarWhereInput[]
    NOT?: EmailLogScalarWhereInput | EmailLogScalarWhereInput[]
    id?: IntFilter<"EmailLog"> | number
    user_id?: StringFilter<"EmailLog"> | string
    event_id?: IntNullableFilter<"EmailLog"> | number | null
    email_type?: StringFilter<"EmailLog"> | string
    subject?: StringFilter<"EmailLog"> | string
    status?: StringFilter<"EmailLog"> | string
    sent_at?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    error_message?: StringNullableFilter<"EmailLog"> | string | null
    created_at?: DateTimeFilter<"EmailLog"> | Date | string
    updated_at?: DateTimeFilter<"EmailLog"> | Date | string
  }

  export type OrderUpsertWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
  }

  export type OrderUpdateManyWithWhereWithoutUserInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutUserInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    id?: IntFilter<"Order"> | number
    user_id?: StringNullableFilter<"Order"> | string | null
    status?: StringFilter<"Order"> | string
    payment_method?: StringFilter<"Order"> | string
    amount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"Order"> | Date | string
    updated_at?: DateTimeFilter<"Order"> | Date | string
  }

  export type CheckinLogUpsertWithWhereUniqueWithoutUserInput = {
    where: CheckinLogWhereUniqueInput
    update: XOR<CheckinLogUpdateWithoutUserInput, CheckinLogUncheckedUpdateWithoutUserInput>
    create: XOR<CheckinLogCreateWithoutUserInput, CheckinLogUncheckedCreateWithoutUserInput>
  }

  export type CheckinLogUpdateWithWhereUniqueWithoutUserInput = {
    where: CheckinLogWhereUniqueInput
    data: XOR<CheckinLogUpdateWithoutUserInput, CheckinLogUncheckedUpdateWithoutUserInput>
  }

  export type CheckinLogUpdateManyWithWhereWithoutUserInput = {
    where: CheckinLogScalarWhereInput
    data: XOR<CheckinLogUpdateManyMutationInput, CheckinLogUncheckedUpdateManyWithoutUserInput>
  }

  export type CheckinLogScalarWhereInput = {
    AND?: CheckinLogScalarWhereInput | CheckinLogScalarWhereInput[]
    OR?: CheckinLogScalarWhereInput[]
    NOT?: CheckinLogScalarWhereInput | CheckinLogScalarWhereInput[]
    id?: IntFilter<"CheckinLog"> | number
    user_id?: StringFilter<"CheckinLog"> | string
    ticket_id?: IntFilter<"CheckinLog"> | number
    event_id?: IntFilter<"CheckinLog"> | number
    checkin_time?: DateTimeFilter<"CheckinLog"> | Date | string
    verified_by?: StringNullableFilter<"CheckinLog"> | string | null
    created_at?: DateTimeFilter<"CheckinLog"> | Date | string
    updated_at?: DateTimeFilter<"CheckinLog"> | Date | string
  }

  export type UserOrganizationUpsertWithWhereUniqueWithoutUserInput = {
    where: UserOrganizationWhereUniqueInput
    update: XOR<UserOrganizationUpdateWithoutUserInput, UserOrganizationUncheckedUpdateWithoutUserInput>
    create: XOR<UserOrganizationCreateWithoutUserInput, UserOrganizationUncheckedCreateWithoutUserInput>
  }

  export type UserOrganizationUpdateWithWhereUniqueWithoutUserInput = {
    where: UserOrganizationWhereUniqueInput
    data: XOR<UserOrganizationUpdateWithoutUserInput, UserOrganizationUncheckedUpdateWithoutUserInput>
  }

  export type UserOrganizationUpdateManyWithWhereWithoutUserInput = {
    where: UserOrganizationScalarWhereInput
    data: XOR<UserOrganizationUpdateManyMutationInput, UserOrganizationUncheckedUpdateManyWithoutUserInput>
  }

  export type UserOrganizationScalarWhereInput = {
    AND?: UserOrganizationScalarWhereInput | UserOrganizationScalarWhereInput[]
    OR?: UserOrganizationScalarWhereInput[]
    NOT?: UserOrganizationScalarWhereInput | UserOrganizationScalarWhereInput[]
    id?: IntFilter<"UserOrganization"> | number
    user_id?: StringFilter<"UserOrganization"> | string
    organization_id?: IntFilter<"UserOrganization"> | number
    role?: StringFilter<"UserOrganization"> | string
    created_at?: DateTimeFilter<"UserOrganization"> | Date | string
    updated_at?: DateTimeFilter<"UserOrganization"> | Date | string
  }

  export type TrackingVisitUpsertWithWhereUniqueWithoutUserInput = {
    where: TrackingVisitWhereUniqueInput
    update: XOR<TrackingVisitUpdateWithoutUserInput, TrackingVisitUncheckedUpdateWithoutUserInput>
    create: XOR<TrackingVisitCreateWithoutUserInput, TrackingVisitUncheckedCreateWithoutUserInput>
  }

  export type TrackingVisitUpdateWithWhereUniqueWithoutUserInput = {
    where: TrackingVisitWhereUniqueInput
    data: XOR<TrackingVisitUpdateWithoutUserInput, TrackingVisitUncheckedUpdateWithoutUserInput>
  }

  export type TrackingVisitUpdateManyWithWhereWithoutUserInput = {
    where: TrackingVisitScalarWhereInput
    data: XOR<TrackingVisitUpdateManyMutationInput, TrackingVisitUncheckedUpdateManyWithoutUserInput>
  }

  export type TrackingVisitScalarWhereInput = {
    AND?: TrackingVisitScalarWhereInput | TrackingVisitScalarWhereInput[]
    OR?: TrackingVisitScalarWhereInput[]
    NOT?: TrackingVisitScalarWhereInput | TrackingVisitScalarWhereInput[]
    id?: IntFilter<"TrackingVisit"> | number
    user_id?: StringNullableFilter<"TrackingVisit"> | string | null
    event_id?: IntFilter<"TrackingVisit"> | number
    utm_source?: StringNullableFilter<"TrackingVisit"> | string | null
    utm_medium?: StringNullableFilter<"TrackingVisit"> | string | null
    utm_campaign?: StringNullableFilter<"TrackingVisit"> | string | null
    utm_content?: StringNullableFilter<"TrackingVisit"> | string | null
    referrer_url?: StringNullableFilter<"TrackingVisit"> | string | null
    landing_page?: StringNullableFilter<"TrackingVisit"> | string | null
    created_at?: DateTimeFilter<"TrackingVisit"> | Date | string
    updated_at?: DateTimeFilter<"TrackingVisit"> | Date | string
  }

  export type WebhookLogUpsertWithWhereUniqueWithoutUserInput = {
    where: WebhookLogWhereUniqueInput
    update: XOR<WebhookLogUpdateWithoutUserInput, WebhookLogUncheckedUpdateWithoutUserInput>
    create: XOR<WebhookLogCreateWithoutUserInput, WebhookLogUncheckedCreateWithoutUserInput>
  }

  export type WebhookLogUpdateWithWhereUniqueWithoutUserInput = {
    where: WebhookLogWhereUniqueInput
    data: XOR<WebhookLogUpdateWithoutUserInput, WebhookLogUncheckedUpdateWithoutUserInput>
  }

  export type WebhookLogUpdateManyWithWhereWithoutUserInput = {
    where: WebhookLogScalarWhereInput
    data: XOR<WebhookLogUpdateManyMutationInput, WebhookLogUncheckedUpdateManyWithoutUserInput>
  }

  export type WebhookLogScalarWhereInput = {
    AND?: WebhookLogScalarWhereInput | WebhookLogScalarWhereInput[]
    OR?: WebhookLogScalarWhereInput[]
    NOT?: WebhookLogScalarWhereInput | WebhookLogScalarWhereInput[]
    id?: IntFilter<"WebhookLog"> | number
    target_url?: StringFilter<"WebhookLog"> | string
    event_type?: StringFilter<"WebhookLog"> | string
    order_id?: IntNullableFilter<"WebhookLog"> | number | null
    event_id?: IntNullableFilter<"WebhookLog"> | number | null
    user_id?: StringNullableFilter<"WebhookLog"> | string | null
    payload?: StringFilter<"WebhookLog"> | string
    status_code?: IntFilter<"WebhookLog"> | number
    response_text?: StringNullableFilter<"WebhookLog"> | string | null
    triggered_at?: DateTimeFilter<"WebhookLog"> | Date | string
    created_at?: DateTimeFilter<"WebhookLog"> | Date | string
    updated_at?: DateTimeFilter<"WebhookLog"> | Date | string
  }

  export type ImageUpsertWithWhereUniqueWithoutUserInput = {
    where: ImageWhereUniqueInput
    update: XOR<ImageUpdateWithoutUserInput, ImageUncheckedUpdateWithoutUserInput>
    create: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput>
  }

  export type ImageUpdateWithWhereUniqueWithoutUserInput = {
    where: ImageWhereUniqueInput
    data: XOR<ImageUpdateWithoutUserInput, ImageUncheckedUpdateWithoutUserInput>
  }

  export type ImageUpdateManyWithWhereWithoutUserInput = {
    where: ImageScalarWhereInput
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyWithoutUserInput>
  }

  export type ImageScalarWhereInput = {
    AND?: ImageScalarWhereInput | ImageScalarWhereInput[]
    OR?: ImageScalarWhereInput[]
    NOT?: ImageScalarWhereInput | ImageScalarWhereInput[]
    id?: IntFilter<"Image"> | number
    file_path?: StringFilter<"Image"> | string
    file_name?: StringNullableFilter<"Image"> | string | null
    file_type?: StringNullableFilter<"Image"> | string | null
    file_size?: IntNullableFilter<"Image"> | number | null
    alt_text?: StringNullableFilter<"Image"> | string | null
    uploaded_by?: StringFilter<"Image"> | string
    created_at?: DateTimeFilter<"Image"> | Date | string
    updated_at?: DateTimeFilter<"Image"> | Date | string
  }

  export type EventCreateWithoutOrganizationInput = {
    name: string
    description?: string | null
    date: Date | string
    location?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    tickets?: TicketCreateNestedManyWithoutEventInput
    email_logs?: EmailLogCreateNestedManyWithoutEventInput
    webhook_logs?: WebhookLogCreateNestedManyWithoutEventInput
    checkin_logs?: CheckinLogCreateNestedManyWithoutEventInput
    tracking_visits?: TrackingVisitCreateNestedManyWithoutEventInput
    event_settings?: EventSettingCreateNestedManyWithoutEventInput
    image_links?: ImageLinkCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutOrganizationInput = {
    id?: number
    name: string
    description?: string | null
    date: Date | string
    location?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    tickets?: TicketUncheckedCreateNestedManyWithoutEventInput
    email_logs?: EmailLogUncheckedCreateNestedManyWithoutEventInput
    webhook_logs?: WebhookLogUncheckedCreateNestedManyWithoutEventInput
    checkin_logs?: CheckinLogUncheckedCreateNestedManyWithoutEventInput
    tracking_visits?: TrackingVisitUncheckedCreateNestedManyWithoutEventInput
    event_settings?: EventSettingUncheckedCreateNestedManyWithoutEventInput
    image_links?: ImageLinkUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutOrganizationInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutOrganizationInput, EventUncheckedCreateWithoutOrganizationInput>
  }

  export type EventCreateManyOrganizationInputEnvelope = {
    data: EventCreateManyOrganizationInput | EventCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type WebhookSubscriptionCreateWithoutOrganizationInput = {
    target_url: string
    event_type: string
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WebhookSubscriptionUncheckedCreateWithoutOrganizationInput = {
    id?: number
    target_url: string
    event_type: string
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WebhookSubscriptionCreateOrConnectWithoutOrganizationInput = {
    where: WebhookSubscriptionWhereUniqueInput
    create: XOR<WebhookSubscriptionCreateWithoutOrganizationInput, WebhookSubscriptionUncheckedCreateWithoutOrganizationInput>
  }

  export type WebhookSubscriptionCreateManyOrganizationInputEnvelope = {
    data: WebhookSubscriptionCreateManyOrganizationInput | WebhookSubscriptionCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type UserOrganizationCreateWithoutOrganizationInput = {
    role: string
    created_at?: Date | string
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutUser_organizationsInput
  }

  export type UserOrganizationUncheckedCreateWithoutOrganizationInput = {
    id?: number
    user_id: string
    role: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserOrganizationCreateOrConnectWithoutOrganizationInput = {
    where: UserOrganizationWhereUniqueInput
    create: XOR<UserOrganizationCreateWithoutOrganizationInput, UserOrganizationUncheckedCreateWithoutOrganizationInput>
  }

  export type UserOrganizationCreateManyOrganizationInputEnvelope = {
    data: UserOrganizationCreateManyOrganizationInput | UserOrganizationCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type ImageLinkCreateWithoutOrganizationInput = {
    entity_type: string
    entity_id: number
    usage_type: string
    linked_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    image: ImageCreateNestedOneWithoutImage_linksInput
    event?: EventCreateNestedOneWithoutImage_linksInput
  }

  export type ImageLinkUncheckedCreateWithoutOrganizationInput = {
    id?: number
    image_id: number
    entity_type: string
    entity_id: number
    event_id?: number | null
    usage_type: string
    linked_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ImageLinkCreateOrConnectWithoutOrganizationInput = {
    where: ImageLinkWhereUniqueInput
    create: XOR<ImageLinkCreateWithoutOrganizationInput, ImageLinkUncheckedCreateWithoutOrganizationInput>
  }

  export type ImageLinkCreateManyOrganizationInputEnvelope = {
    data: ImageLinkCreateManyOrganizationInput | ImageLinkCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type EventUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutOrganizationInput, EventUncheckedUpdateWithoutOrganizationInput>
    create: XOR<EventCreateWithoutOrganizationInput, EventUncheckedCreateWithoutOrganizationInput>
  }

  export type EventUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutOrganizationInput, EventUncheckedUpdateWithoutOrganizationInput>
  }

  export type EventUpdateManyWithWhereWithoutOrganizationInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    id?: IntFilter<"Event"> | number
    organization_id?: IntFilter<"Event"> | number
    name?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    date?: DateTimeFilter<"Event"> | Date | string
    location?: StringNullableFilter<"Event"> | string | null
    created_at?: DateTimeFilter<"Event"> | Date | string
    updated_at?: DateTimeFilter<"Event"> | Date | string
  }

  export type WebhookSubscriptionUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: WebhookSubscriptionWhereUniqueInput
    update: XOR<WebhookSubscriptionUpdateWithoutOrganizationInput, WebhookSubscriptionUncheckedUpdateWithoutOrganizationInput>
    create: XOR<WebhookSubscriptionCreateWithoutOrganizationInput, WebhookSubscriptionUncheckedCreateWithoutOrganizationInput>
  }

  export type WebhookSubscriptionUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: WebhookSubscriptionWhereUniqueInput
    data: XOR<WebhookSubscriptionUpdateWithoutOrganizationInput, WebhookSubscriptionUncheckedUpdateWithoutOrganizationInput>
  }

  export type WebhookSubscriptionUpdateManyWithWhereWithoutOrganizationInput = {
    where: WebhookSubscriptionScalarWhereInput
    data: XOR<WebhookSubscriptionUpdateManyMutationInput, WebhookSubscriptionUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type WebhookSubscriptionScalarWhereInput = {
    AND?: WebhookSubscriptionScalarWhereInput | WebhookSubscriptionScalarWhereInput[]
    OR?: WebhookSubscriptionScalarWhereInput[]
    NOT?: WebhookSubscriptionScalarWhereInput | WebhookSubscriptionScalarWhereInput[]
    id?: IntFilter<"WebhookSubscription"> | number
    organization_id?: IntFilter<"WebhookSubscription"> | number
    target_url?: StringFilter<"WebhookSubscription"> | string
    event_type?: StringFilter<"WebhookSubscription"> | string
    is_active?: BoolFilter<"WebhookSubscription"> | boolean
    created_at?: DateTimeFilter<"WebhookSubscription"> | Date | string
    updated_at?: DateTimeFilter<"WebhookSubscription"> | Date | string
  }

  export type UserOrganizationUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: UserOrganizationWhereUniqueInput
    update: XOR<UserOrganizationUpdateWithoutOrganizationInput, UserOrganizationUncheckedUpdateWithoutOrganizationInput>
    create: XOR<UserOrganizationCreateWithoutOrganizationInput, UserOrganizationUncheckedCreateWithoutOrganizationInput>
  }

  export type UserOrganizationUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: UserOrganizationWhereUniqueInput
    data: XOR<UserOrganizationUpdateWithoutOrganizationInput, UserOrganizationUncheckedUpdateWithoutOrganizationInput>
  }

  export type UserOrganizationUpdateManyWithWhereWithoutOrganizationInput = {
    where: UserOrganizationScalarWhereInput
    data: XOR<UserOrganizationUpdateManyMutationInput, UserOrganizationUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type ImageLinkUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: ImageLinkWhereUniqueInput
    update: XOR<ImageLinkUpdateWithoutOrganizationInput, ImageLinkUncheckedUpdateWithoutOrganizationInput>
    create: XOR<ImageLinkCreateWithoutOrganizationInput, ImageLinkUncheckedCreateWithoutOrganizationInput>
  }

  export type ImageLinkUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: ImageLinkWhereUniqueInput
    data: XOR<ImageLinkUpdateWithoutOrganizationInput, ImageLinkUncheckedUpdateWithoutOrganizationInput>
  }

  export type ImageLinkUpdateManyWithWhereWithoutOrganizationInput = {
    where: ImageLinkScalarWhereInput
    data: XOR<ImageLinkUpdateManyMutationInput, ImageLinkUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type ImageLinkScalarWhereInput = {
    AND?: ImageLinkScalarWhereInput | ImageLinkScalarWhereInput[]
    OR?: ImageLinkScalarWhereInput[]
    NOT?: ImageLinkScalarWhereInput | ImageLinkScalarWhereInput[]
    id?: IntFilter<"ImageLink"> | number
    image_id?: IntFilter<"ImageLink"> | number
    entity_type?: StringFilter<"ImageLink"> | string
    entity_id?: IntFilter<"ImageLink"> | number
    organization_id?: IntNullableFilter<"ImageLink"> | number | null
    event_id?: IntNullableFilter<"ImageLink"> | number | null
    usage_type?: StringFilter<"ImageLink"> | string
    linked_at?: DateTimeFilter<"ImageLink"> | Date | string
    created_at?: DateTimeFilter<"ImageLink"> | Date | string
    updated_at?: DateTimeFilter<"ImageLink"> | Date | string
  }

  export type OrderPromoCreateWithoutPromo_codeInput = {
    discount_applied: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
    order: OrderCreateNestedOneWithoutOrder_promosInput
  }

  export type OrderPromoUncheckedCreateWithoutPromo_codeInput = {
    id?: number
    order_id: number
    discount_applied: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type OrderPromoCreateOrConnectWithoutPromo_codeInput = {
    where: OrderPromoWhereUniqueInput
    create: XOR<OrderPromoCreateWithoutPromo_codeInput, OrderPromoUncheckedCreateWithoutPromo_codeInput>
  }

  export type OrderPromoCreateManyPromo_codeInputEnvelope = {
    data: OrderPromoCreateManyPromo_codeInput | OrderPromoCreateManyPromo_codeInput[]
    skipDuplicates?: boolean
  }

  export type OrderPromoUpsertWithWhereUniqueWithoutPromo_codeInput = {
    where: OrderPromoWhereUniqueInput
    update: XOR<OrderPromoUpdateWithoutPromo_codeInput, OrderPromoUncheckedUpdateWithoutPromo_codeInput>
    create: XOR<OrderPromoCreateWithoutPromo_codeInput, OrderPromoUncheckedCreateWithoutPromo_codeInput>
  }

  export type OrderPromoUpdateWithWhereUniqueWithoutPromo_codeInput = {
    where: OrderPromoWhereUniqueInput
    data: XOR<OrderPromoUpdateWithoutPromo_codeInput, OrderPromoUncheckedUpdateWithoutPromo_codeInput>
  }

  export type OrderPromoUpdateManyWithWhereWithoutPromo_codeInput = {
    where: OrderPromoScalarWhereInput
    data: XOR<OrderPromoUpdateManyMutationInput, OrderPromoUncheckedUpdateManyWithoutPromo_codeInput>
  }

  export type OrderPromoScalarWhereInput = {
    AND?: OrderPromoScalarWhereInput | OrderPromoScalarWhereInput[]
    OR?: OrderPromoScalarWhereInput[]
    NOT?: OrderPromoScalarWhereInput | OrderPromoScalarWhereInput[]
    id?: IntFilter<"OrderPromo"> | number
    order_id?: IntFilter<"OrderPromo"> | number
    promo_code_id?: IntFilter<"OrderPromo"> | number
    discount_applied?: DecimalFilter<"OrderPromo"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"OrderPromo"> | Date | string
    updated_at?: DateTimeFilter<"OrderPromo"> | Date | string
  }

  export type OrderCreateWithoutOrder_promosInput = {
    status: string
    payment_method: string
    amount: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
    user?: UserCreateNestedOneWithoutOrdersInput
    order_items?: OrderItemCreateNestedManyWithoutOrderInput
    payments?: PaymentCreateNestedManyWithoutOrderInput
    webhook_logs?: WebhookLogCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutOrder_promosInput = {
    id?: number
    user_id?: string | null
    status: string
    payment_method: string
    amount: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
    order_items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    payments?: PaymentUncheckedCreateNestedManyWithoutOrderInput
    webhook_logs?: WebhookLogUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutOrder_promosInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutOrder_promosInput, OrderUncheckedCreateWithoutOrder_promosInput>
  }

  export type PromoCodeCreateWithoutOrder_promosInput = {
    code: string
    description?: string | null
    discount_type: string
    discount_value: Decimal | DecimalJsLike | number | string
    max_uses?: number
    uses?: number
    valid_from?: Date | string | null
    valid_until?: Date | string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PromoCodeUncheckedCreateWithoutOrder_promosInput = {
    id?: number
    code: string
    description?: string | null
    discount_type: string
    discount_value: Decimal | DecimalJsLike | number | string
    max_uses?: number
    uses?: number
    valid_from?: Date | string | null
    valid_until?: Date | string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PromoCodeCreateOrConnectWithoutOrder_promosInput = {
    where: PromoCodeWhereUniqueInput
    create: XOR<PromoCodeCreateWithoutOrder_promosInput, PromoCodeUncheckedCreateWithoutOrder_promosInput>
  }

  export type OrderUpsertWithoutOrder_promosInput = {
    update: XOR<OrderUpdateWithoutOrder_promosInput, OrderUncheckedUpdateWithoutOrder_promosInput>
    create: XOR<OrderCreateWithoutOrder_promosInput, OrderUncheckedCreateWithoutOrder_promosInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutOrder_promosInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutOrder_promosInput, OrderUncheckedUpdateWithoutOrder_promosInput>
  }

  export type OrderUpdateWithoutOrder_promosInput = {
    status?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutOrdersNestedInput
    order_items?: OrderItemUpdateManyWithoutOrderNestedInput
    payments?: PaymentUpdateManyWithoutOrderNestedInput
    webhook_logs?: WebhookLogUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutOrder_promosInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order_items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutOrderNestedInput
    webhook_logs?: WebhookLogUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type PromoCodeUpsertWithoutOrder_promosInput = {
    update: XOR<PromoCodeUpdateWithoutOrder_promosInput, PromoCodeUncheckedUpdateWithoutOrder_promosInput>
    create: XOR<PromoCodeCreateWithoutOrder_promosInput, PromoCodeUncheckedCreateWithoutOrder_promosInput>
    where?: PromoCodeWhereInput
  }

  export type PromoCodeUpdateToOneWithWhereWithoutOrder_promosInput = {
    where?: PromoCodeWhereInput
    data: XOR<PromoCodeUpdateWithoutOrder_promosInput, PromoCodeUncheckedUpdateWithoutOrder_promosInput>
  }

  export type PromoCodeUpdateWithoutOrder_promosInput = {
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    discount_type?: StringFieldUpdateOperationsInput | string
    discount_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    max_uses?: IntFieldUpdateOperationsInput | number
    uses?: IntFieldUpdateOperationsInput | number
    valid_from?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valid_until?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromoCodeUncheckedUpdateWithoutOrder_promosInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    discount_type?: StringFieldUpdateOperationsInput | string
    discount_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    max_uses?: IntFieldUpdateOperationsInput | number
    uses?: IntFieldUpdateOperationsInput | number
    valid_from?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valid_until?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutReferral_codesInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    is_verified?: boolean
    supabase_id?: string | null
    phone?: string | null
    avatar_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    email_logs?: EmailLogCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    checkin_logs?: CheckinLogCreateNestedManyWithoutUserInput
    user_organizations?: UserOrganizationCreateNestedManyWithoutUserInput
    tracking_visits?: TrackingVisitCreateNestedManyWithoutUserInput
    webhook_logs?: WebhookLogCreateNestedManyWithoutUserInput
    images?: ImageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReferral_codesInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    is_verified?: boolean
    supabase_id?: string | null
    phone?: string | null
    avatar_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    email_logs?: EmailLogUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    checkin_logs?: CheckinLogUncheckedCreateNestedManyWithoutUserInput
    user_organizations?: UserOrganizationUncheckedCreateNestedManyWithoutUserInput
    tracking_visits?: TrackingVisitUncheckedCreateNestedManyWithoutUserInput
    webhook_logs?: WebhookLogUncheckedCreateNestedManyWithoutUserInput
    images?: ImageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReferral_codesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReferral_codesInput, UserUncheckedCreateWithoutReferral_codesInput>
  }

  export type UserUpsertWithoutReferral_codesInput = {
    update: XOR<UserUpdateWithoutReferral_codesInput, UserUncheckedUpdateWithoutReferral_codesInput>
    create: XOR<UserCreateWithoutReferral_codesInput, UserUncheckedCreateWithoutReferral_codesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReferral_codesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReferral_codesInput, UserUncheckedUpdateWithoutReferral_codesInput>
  }

  export type UserUpdateWithoutReferral_codesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    supabase_id?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_logs?: EmailLogUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    checkin_logs?: CheckinLogUpdateManyWithoutUserNestedInput
    user_organizations?: UserOrganizationUpdateManyWithoutUserNestedInput
    tracking_visits?: TrackingVisitUpdateManyWithoutUserNestedInput
    webhook_logs?: WebhookLogUpdateManyWithoutUserNestedInput
    images?: ImageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReferral_codesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    supabase_id?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_logs?: EmailLogUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    checkin_logs?: CheckinLogUncheckedUpdateManyWithoutUserNestedInput
    user_organizations?: UserOrganizationUncheckedUpdateManyWithoutUserNestedInput
    tracking_visits?: TrackingVisitUncheckedUpdateManyWithoutUserNestedInput
    webhook_logs?: WebhookLogUncheckedUpdateManyWithoutUserNestedInput
    images?: ImageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutEmail_logsInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    is_verified?: boolean
    supabase_id?: string | null
    phone?: string | null
    avatar_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    referral_codes?: ReferralCodeCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    checkin_logs?: CheckinLogCreateNestedManyWithoutUserInput
    user_organizations?: UserOrganizationCreateNestedManyWithoutUserInput
    tracking_visits?: TrackingVisitCreateNestedManyWithoutUserInput
    webhook_logs?: WebhookLogCreateNestedManyWithoutUserInput
    images?: ImageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEmail_logsInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    is_verified?: boolean
    supabase_id?: string | null
    phone?: string | null
    avatar_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    referral_codes?: ReferralCodeUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    checkin_logs?: CheckinLogUncheckedCreateNestedManyWithoutUserInput
    user_organizations?: UserOrganizationUncheckedCreateNestedManyWithoutUserInput
    tracking_visits?: TrackingVisitUncheckedCreateNestedManyWithoutUserInput
    webhook_logs?: WebhookLogUncheckedCreateNestedManyWithoutUserInput
    images?: ImageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEmail_logsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmail_logsInput, UserUncheckedCreateWithoutEmail_logsInput>
  }

  export type EventCreateWithoutEmail_logsInput = {
    name: string
    description?: string | null
    date: Date | string
    location?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    organization: OrganizationCreateNestedOneWithoutEventsInput
    tickets?: TicketCreateNestedManyWithoutEventInput
    webhook_logs?: WebhookLogCreateNestedManyWithoutEventInput
    checkin_logs?: CheckinLogCreateNestedManyWithoutEventInput
    tracking_visits?: TrackingVisitCreateNestedManyWithoutEventInput
    event_settings?: EventSettingCreateNestedManyWithoutEventInput
    image_links?: ImageLinkCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutEmail_logsInput = {
    id?: number
    organization_id: number
    name: string
    description?: string | null
    date: Date | string
    location?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    tickets?: TicketUncheckedCreateNestedManyWithoutEventInput
    webhook_logs?: WebhookLogUncheckedCreateNestedManyWithoutEventInput
    checkin_logs?: CheckinLogUncheckedCreateNestedManyWithoutEventInput
    tracking_visits?: TrackingVisitUncheckedCreateNestedManyWithoutEventInput
    event_settings?: EventSettingUncheckedCreateNestedManyWithoutEventInput
    image_links?: ImageLinkUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutEmail_logsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutEmail_logsInput, EventUncheckedCreateWithoutEmail_logsInput>
  }

  export type UserUpsertWithoutEmail_logsInput = {
    update: XOR<UserUpdateWithoutEmail_logsInput, UserUncheckedUpdateWithoutEmail_logsInput>
    create: XOR<UserCreateWithoutEmail_logsInput, UserUncheckedCreateWithoutEmail_logsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEmail_logsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEmail_logsInput, UserUncheckedUpdateWithoutEmail_logsInput>
  }

  export type UserUpdateWithoutEmail_logsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    supabase_id?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    referral_codes?: ReferralCodeUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    checkin_logs?: CheckinLogUpdateManyWithoutUserNestedInput
    user_organizations?: UserOrganizationUpdateManyWithoutUserNestedInput
    tracking_visits?: TrackingVisitUpdateManyWithoutUserNestedInput
    webhook_logs?: WebhookLogUpdateManyWithoutUserNestedInput
    images?: ImageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEmail_logsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    supabase_id?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    referral_codes?: ReferralCodeUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    checkin_logs?: CheckinLogUncheckedUpdateManyWithoutUserNestedInput
    user_organizations?: UserOrganizationUncheckedUpdateManyWithoutUserNestedInput
    tracking_visits?: TrackingVisitUncheckedUpdateManyWithoutUserNestedInput
    webhook_logs?: WebhookLogUncheckedUpdateManyWithoutUserNestedInput
    images?: ImageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventUpsertWithoutEmail_logsInput = {
    update: XOR<EventUpdateWithoutEmail_logsInput, EventUncheckedUpdateWithoutEmail_logsInput>
    create: XOR<EventCreateWithoutEmail_logsInput, EventUncheckedCreateWithoutEmail_logsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutEmail_logsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutEmail_logsInput, EventUncheckedUpdateWithoutEmail_logsInput>
  }

  export type EventUpdateWithoutEmail_logsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutEventsNestedInput
    tickets?: TicketUpdateManyWithoutEventNestedInput
    webhook_logs?: WebhookLogUpdateManyWithoutEventNestedInput
    checkin_logs?: CheckinLogUpdateManyWithoutEventNestedInput
    tracking_visits?: TrackingVisitUpdateManyWithoutEventNestedInput
    event_settings?: EventSettingUpdateManyWithoutEventNestedInput
    image_links?: ImageLinkUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutEmail_logsInput = {
    id?: IntFieldUpdateOperationsInput | number
    organization_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: TicketUncheckedUpdateManyWithoutEventNestedInput
    webhook_logs?: WebhookLogUncheckedUpdateManyWithoutEventNestedInput
    checkin_logs?: CheckinLogUncheckedUpdateManyWithoutEventNestedInput
    tracking_visits?: TrackingVisitUncheckedUpdateManyWithoutEventNestedInput
    event_settings?: EventSettingUncheckedUpdateManyWithoutEventNestedInput
    image_links?: ImageLinkUncheckedUpdateManyWithoutEventNestedInput
  }

  export type OrderCreateWithoutWebhook_logsInput = {
    status: string
    payment_method: string
    amount: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
    user?: UserCreateNestedOneWithoutOrdersInput
    order_items?: OrderItemCreateNestedManyWithoutOrderInput
    order_promos?: OrderPromoCreateNestedManyWithoutOrderInput
    payments?: PaymentCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutWebhook_logsInput = {
    id?: number
    user_id?: string | null
    status: string
    payment_method: string
    amount: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
    order_items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    order_promos?: OrderPromoUncheckedCreateNestedManyWithoutOrderInput
    payments?: PaymentUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutWebhook_logsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutWebhook_logsInput, OrderUncheckedCreateWithoutWebhook_logsInput>
  }

  export type EventCreateWithoutWebhook_logsInput = {
    name: string
    description?: string | null
    date: Date | string
    location?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    organization: OrganizationCreateNestedOneWithoutEventsInput
    tickets?: TicketCreateNestedManyWithoutEventInput
    email_logs?: EmailLogCreateNestedManyWithoutEventInput
    checkin_logs?: CheckinLogCreateNestedManyWithoutEventInput
    tracking_visits?: TrackingVisitCreateNestedManyWithoutEventInput
    event_settings?: EventSettingCreateNestedManyWithoutEventInput
    image_links?: ImageLinkCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutWebhook_logsInput = {
    id?: number
    organization_id: number
    name: string
    description?: string | null
    date: Date | string
    location?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    tickets?: TicketUncheckedCreateNestedManyWithoutEventInput
    email_logs?: EmailLogUncheckedCreateNestedManyWithoutEventInput
    checkin_logs?: CheckinLogUncheckedCreateNestedManyWithoutEventInput
    tracking_visits?: TrackingVisitUncheckedCreateNestedManyWithoutEventInput
    event_settings?: EventSettingUncheckedCreateNestedManyWithoutEventInput
    image_links?: ImageLinkUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutWebhook_logsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutWebhook_logsInput, EventUncheckedCreateWithoutWebhook_logsInput>
  }

  export type UserCreateWithoutWebhook_logsInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    is_verified?: boolean
    supabase_id?: string | null
    phone?: string | null
    avatar_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    referral_codes?: ReferralCodeCreateNestedManyWithoutUserInput
    email_logs?: EmailLogCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    checkin_logs?: CheckinLogCreateNestedManyWithoutUserInput
    user_organizations?: UserOrganizationCreateNestedManyWithoutUserInput
    tracking_visits?: TrackingVisitCreateNestedManyWithoutUserInput
    images?: ImageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWebhook_logsInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    is_verified?: boolean
    supabase_id?: string | null
    phone?: string | null
    avatar_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    referral_codes?: ReferralCodeUncheckedCreateNestedManyWithoutUserInput
    email_logs?: EmailLogUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    checkin_logs?: CheckinLogUncheckedCreateNestedManyWithoutUserInput
    user_organizations?: UserOrganizationUncheckedCreateNestedManyWithoutUserInput
    tracking_visits?: TrackingVisitUncheckedCreateNestedManyWithoutUserInput
    images?: ImageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWebhook_logsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWebhook_logsInput, UserUncheckedCreateWithoutWebhook_logsInput>
  }

  export type OrderUpsertWithoutWebhook_logsInput = {
    update: XOR<OrderUpdateWithoutWebhook_logsInput, OrderUncheckedUpdateWithoutWebhook_logsInput>
    create: XOR<OrderCreateWithoutWebhook_logsInput, OrderUncheckedCreateWithoutWebhook_logsInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutWebhook_logsInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutWebhook_logsInput, OrderUncheckedUpdateWithoutWebhook_logsInput>
  }

  export type OrderUpdateWithoutWebhook_logsInput = {
    status?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutOrdersNestedInput
    order_items?: OrderItemUpdateManyWithoutOrderNestedInput
    order_promos?: OrderPromoUpdateManyWithoutOrderNestedInput
    payments?: PaymentUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutWebhook_logsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order_items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    order_promos?: OrderPromoUncheckedUpdateManyWithoutOrderNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type EventUpsertWithoutWebhook_logsInput = {
    update: XOR<EventUpdateWithoutWebhook_logsInput, EventUncheckedUpdateWithoutWebhook_logsInput>
    create: XOR<EventCreateWithoutWebhook_logsInput, EventUncheckedCreateWithoutWebhook_logsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutWebhook_logsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutWebhook_logsInput, EventUncheckedUpdateWithoutWebhook_logsInput>
  }

  export type EventUpdateWithoutWebhook_logsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutEventsNestedInput
    tickets?: TicketUpdateManyWithoutEventNestedInput
    email_logs?: EmailLogUpdateManyWithoutEventNestedInput
    checkin_logs?: CheckinLogUpdateManyWithoutEventNestedInput
    tracking_visits?: TrackingVisitUpdateManyWithoutEventNestedInput
    event_settings?: EventSettingUpdateManyWithoutEventNestedInput
    image_links?: ImageLinkUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutWebhook_logsInput = {
    id?: IntFieldUpdateOperationsInput | number
    organization_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: TicketUncheckedUpdateManyWithoutEventNestedInput
    email_logs?: EmailLogUncheckedUpdateManyWithoutEventNestedInput
    checkin_logs?: CheckinLogUncheckedUpdateManyWithoutEventNestedInput
    tracking_visits?: TrackingVisitUncheckedUpdateManyWithoutEventNestedInput
    event_settings?: EventSettingUncheckedUpdateManyWithoutEventNestedInput
    image_links?: ImageLinkUncheckedUpdateManyWithoutEventNestedInput
  }

  export type UserUpsertWithoutWebhook_logsInput = {
    update: XOR<UserUpdateWithoutWebhook_logsInput, UserUncheckedUpdateWithoutWebhook_logsInput>
    create: XOR<UserCreateWithoutWebhook_logsInput, UserUncheckedCreateWithoutWebhook_logsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWebhook_logsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWebhook_logsInput, UserUncheckedUpdateWithoutWebhook_logsInput>
  }

  export type UserUpdateWithoutWebhook_logsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    supabase_id?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    referral_codes?: ReferralCodeUpdateManyWithoutUserNestedInput
    email_logs?: EmailLogUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    checkin_logs?: CheckinLogUpdateManyWithoutUserNestedInput
    user_organizations?: UserOrganizationUpdateManyWithoutUserNestedInput
    tracking_visits?: TrackingVisitUpdateManyWithoutUserNestedInput
    images?: ImageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWebhook_logsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    supabase_id?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    referral_codes?: ReferralCodeUncheckedUpdateManyWithoutUserNestedInput
    email_logs?: EmailLogUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    checkin_logs?: CheckinLogUncheckedUpdateManyWithoutUserNestedInput
    user_organizations?: UserOrganizationUncheckedUpdateManyWithoutUserNestedInput
    tracking_visits?: TrackingVisitUncheckedUpdateManyWithoutUserNestedInput
    images?: ImageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrganizationCreateWithoutWebhook_subscriptionsInput = {
    name: string
    contact_email?: string | null
    phone?: string | null
    address?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    events?: EventCreateNestedManyWithoutOrganizationInput
    user_organizations?: UserOrganizationCreateNestedManyWithoutOrganizationInput
    image_links?: ImageLinkCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutWebhook_subscriptionsInput = {
    id?: number
    name: string
    contact_email?: string | null
    phone?: string | null
    address?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutOrganizationInput
    user_organizations?: UserOrganizationUncheckedCreateNestedManyWithoutOrganizationInput
    image_links?: ImageLinkUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutWebhook_subscriptionsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutWebhook_subscriptionsInput, OrganizationUncheckedCreateWithoutWebhook_subscriptionsInput>
  }

  export type OrganizationUpsertWithoutWebhook_subscriptionsInput = {
    update: XOR<OrganizationUpdateWithoutWebhook_subscriptionsInput, OrganizationUncheckedUpdateWithoutWebhook_subscriptionsInput>
    create: XOR<OrganizationCreateWithoutWebhook_subscriptionsInput, OrganizationUncheckedCreateWithoutWebhook_subscriptionsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutWebhook_subscriptionsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutWebhook_subscriptionsInput, OrganizationUncheckedUpdateWithoutWebhook_subscriptionsInput>
  }

  export type OrganizationUpdateWithoutWebhook_subscriptionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    contact_email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutOrganizationNestedInput
    user_organizations?: UserOrganizationUpdateManyWithoutOrganizationNestedInput
    image_links?: ImageLinkUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutWebhook_subscriptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contact_email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutOrganizationNestedInput
    user_organizations?: UserOrganizationUncheckedUpdateManyWithoutOrganizationNestedInput
    image_links?: ImageLinkUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserCreateWithoutTracking_visitsInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    is_verified?: boolean
    supabase_id?: string | null
    phone?: string | null
    avatar_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    referral_codes?: ReferralCodeCreateNestedManyWithoutUserInput
    email_logs?: EmailLogCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    checkin_logs?: CheckinLogCreateNestedManyWithoutUserInput
    user_organizations?: UserOrganizationCreateNestedManyWithoutUserInput
    webhook_logs?: WebhookLogCreateNestedManyWithoutUserInput
    images?: ImageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTracking_visitsInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    is_verified?: boolean
    supabase_id?: string | null
    phone?: string | null
    avatar_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    referral_codes?: ReferralCodeUncheckedCreateNestedManyWithoutUserInput
    email_logs?: EmailLogUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    checkin_logs?: CheckinLogUncheckedCreateNestedManyWithoutUserInput
    user_organizations?: UserOrganizationUncheckedCreateNestedManyWithoutUserInput
    webhook_logs?: WebhookLogUncheckedCreateNestedManyWithoutUserInput
    images?: ImageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTracking_visitsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTracking_visitsInput, UserUncheckedCreateWithoutTracking_visitsInput>
  }

  export type EventCreateWithoutTracking_visitsInput = {
    name: string
    description?: string | null
    date: Date | string
    location?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    organization: OrganizationCreateNestedOneWithoutEventsInput
    tickets?: TicketCreateNestedManyWithoutEventInput
    email_logs?: EmailLogCreateNestedManyWithoutEventInput
    webhook_logs?: WebhookLogCreateNestedManyWithoutEventInput
    checkin_logs?: CheckinLogCreateNestedManyWithoutEventInput
    event_settings?: EventSettingCreateNestedManyWithoutEventInput
    image_links?: ImageLinkCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutTracking_visitsInput = {
    id?: number
    organization_id: number
    name: string
    description?: string | null
    date: Date | string
    location?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    tickets?: TicketUncheckedCreateNestedManyWithoutEventInput
    email_logs?: EmailLogUncheckedCreateNestedManyWithoutEventInput
    webhook_logs?: WebhookLogUncheckedCreateNestedManyWithoutEventInput
    checkin_logs?: CheckinLogUncheckedCreateNestedManyWithoutEventInput
    event_settings?: EventSettingUncheckedCreateNestedManyWithoutEventInput
    image_links?: ImageLinkUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutTracking_visitsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutTracking_visitsInput, EventUncheckedCreateWithoutTracking_visitsInput>
  }

  export type UserUpsertWithoutTracking_visitsInput = {
    update: XOR<UserUpdateWithoutTracking_visitsInput, UserUncheckedUpdateWithoutTracking_visitsInput>
    create: XOR<UserCreateWithoutTracking_visitsInput, UserUncheckedCreateWithoutTracking_visitsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTracking_visitsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTracking_visitsInput, UserUncheckedUpdateWithoutTracking_visitsInput>
  }

  export type UserUpdateWithoutTracking_visitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    supabase_id?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    referral_codes?: ReferralCodeUpdateManyWithoutUserNestedInput
    email_logs?: EmailLogUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    checkin_logs?: CheckinLogUpdateManyWithoutUserNestedInput
    user_organizations?: UserOrganizationUpdateManyWithoutUserNestedInput
    webhook_logs?: WebhookLogUpdateManyWithoutUserNestedInput
    images?: ImageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTracking_visitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    supabase_id?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    referral_codes?: ReferralCodeUncheckedUpdateManyWithoutUserNestedInput
    email_logs?: EmailLogUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    checkin_logs?: CheckinLogUncheckedUpdateManyWithoutUserNestedInput
    user_organizations?: UserOrganizationUncheckedUpdateManyWithoutUserNestedInput
    webhook_logs?: WebhookLogUncheckedUpdateManyWithoutUserNestedInput
    images?: ImageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventUpsertWithoutTracking_visitsInput = {
    update: XOR<EventUpdateWithoutTracking_visitsInput, EventUncheckedUpdateWithoutTracking_visitsInput>
    create: XOR<EventCreateWithoutTracking_visitsInput, EventUncheckedCreateWithoutTracking_visitsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutTracking_visitsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutTracking_visitsInput, EventUncheckedUpdateWithoutTracking_visitsInput>
  }

  export type EventUpdateWithoutTracking_visitsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutEventsNestedInput
    tickets?: TicketUpdateManyWithoutEventNestedInput
    email_logs?: EmailLogUpdateManyWithoutEventNestedInput
    webhook_logs?: WebhookLogUpdateManyWithoutEventNestedInput
    checkin_logs?: CheckinLogUpdateManyWithoutEventNestedInput
    event_settings?: EventSettingUpdateManyWithoutEventNestedInput
    image_links?: ImageLinkUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutTracking_visitsInput = {
    id?: IntFieldUpdateOperationsInput | number
    organization_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: TicketUncheckedUpdateManyWithoutEventNestedInput
    email_logs?: EmailLogUncheckedUpdateManyWithoutEventNestedInput
    webhook_logs?: WebhookLogUncheckedUpdateManyWithoutEventNestedInput
    checkin_logs?: CheckinLogUncheckedUpdateManyWithoutEventNestedInput
    event_settings?: EventSettingUncheckedUpdateManyWithoutEventNestedInput
    image_links?: ImageLinkUncheckedUpdateManyWithoutEventNestedInput
  }

  export type OrganizationCreateWithoutEventsInput = {
    name: string
    contact_email?: string | null
    phone?: string | null
    address?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    webhook_subscriptions?: WebhookSubscriptionCreateNestedManyWithoutOrganizationInput
    user_organizations?: UserOrganizationCreateNestedManyWithoutOrganizationInput
    image_links?: ImageLinkCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutEventsInput = {
    id?: number
    name: string
    contact_email?: string | null
    phone?: string | null
    address?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    webhook_subscriptions?: WebhookSubscriptionUncheckedCreateNestedManyWithoutOrganizationInput
    user_organizations?: UserOrganizationUncheckedCreateNestedManyWithoutOrganizationInput
    image_links?: ImageLinkUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutEventsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutEventsInput, OrganizationUncheckedCreateWithoutEventsInput>
  }

  export type TicketCreateWithoutEventInput = {
    name: string
    price: Decimal | DecimalJsLike | number | string
    type: string
    total: number
    sold: number
    start_sale_date?: Date | string | null
    end_sale_date?: Date | string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    order_items?: OrderItemCreateNestedManyWithoutTicketInput
    checkin_logs?: CheckinLogCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateWithoutEventInput = {
    id?: number
    name: string
    price: Decimal | DecimalJsLike | number | string
    type: string
    total: number
    sold: number
    start_sale_date?: Date | string | null
    end_sale_date?: Date | string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    order_items?: OrderItemUncheckedCreateNestedManyWithoutTicketInput
    checkin_logs?: CheckinLogUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketCreateOrConnectWithoutEventInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutEventInput, TicketUncheckedCreateWithoutEventInput>
  }

  export type TicketCreateManyEventInputEnvelope = {
    data: TicketCreateManyEventInput | TicketCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type EmailLogCreateWithoutEventInput = {
    email_type: string
    subject: string
    status: string
    sent_at?: Date | string | null
    error_message?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutEmail_logsInput
  }

  export type EmailLogUncheckedCreateWithoutEventInput = {
    id?: number
    user_id: string
    email_type: string
    subject: string
    status: string
    sent_at?: Date | string | null
    error_message?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type EmailLogCreateOrConnectWithoutEventInput = {
    where: EmailLogWhereUniqueInput
    create: XOR<EmailLogCreateWithoutEventInput, EmailLogUncheckedCreateWithoutEventInput>
  }

  export type EmailLogCreateManyEventInputEnvelope = {
    data: EmailLogCreateManyEventInput | EmailLogCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type WebhookLogCreateWithoutEventInput = {
    target_url: string
    event_type: string
    payload: string
    status_code: number
    response_text?: string | null
    triggered_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    order?: OrderCreateNestedOneWithoutWebhook_logsInput
    user?: UserCreateNestedOneWithoutWebhook_logsInput
  }

  export type WebhookLogUncheckedCreateWithoutEventInput = {
    id?: number
    target_url: string
    event_type: string
    order_id?: number | null
    user_id?: string | null
    payload: string
    status_code: number
    response_text?: string | null
    triggered_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WebhookLogCreateOrConnectWithoutEventInput = {
    where: WebhookLogWhereUniqueInput
    create: XOR<WebhookLogCreateWithoutEventInput, WebhookLogUncheckedCreateWithoutEventInput>
  }

  export type WebhookLogCreateManyEventInputEnvelope = {
    data: WebhookLogCreateManyEventInput | WebhookLogCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type CheckinLogCreateWithoutEventInput = {
    checkin_time: Date | string
    verified_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutCheckin_logsInput
    ticket: TicketCreateNestedOneWithoutCheckin_logsInput
  }

  export type CheckinLogUncheckedCreateWithoutEventInput = {
    id?: number
    user_id: string
    ticket_id: number
    checkin_time: Date | string
    verified_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CheckinLogCreateOrConnectWithoutEventInput = {
    where: CheckinLogWhereUniqueInput
    create: XOR<CheckinLogCreateWithoutEventInput, CheckinLogUncheckedCreateWithoutEventInput>
  }

  export type CheckinLogCreateManyEventInputEnvelope = {
    data: CheckinLogCreateManyEventInput | CheckinLogCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type TrackingVisitCreateWithoutEventInput = {
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_content?: string | null
    referrer_url?: string | null
    landing_page?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user?: UserCreateNestedOneWithoutTracking_visitsInput
  }

  export type TrackingVisitUncheckedCreateWithoutEventInput = {
    id?: number
    user_id?: string | null
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_content?: string | null
    referrer_url?: string | null
    landing_page?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TrackingVisitCreateOrConnectWithoutEventInput = {
    where: TrackingVisitWhereUniqueInput
    create: XOR<TrackingVisitCreateWithoutEventInput, TrackingVisitUncheckedCreateWithoutEventInput>
  }

  export type TrackingVisitCreateManyEventInputEnvelope = {
    data: TrackingVisitCreateManyEventInput | TrackingVisitCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type EventSettingCreateWithoutEventInput = {
    setting_key: string
    setting_value: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type EventSettingUncheckedCreateWithoutEventInput = {
    id?: number
    setting_key: string
    setting_value: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type EventSettingCreateOrConnectWithoutEventInput = {
    where: EventSettingWhereUniqueInput
    create: XOR<EventSettingCreateWithoutEventInput, EventSettingUncheckedCreateWithoutEventInput>
  }

  export type EventSettingCreateManyEventInputEnvelope = {
    data: EventSettingCreateManyEventInput | EventSettingCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type ImageLinkCreateWithoutEventInput = {
    entity_type: string
    entity_id: number
    usage_type: string
    linked_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    image: ImageCreateNestedOneWithoutImage_linksInput
    organization?: OrganizationCreateNestedOneWithoutImage_linksInput
  }

  export type ImageLinkUncheckedCreateWithoutEventInput = {
    id?: number
    image_id: number
    entity_type: string
    entity_id: number
    organization_id?: number | null
    usage_type: string
    linked_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ImageLinkCreateOrConnectWithoutEventInput = {
    where: ImageLinkWhereUniqueInput
    create: XOR<ImageLinkCreateWithoutEventInput, ImageLinkUncheckedCreateWithoutEventInput>
  }

  export type ImageLinkCreateManyEventInputEnvelope = {
    data: ImageLinkCreateManyEventInput | ImageLinkCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutEventsInput = {
    update: XOR<OrganizationUpdateWithoutEventsInput, OrganizationUncheckedUpdateWithoutEventsInput>
    create: XOR<OrganizationCreateWithoutEventsInput, OrganizationUncheckedCreateWithoutEventsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutEventsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutEventsInput, OrganizationUncheckedUpdateWithoutEventsInput>
  }

  export type OrganizationUpdateWithoutEventsInput = {
    name?: StringFieldUpdateOperationsInput | string
    contact_email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    webhook_subscriptions?: WebhookSubscriptionUpdateManyWithoutOrganizationNestedInput
    user_organizations?: UserOrganizationUpdateManyWithoutOrganizationNestedInput
    image_links?: ImageLinkUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contact_email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    webhook_subscriptions?: WebhookSubscriptionUncheckedUpdateManyWithoutOrganizationNestedInput
    user_organizations?: UserOrganizationUncheckedUpdateManyWithoutOrganizationNestedInput
    image_links?: ImageLinkUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type TicketUpsertWithWhereUniqueWithoutEventInput = {
    where: TicketWhereUniqueInput
    update: XOR<TicketUpdateWithoutEventInput, TicketUncheckedUpdateWithoutEventInput>
    create: XOR<TicketCreateWithoutEventInput, TicketUncheckedCreateWithoutEventInput>
  }

  export type TicketUpdateWithWhereUniqueWithoutEventInput = {
    where: TicketWhereUniqueInput
    data: XOR<TicketUpdateWithoutEventInput, TicketUncheckedUpdateWithoutEventInput>
  }

  export type TicketUpdateManyWithWhereWithoutEventInput = {
    where: TicketScalarWhereInput
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyWithoutEventInput>
  }

  export type TicketScalarWhereInput = {
    AND?: TicketScalarWhereInput | TicketScalarWhereInput[]
    OR?: TicketScalarWhereInput[]
    NOT?: TicketScalarWhereInput | TicketScalarWhereInput[]
    id?: IntFilter<"Ticket"> | number
    event_id?: IntFilter<"Ticket"> | number
    name?: StringFilter<"Ticket"> | string
    price?: DecimalFilter<"Ticket"> | Decimal | DecimalJsLike | number | string
    type?: StringFilter<"Ticket"> | string
    total?: IntFilter<"Ticket"> | number
    sold?: IntFilter<"Ticket"> | number
    start_sale_date?: DateTimeNullableFilter<"Ticket"> | Date | string | null
    end_sale_date?: DateTimeNullableFilter<"Ticket"> | Date | string | null
    is_active?: BoolFilter<"Ticket"> | boolean
    created_at?: DateTimeFilter<"Ticket"> | Date | string
    updated_at?: DateTimeFilter<"Ticket"> | Date | string
  }

  export type EmailLogUpsertWithWhereUniqueWithoutEventInput = {
    where: EmailLogWhereUniqueInput
    update: XOR<EmailLogUpdateWithoutEventInput, EmailLogUncheckedUpdateWithoutEventInput>
    create: XOR<EmailLogCreateWithoutEventInput, EmailLogUncheckedCreateWithoutEventInput>
  }

  export type EmailLogUpdateWithWhereUniqueWithoutEventInput = {
    where: EmailLogWhereUniqueInput
    data: XOR<EmailLogUpdateWithoutEventInput, EmailLogUncheckedUpdateWithoutEventInput>
  }

  export type EmailLogUpdateManyWithWhereWithoutEventInput = {
    where: EmailLogScalarWhereInput
    data: XOR<EmailLogUpdateManyMutationInput, EmailLogUncheckedUpdateManyWithoutEventInput>
  }

  export type WebhookLogUpsertWithWhereUniqueWithoutEventInput = {
    where: WebhookLogWhereUniqueInput
    update: XOR<WebhookLogUpdateWithoutEventInput, WebhookLogUncheckedUpdateWithoutEventInput>
    create: XOR<WebhookLogCreateWithoutEventInput, WebhookLogUncheckedCreateWithoutEventInput>
  }

  export type WebhookLogUpdateWithWhereUniqueWithoutEventInput = {
    where: WebhookLogWhereUniqueInput
    data: XOR<WebhookLogUpdateWithoutEventInput, WebhookLogUncheckedUpdateWithoutEventInput>
  }

  export type WebhookLogUpdateManyWithWhereWithoutEventInput = {
    where: WebhookLogScalarWhereInput
    data: XOR<WebhookLogUpdateManyMutationInput, WebhookLogUncheckedUpdateManyWithoutEventInput>
  }

  export type CheckinLogUpsertWithWhereUniqueWithoutEventInput = {
    where: CheckinLogWhereUniqueInput
    update: XOR<CheckinLogUpdateWithoutEventInput, CheckinLogUncheckedUpdateWithoutEventInput>
    create: XOR<CheckinLogCreateWithoutEventInput, CheckinLogUncheckedCreateWithoutEventInput>
  }

  export type CheckinLogUpdateWithWhereUniqueWithoutEventInput = {
    where: CheckinLogWhereUniqueInput
    data: XOR<CheckinLogUpdateWithoutEventInput, CheckinLogUncheckedUpdateWithoutEventInput>
  }

  export type CheckinLogUpdateManyWithWhereWithoutEventInput = {
    where: CheckinLogScalarWhereInput
    data: XOR<CheckinLogUpdateManyMutationInput, CheckinLogUncheckedUpdateManyWithoutEventInput>
  }

  export type TrackingVisitUpsertWithWhereUniqueWithoutEventInput = {
    where: TrackingVisitWhereUniqueInput
    update: XOR<TrackingVisitUpdateWithoutEventInput, TrackingVisitUncheckedUpdateWithoutEventInput>
    create: XOR<TrackingVisitCreateWithoutEventInput, TrackingVisitUncheckedCreateWithoutEventInput>
  }

  export type TrackingVisitUpdateWithWhereUniqueWithoutEventInput = {
    where: TrackingVisitWhereUniqueInput
    data: XOR<TrackingVisitUpdateWithoutEventInput, TrackingVisitUncheckedUpdateWithoutEventInput>
  }

  export type TrackingVisitUpdateManyWithWhereWithoutEventInput = {
    where: TrackingVisitScalarWhereInput
    data: XOR<TrackingVisitUpdateManyMutationInput, TrackingVisitUncheckedUpdateManyWithoutEventInput>
  }

  export type EventSettingUpsertWithWhereUniqueWithoutEventInput = {
    where: EventSettingWhereUniqueInput
    update: XOR<EventSettingUpdateWithoutEventInput, EventSettingUncheckedUpdateWithoutEventInput>
    create: XOR<EventSettingCreateWithoutEventInput, EventSettingUncheckedCreateWithoutEventInput>
  }

  export type EventSettingUpdateWithWhereUniqueWithoutEventInput = {
    where: EventSettingWhereUniqueInput
    data: XOR<EventSettingUpdateWithoutEventInput, EventSettingUncheckedUpdateWithoutEventInput>
  }

  export type EventSettingUpdateManyWithWhereWithoutEventInput = {
    where: EventSettingScalarWhereInput
    data: XOR<EventSettingUpdateManyMutationInput, EventSettingUncheckedUpdateManyWithoutEventInput>
  }

  export type EventSettingScalarWhereInput = {
    AND?: EventSettingScalarWhereInput | EventSettingScalarWhereInput[]
    OR?: EventSettingScalarWhereInput[]
    NOT?: EventSettingScalarWhereInput | EventSettingScalarWhereInput[]
    id?: IntFilter<"EventSetting"> | number
    event_id?: IntFilter<"EventSetting"> | number
    setting_key?: StringFilter<"EventSetting"> | string
    setting_value?: StringFilter<"EventSetting"> | string
    created_at?: DateTimeFilter<"EventSetting"> | Date | string
    updated_at?: DateTimeFilter<"EventSetting"> | Date | string
  }

  export type ImageLinkUpsertWithWhereUniqueWithoutEventInput = {
    where: ImageLinkWhereUniqueInput
    update: XOR<ImageLinkUpdateWithoutEventInput, ImageLinkUncheckedUpdateWithoutEventInput>
    create: XOR<ImageLinkCreateWithoutEventInput, ImageLinkUncheckedCreateWithoutEventInput>
  }

  export type ImageLinkUpdateWithWhereUniqueWithoutEventInput = {
    where: ImageLinkWhereUniqueInput
    data: XOR<ImageLinkUpdateWithoutEventInput, ImageLinkUncheckedUpdateWithoutEventInput>
  }

  export type ImageLinkUpdateManyWithWhereWithoutEventInput = {
    where: ImageLinkScalarWhereInput
    data: XOR<ImageLinkUpdateManyMutationInput, ImageLinkUncheckedUpdateManyWithoutEventInput>
  }

  export type EventCreateWithoutTicketsInput = {
    name: string
    description?: string | null
    date: Date | string
    location?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    organization: OrganizationCreateNestedOneWithoutEventsInput
    email_logs?: EmailLogCreateNestedManyWithoutEventInput
    webhook_logs?: WebhookLogCreateNestedManyWithoutEventInput
    checkin_logs?: CheckinLogCreateNestedManyWithoutEventInput
    tracking_visits?: TrackingVisitCreateNestedManyWithoutEventInput
    event_settings?: EventSettingCreateNestedManyWithoutEventInput
    image_links?: ImageLinkCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutTicketsInput = {
    id?: number
    organization_id: number
    name: string
    description?: string | null
    date: Date | string
    location?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    email_logs?: EmailLogUncheckedCreateNestedManyWithoutEventInput
    webhook_logs?: WebhookLogUncheckedCreateNestedManyWithoutEventInput
    checkin_logs?: CheckinLogUncheckedCreateNestedManyWithoutEventInput
    tracking_visits?: TrackingVisitUncheckedCreateNestedManyWithoutEventInput
    event_settings?: EventSettingUncheckedCreateNestedManyWithoutEventInput
    image_links?: ImageLinkUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutTicketsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutTicketsInput, EventUncheckedCreateWithoutTicketsInput>
  }

  export type OrderItemCreateWithoutTicketInput = {
    quantity: number
    price_snapshot: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
    order: OrderCreateNestedOneWithoutOrder_itemsInput
  }

  export type OrderItemUncheckedCreateWithoutTicketInput = {
    id?: number
    order_id: number
    quantity: number
    price_snapshot: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type OrderItemCreateOrConnectWithoutTicketInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutTicketInput, OrderItemUncheckedCreateWithoutTicketInput>
  }

  export type OrderItemCreateManyTicketInputEnvelope = {
    data: OrderItemCreateManyTicketInput | OrderItemCreateManyTicketInput[]
    skipDuplicates?: boolean
  }

  export type CheckinLogCreateWithoutTicketInput = {
    checkin_time: Date | string
    verified_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutCheckin_logsInput
    event: EventCreateNestedOneWithoutCheckin_logsInput
  }

  export type CheckinLogUncheckedCreateWithoutTicketInput = {
    id?: number
    user_id: string
    event_id: number
    checkin_time: Date | string
    verified_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CheckinLogCreateOrConnectWithoutTicketInput = {
    where: CheckinLogWhereUniqueInput
    create: XOR<CheckinLogCreateWithoutTicketInput, CheckinLogUncheckedCreateWithoutTicketInput>
  }

  export type CheckinLogCreateManyTicketInputEnvelope = {
    data: CheckinLogCreateManyTicketInput | CheckinLogCreateManyTicketInput[]
    skipDuplicates?: boolean
  }

  export type EventUpsertWithoutTicketsInput = {
    update: XOR<EventUpdateWithoutTicketsInput, EventUncheckedUpdateWithoutTicketsInput>
    create: XOR<EventCreateWithoutTicketsInput, EventUncheckedCreateWithoutTicketsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutTicketsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutTicketsInput, EventUncheckedUpdateWithoutTicketsInput>
  }

  export type EventUpdateWithoutTicketsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutEventsNestedInput
    email_logs?: EmailLogUpdateManyWithoutEventNestedInput
    webhook_logs?: WebhookLogUpdateManyWithoutEventNestedInput
    checkin_logs?: CheckinLogUpdateManyWithoutEventNestedInput
    tracking_visits?: TrackingVisitUpdateManyWithoutEventNestedInput
    event_settings?: EventSettingUpdateManyWithoutEventNestedInput
    image_links?: ImageLinkUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutTicketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    organization_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_logs?: EmailLogUncheckedUpdateManyWithoutEventNestedInput
    webhook_logs?: WebhookLogUncheckedUpdateManyWithoutEventNestedInput
    checkin_logs?: CheckinLogUncheckedUpdateManyWithoutEventNestedInput
    tracking_visits?: TrackingVisitUncheckedUpdateManyWithoutEventNestedInput
    event_settings?: EventSettingUncheckedUpdateManyWithoutEventNestedInput
    image_links?: ImageLinkUncheckedUpdateManyWithoutEventNestedInput
  }

  export type OrderItemUpsertWithWhereUniqueWithoutTicketInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutTicketInput, OrderItemUncheckedUpdateWithoutTicketInput>
    create: XOR<OrderItemCreateWithoutTicketInput, OrderItemUncheckedCreateWithoutTicketInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutTicketInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutTicketInput, OrderItemUncheckedUpdateWithoutTicketInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutTicketInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutTicketInput>
  }

  export type OrderItemScalarWhereInput = {
    AND?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    OR?: OrderItemScalarWhereInput[]
    NOT?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    id?: IntFilter<"OrderItem"> | number
    order_id?: IntFilter<"OrderItem"> | number
    ticket_id?: IntFilter<"OrderItem"> | number
    quantity?: IntFilter<"OrderItem"> | number
    price_snapshot?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"OrderItem"> | Date | string
    updated_at?: DateTimeFilter<"OrderItem"> | Date | string
  }

  export type CheckinLogUpsertWithWhereUniqueWithoutTicketInput = {
    where: CheckinLogWhereUniqueInput
    update: XOR<CheckinLogUpdateWithoutTicketInput, CheckinLogUncheckedUpdateWithoutTicketInput>
    create: XOR<CheckinLogCreateWithoutTicketInput, CheckinLogUncheckedCreateWithoutTicketInput>
  }

  export type CheckinLogUpdateWithWhereUniqueWithoutTicketInput = {
    where: CheckinLogWhereUniqueInput
    data: XOR<CheckinLogUpdateWithoutTicketInput, CheckinLogUncheckedUpdateWithoutTicketInput>
  }

  export type CheckinLogUpdateManyWithWhereWithoutTicketInput = {
    where: CheckinLogScalarWhereInput
    data: XOR<CheckinLogUpdateManyMutationInput, CheckinLogUncheckedUpdateManyWithoutTicketInput>
  }

  export type UserCreateWithoutOrdersInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    is_verified?: boolean
    supabase_id?: string | null
    phone?: string | null
    avatar_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    referral_codes?: ReferralCodeCreateNestedManyWithoutUserInput
    email_logs?: EmailLogCreateNestedManyWithoutUserInput
    checkin_logs?: CheckinLogCreateNestedManyWithoutUserInput
    user_organizations?: UserOrganizationCreateNestedManyWithoutUserInput
    tracking_visits?: TrackingVisitCreateNestedManyWithoutUserInput
    webhook_logs?: WebhookLogCreateNestedManyWithoutUserInput
    images?: ImageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrdersInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    is_verified?: boolean
    supabase_id?: string | null
    phone?: string | null
    avatar_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    referral_codes?: ReferralCodeUncheckedCreateNestedManyWithoutUserInput
    email_logs?: EmailLogUncheckedCreateNestedManyWithoutUserInput
    checkin_logs?: CheckinLogUncheckedCreateNestedManyWithoutUserInput
    user_organizations?: UserOrganizationUncheckedCreateNestedManyWithoutUserInput
    tracking_visits?: TrackingVisitUncheckedCreateNestedManyWithoutUserInput
    webhook_logs?: WebhookLogUncheckedCreateNestedManyWithoutUserInput
    images?: ImageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
  }

  export type OrderItemCreateWithoutOrderInput = {
    quantity: number
    price_snapshot: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
    ticket: TicketCreateNestedOneWithoutOrder_itemsInput
  }

  export type OrderItemUncheckedCreateWithoutOrderInput = {
    id?: number
    ticket_id: number
    quantity: number
    price_snapshot: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type OrderItemCreateOrConnectWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemCreateManyOrderInputEnvelope = {
    data: OrderItemCreateManyOrderInput | OrderItemCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type OrderPromoCreateWithoutOrderInput = {
    discount_applied: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
    promo_code: PromoCodeCreateNestedOneWithoutOrder_promosInput
  }

  export type OrderPromoUncheckedCreateWithoutOrderInput = {
    id?: number
    promo_code_id: number
    discount_applied: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type OrderPromoCreateOrConnectWithoutOrderInput = {
    where: OrderPromoWhereUniqueInput
    create: XOR<OrderPromoCreateWithoutOrderInput, OrderPromoUncheckedCreateWithoutOrderInput>
  }

  export type OrderPromoCreateManyOrderInputEnvelope = {
    data: OrderPromoCreateManyOrderInput | OrderPromoCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutOrderInput = {
    gateway: string
    status: string
    txn_code?: string | null
    paid_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PaymentUncheckedCreateWithoutOrderInput = {
    id?: number
    gateway: string
    status: string
    txn_code?: string | null
    paid_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PaymentCreateOrConnectWithoutOrderInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput>
  }

  export type PaymentCreateManyOrderInputEnvelope = {
    data: PaymentCreateManyOrderInput | PaymentCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type WebhookLogCreateWithoutOrderInput = {
    target_url: string
    event_type: string
    payload: string
    status_code: number
    response_text?: string | null
    triggered_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    event?: EventCreateNestedOneWithoutWebhook_logsInput
    user?: UserCreateNestedOneWithoutWebhook_logsInput
  }

  export type WebhookLogUncheckedCreateWithoutOrderInput = {
    id?: number
    target_url: string
    event_type: string
    event_id?: number | null
    user_id?: string | null
    payload: string
    status_code: number
    response_text?: string | null
    triggered_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WebhookLogCreateOrConnectWithoutOrderInput = {
    where: WebhookLogWhereUniqueInput
    create: XOR<WebhookLogCreateWithoutOrderInput, WebhookLogUncheckedCreateWithoutOrderInput>
  }

  export type WebhookLogCreateManyOrderInputEnvelope = {
    data: WebhookLogCreateManyOrderInput | WebhookLogCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutOrdersInput = {
    update: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type UserUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    supabase_id?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    referral_codes?: ReferralCodeUpdateManyWithoutUserNestedInput
    email_logs?: EmailLogUpdateManyWithoutUserNestedInput
    checkin_logs?: CheckinLogUpdateManyWithoutUserNestedInput
    user_organizations?: UserOrganizationUpdateManyWithoutUserNestedInput
    tracking_visits?: TrackingVisitUpdateManyWithoutUserNestedInput
    webhook_logs?: WebhookLogUpdateManyWithoutUserNestedInput
    images?: ImageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    supabase_id?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    referral_codes?: ReferralCodeUncheckedUpdateManyWithoutUserNestedInput
    email_logs?: EmailLogUncheckedUpdateManyWithoutUserNestedInput
    checkin_logs?: CheckinLogUncheckedUpdateManyWithoutUserNestedInput
    user_organizations?: UserOrganizationUncheckedUpdateManyWithoutUserNestedInput
    tracking_visits?: TrackingVisitUncheckedUpdateManyWithoutUserNestedInput
    webhook_logs?: WebhookLogUncheckedUpdateManyWithoutUserNestedInput
    images?: ImageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrderItemUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutOrderInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutOrderInput>
  }

  export type OrderPromoUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderPromoWhereUniqueInput
    update: XOR<OrderPromoUpdateWithoutOrderInput, OrderPromoUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderPromoCreateWithoutOrderInput, OrderPromoUncheckedCreateWithoutOrderInput>
  }

  export type OrderPromoUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderPromoWhereUniqueInput
    data: XOR<OrderPromoUpdateWithoutOrderInput, OrderPromoUncheckedUpdateWithoutOrderInput>
  }

  export type OrderPromoUpdateManyWithWhereWithoutOrderInput = {
    where: OrderPromoScalarWhereInput
    data: XOR<OrderPromoUpdateManyMutationInput, OrderPromoUncheckedUpdateManyWithoutOrderInput>
  }

  export type PaymentUpsertWithWhereUniqueWithoutOrderInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutOrderInput, PaymentUncheckedUpdateWithoutOrderInput>
    create: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutOrderInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutOrderInput, PaymentUncheckedUpdateWithoutOrderInput>
  }

  export type PaymentUpdateManyWithWhereWithoutOrderInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutOrderInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    OR?: PaymentScalarWhereInput[]
    NOT?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    id?: IntFilter<"Payment"> | number
    order_id?: IntFilter<"Payment"> | number
    gateway?: StringFilter<"Payment"> | string
    status?: StringFilter<"Payment"> | string
    txn_code?: StringNullableFilter<"Payment"> | string | null
    paid_at?: DateTimeNullableFilter<"Payment"> | Date | string | null
    created_at?: DateTimeFilter<"Payment"> | Date | string
    updated_at?: DateTimeFilter<"Payment"> | Date | string
  }

  export type WebhookLogUpsertWithWhereUniqueWithoutOrderInput = {
    where: WebhookLogWhereUniqueInput
    update: XOR<WebhookLogUpdateWithoutOrderInput, WebhookLogUncheckedUpdateWithoutOrderInput>
    create: XOR<WebhookLogCreateWithoutOrderInput, WebhookLogUncheckedCreateWithoutOrderInput>
  }

  export type WebhookLogUpdateWithWhereUniqueWithoutOrderInput = {
    where: WebhookLogWhereUniqueInput
    data: XOR<WebhookLogUpdateWithoutOrderInput, WebhookLogUncheckedUpdateWithoutOrderInput>
  }

  export type WebhookLogUpdateManyWithWhereWithoutOrderInput = {
    where: WebhookLogScalarWhereInput
    data: XOR<WebhookLogUpdateManyMutationInput, WebhookLogUncheckedUpdateManyWithoutOrderInput>
  }

  export type OrderCreateWithoutOrder_itemsInput = {
    status: string
    payment_method: string
    amount: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
    user?: UserCreateNestedOneWithoutOrdersInput
    order_promos?: OrderPromoCreateNestedManyWithoutOrderInput
    payments?: PaymentCreateNestedManyWithoutOrderInput
    webhook_logs?: WebhookLogCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutOrder_itemsInput = {
    id?: number
    user_id?: string | null
    status: string
    payment_method: string
    amount: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
    order_promos?: OrderPromoUncheckedCreateNestedManyWithoutOrderInput
    payments?: PaymentUncheckedCreateNestedManyWithoutOrderInput
    webhook_logs?: WebhookLogUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutOrder_itemsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutOrder_itemsInput, OrderUncheckedCreateWithoutOrder_itemsInput>
  }

  export type TicketCreateWithoutOrder_itemsInput = {
    name: string
    price: Decimal | DecimalJsLike | number | string
    type: string
    total: number
    sold: number
    start_sale_date?: Date | string | null
    end_sale_date?: Date | string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    event: EventCreateNestedOneWithoutTicketsInput
    checkin_logs?: CheckinLogCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateWithoutOrder_itemsInput = {
    id?: number
    event_id: number
    name: string
    price: Decimal | DecimalJsLike | number | string
    type: string
    total: number
    sold: number
    start_sale_date?: Date | string | null
    end_sale_date?: Date | string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    checkin_logs?: CheckinLogUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketCreateOrConnectWithoutOrder_itemsInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutOrder_itemsInput, TicketUncheckedCreateWithoutOrder_itemsInput>
  }

  export type OrderUpsertWithoutOrder_itemsInput = {
    update: XOR<OrderUpdateWithoutOrder_itemsInput, OrderUncheckedUpdateWithoutOrder_itemsInput>
    create: XOR<OrderCreateWithoutOrder_itemsInput, OrderUncheckedCreateWithoutOrder_itemsInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutOrder_itemsInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutOrder_itemsInput, OrderUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type OrderUpdateWithoutOrder_itemsInput = {
    status?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutOrdersNestedInput
    order_promos?: OrderPromoUpdateManyWithoutOrderNestedInput
    payments?: PaymentUpdateManyWithoutOrderNestedInput
    webhook_logs?: WebhookLogUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutOrder_itemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order_promos?: OrderPromoUncheckedUpdateManyWithoutOrderNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutOrderNestedInput
    webhook_logs?: WebhookLogUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type TicketUpsertWithoutOrder_itemsInput = {
    update: XOR<TicketUpdateWithoutOrder_itemsInput, TicketUncheckedUpdateWithoutOrder_itemsInput>
    create: XOR<TicketCreateWithoutOrder_itemsInput, TicketUncheckedCreateWithoutOrder_itemsInput>
    where?: TicketWhereInput
  }

  export type TicketUpdateToOneWithWhereWithoutOrder_itemsInput = {
    where?: TicketWhereInput
    data: XOR<TicketUpdateWithoutOrder_itemsInput, TicketUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type TicketUpdateWithoutOrder_itemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    type?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    sold?: IntFieldUpdateOperationsInput | number
    start_sale_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_sale_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutTicketsNestedInput
    checkin_logs?: CheckinLogUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateWithoutOrder_itemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    type?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    sold?: IntFieldUpdateOperationsInput | number
    start_sale_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_sale_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    checkin_logs?: CheckinLogUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type OrderCreateWithoutPaymentsInput = {
    status: string
    payment_method: string
    amount: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
    user?: UserCreateNestedOneWithoutOrdersInput
    order_items?: OrderItemCreateNestedManyWithoutOrderInput
    order_promos?: OrderPromoCreateNestedManyWithoutOrderInput
    webhook_logs?: WebhookLogCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutPaymentsInput = {
    id?: number
    user_id?: string | null
    status: string
    payment_method: string
    amount: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
    order_items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    order_promos?: OrderPromoUncheckedCreateNestedManyWithoutOrderInput
    webhook_logs?: WebhookLogUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutPaymentsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutPaymentsInput, OrderUncheckedCreateWithoutPaymentsInput>
  }

  export type OrderUpsertWithoutPaymentsInput = {
    update: XOR<OrderUpdateWithoutPaymentsInput, OrderUncheckedUpdateWithoutPaymentsInput>
    create: XOR<OrderCreateWithoutPaymentsInput, OrderUncheckedCreateWithoutPaymentsInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutPaymentsInput, OrderUncheckedUpdateWithoutPaymentsInput>
  }

  export type OrderUpdateWithoutPaymentsInput = {
    status?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutOrdersNestedInput
    order_items?: OrderItemUpdateManyWithoutOrderNestedInput
    order_promos?: OrderPromoUpdateManyWithoutOrderNestedInput
    webhook_logs?: WebhookLogUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutPaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order_items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    order_promos?: OrderPromoUncheckedUpdateManyWithoutOrderNestedInput
    webhook_logs?: WebhookLogUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type UserCreateWithoutCheckin_logsInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    is_verified?: boolean
    supabase_id?: string | null
    phone?: string | null
    avatar_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    referral_codes?: ReferralCodeCreateNestedManyWithoutUserInput
    email_logs?: EmailLogCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    user_organizations?: UserOrganizationCreateNestedManyWithoutUserInput
    tracking_visits?: TrackingVisitCreateNestedManyWithoutUserInput
    webhook_logs?: WebhookLogCreateNestedManyWithoutUserInput
    images?: ImageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCheckin_logsInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    is_verified?: boolean
    supabase_id?: string | null
    phone?: string | null
    avatar_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    referral_codes?: ReferralCodeUncheckedCreateNestedManyWithoutUserInput
    email_logs?: EmailLogUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    user_organizations?: UserOrganizationUncheckedCreateNestedManyWithoutUserInput
    tracking_visits?: TrackingVisitUncheckedCreateNestedManyWithoutUserInput
    webhook_logs?: WebhookLogUncheckedCreateNestedManyWithoutUserInput
    images?: ImageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCheckin_logsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCheckin_logsInput, UserUncheckedCreateWithoutCheckin_logsInput>
  }

  export type TicketCreateWithoutCheckin_logsInput = {
    name: string
    price: Decimal | DecimalJsLike | number | string
    type: string
    total: number
    sold: number
    start_sale_date?: Date | string | null
    end_sale_date?: Date | string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    event: EventCreateNestedOneWithoutTicketsInput
    order_items?: OrderItemCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateWithoutCheckin_logsInput = {
    id?: number
    event_id: number
    name: string
    price: Decimal | DecimalJsLike | number | string
    type: string
    total: number
    sold: number
    start_sale_date?: Date | string | null
    end_sale_date?: Date | string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    order_items?: OrderItemUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketCreateOrConnectWithoutCheckin_logsInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutCheckin_logsInput, TicketUncheckedCreateWithoutCheckin_logsInput>
  }

  export type EventCreateWithoutCheckin_logsInput = {
    name: string
    description?: string | null
    date: Date | string
    location?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    organization: OrganizationCreateNestedOneWithoutEventsInput
    tickets?: TicketCreateNestedManyWithoutEventInput
    email_logs?: EmailLogCreateNestedManyWithoutEventInput
    webhook_logs?: WebhookLogCreateNestedManyWithoutEventInput
    tracking_visits?: TrackingVisitCreateNestedManyWithoutEventInput
    event_settings?: EventSettingCreateNestedManyWithoutEventInput
    image_links?: ImageLinkCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutCheckin_logsInput = {
    id?: number
    organization_id: number
    name: string
    description?: string | null
    date: Date | string
    location?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    tickets?: TicketUncheckedCreateNestedManyWithoutEventInput
    email_logs?: EmailLogUncheckedCreateNestedManyWithoutEventInput
    webhook_logs?: WebhookLogUncheckedCreateNestedManyWithoutEventInput
    tracking_visits?: TrackingVisitUncheckedCreateNestedManyWithoutEventInput
    event_settings?: EventSettingUncheckedCreateNestedManyWithoutEventInput
    image_links?: ImageLinkUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutCheckin_logsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutCheckin_logsInput, EventUncheckedCreateWithoutCheckin_logsInput>
  }

  export type UserUpsertWithoutCheckin_logsInput = {
    update: XOR<UserUpdateWithoutCheckin_logsInput, UserUncheckedUpdateWithoutCheckin_logsInput>
    create: XOR<UserCreateWithoutCheckin_logsInput, UserUncheckedCreateWithoutCheckin_logsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCheckin_logsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCheckin_logsInput, UserUncheckedUpdateWithoutCheckin_logsInput>
  }

  export type UserUpdateWithoutCheckin_logsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    supabase_id?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    referral_codes?: ReferralCodeUpdateManyWithoutUserNestedInput
    email_logs?: EmailLogUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    user_organizations?: UserOrganizationUpdateManyWithoutUserNestedInput
    tracking_visits?: TrackingVisitUpdateManyWithoutUserNestedInput
    webhook_logs?: WebhookLogUpdateManyWithoutUserNestedInput
    images?: ImageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCheckin_logsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    supabase_id?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    referral_codes?: ReferralCodeUncheckedUpdateManyWithoutUserNestedInput
    email_logs?: EmailLogUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    user_organizations?: UserOrganizationUncheckedUpdateManyWithoutUserNestedInput
    tracking_visits?: TrackingVisitUncheckedUpdateManyWithoutUserNestedInput
    webhook_logs?: WebhookLogUncheckedUpdateManyWithoutUserNestedInput
    images?: ImageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TicketUpsertWithoutCheckin_logsInput = {
    update: XOR<TicketUpdateWithoutCheckin_logsInput, TicketUncheckedUpdateWithoutCheckin_logsInput>
    create: XOR<TicketCreateWithoutCheckin_logsInput, TicketUncheckedCreateWithoutCheckin_logsInput>
    where?: TicketWhereInput
  }

  export type TicketUpdateToOneWithWhereWithoutCheckin_logsInput = {
    where?: TicketWhereInput
    data: XOR<TicketUpdateWithoutCheckin_logsInput, TicketUncheckedUpdateWithoutCheckin_logsInput>
  }

  export type TicketUpdateWithoutCheckin_logsInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    type?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    sold?: IntFieldUpdateOperationsInput | number
    start_sale_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_sale_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutTicketsNestedInput
    order_items?: OrderItemUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateWithoutCheckin_logsInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    type?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    sold?: IntFieldUpdateOperationsInput | number
    start_sale_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_sale_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order_items?: OrderItemUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type EventUpsertWithoutCheckin_logsInput = {
    update: XOR<EventUpdateWithoutCheckin_logsInput, EventUncheckedUpdateWithoutCheckin_logsInput>
    create: XOR<EventCreateWithoutCheckin_logsInput, EventUncheckedCreateWithoutCheckin_logsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutCheckin_logsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutCheckin_logsInput, EventUncheckedUpdateWithoutCheckin_logsInput>
  }

  export type EventUpdateWithoutCheckin_logsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutEventsNestedInput
    tickets?: TicketUpdateManyWithoutEventNestedInput
    email_logs?: EmailLogUpdateManyWithoutEventNestedInput
    webhook_logs?: WebhookLogUpdateManyWithoutEventNestedInput
    tracking_visits?: TrackingVisitUpdateManyWithoutEventNestedInput
    event_settings?: EventSettingUpdateManyWithoutEventNestedInput
    image_links?: ImageLinkUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutCheckin_logsInput = {
    id?: IntFieldUpdateOperationsInput | number
    organization_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: TicketUncheckedUpdateManyWithoutEventNestedInput
    email_logs?: EmailLogUncheckedUpdateManyWithoutEventNestedInput
    webhook_logs?: WebhookLogUncheckedUpdateManyWithoutEventNestedInput
    tracking_visits?: TrackingVisitUncheckedUpdateManyWithoutEventNestedInput
    event_settings?: EventSettingUncheckedUpdateManyWithoutEventNestedInput
    image_links?: ImageLinkUncheckedUpdateManyWithoutEventNestedInput
  }

  export type UserCreateWithoutUser_organizationsInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    is_verified?: boolean
    supabase_id?: string | null
    phone?: string | null
    avatar_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    referral_codes?: ReferralCodeCreateNestedManyWithoutUserInput
    email_logs?: EmailLogCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    checkin_logs?: CheckinLogCreateNestedManyWithoutUserInput
    tracking_visits?: TrackingVisitCreateNestedManyWithoutUserInput
    webhook_logs?: WebhookLogCreateNestedManyWithoutUserInput
    images?: ImageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUser_organizationsInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    is_verified?: boolean
    supabase_id?: string | null
    phone?: string | null
    avatar_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    referral_codes?: ReferralCodeUncheckedCreateNestedManyWithoutUserInput
    email_logs?: EmailLogUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    checkin_logs?: CheckinLogUncheckedCreateNestedManyWithoutUserInput
    tracking_visits?: TrackingVisitUncheckedCreateNestedManyWithoutUserInput
    webhook_logs?: WebhookLogUncheckedCreateNestedManyWithoutUserInput
    images?: ImageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUser_organizationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUser_organizationsInput, UserUncheckedCreateWithoutUser_organizationsInput>
  }

  export type OrganizationCreateWithoutUser_organizationsInput = {
    name: string
    contact_email?: string | null
    phone?: string | null
    address?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    events?: EventCreateNestedManyWithoutOrganizationInput
    webhook_subscriptions?: WebhookSubscriptionCreateNestedManyWithoutOrganizationInput
    image_links?: ImageLinkCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutUser_organizationsInput = {
    id?: number
    name: string
    contact_email?: string | null
    phone?: string | null
    address?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutOrganizationInput
    webhook_subscriptions?: WebhookSubscriptionUncheckedCreateNestedManyWithoutOrganizationInput
    image_links?: ImageLinkUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutUser_organizationsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutUser_organizationsInput, OrganizationUncheckedCreateWithoutUser_organizationsInput>
  }

  export type UserUpsertWithoutUser_organizationsInput = {
    update: XOR<UserUpdateWithoutUser_organizationsInput, UserUncheckedUpdateWithoutUser_organizationsInput>
    create: XOR<UserCreateWithoutUser_organizationsInput, UserUncheckedCreateWithoutUser_organizationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUser_organizationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUser_organizationsInput, UserUncheckedUpdateWithoutUser_organizationsInput>
  }

  export type UserUpdateWithoutUser_organizationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    supabase_id?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    referral_codes?: ReferralCodeUpdateManyWithoutUserNestedInput
    email_logs?: EmailLogUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    checkin_logs?: CheckinLogUpdateManyWithoutUserNestedInput
    tracking_visits?: TrackingVisitUpdateManyWithoutUserNestedInput
    webhook_logs?: WebhookLogUpdateManyWithoutUserNestedInput
    images?: ImageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUser_organizationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    supabase_id?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    referral_codes?: ReferralCodeUncheckedUpdateManyWithoutUserNestedInput
    email_logs?: EmailLogUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    checkin_logs?: CheckinLogUncheckedUpdateManyWithoutUserNestedInput
    tracking_visits?: TrackingVisitUncheckedUpdateManyWithoutUserNestedInput
    webhook_logs?: WebhookLogUncheckedUpdateManyWithoutUserNestedInput
    images?: ImageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrganizationUpsertWithoutUser_organizationsInput = {
    update: XOR<OrganizationUpdateWithoutUser_organizationsInput, OrganizationUncheckedUpdateWithoutUser_organizationsInput>
    create: XOR<OrganizationCreateWithoutUser_organizationsInput, OrganizationUncheckedCreateWithoutUser_organizationsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutUser_organizationsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutUser_organizationsInput, OrganizationUncheckedUpdateWithoutUser_organizationsInput>
  }

  export type OrganizationUpdateWithoutUser_organizationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    contact_email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutOrganizationNestedInput
    webhook_subscriptions?: WebhookSubscriptionUpdateManyWithoutOrganizationNestedInput
    image_links?: ImageLinkUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutUser_organizationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contact_email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutOrganizationNestedInput
    webhook_subscriptions?: WebhookSubscriptionUncheckedUpdateManyWithoutOrganizationNestedInput
    image_links?: ImageLinkUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type EventCreateWithoutEvent_settingsInput = {
    name: string
    description?: string | null
    date: Date | string
    location?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    organization: OrganizationCreateNestedOneWithoutEventsInput
    tickets?: TicketCreateNestedManyWithoutEventInput
    email_logs?: EmailLogCreateNestedManyWithoutEventInput
    webhook_logs?: WebhookLogCreateNestedManyWithoutEventInput
    checkin_logs?: CheckinLogCreateNestedManyWithoutEventInput
    tracking_visits?: TrackingVisitCreateNestedManyWithoutEventInput
    image_links?: ImageLinkCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutEvent_settingsInput = {
    id?: number
    organization_id: number
    name: string
    description?: string | null
    date: Date | string
    location?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    tickets?: TicketUncheckedCreateNestedManyWithoutEventInput
    email_logs?: EmailLogUncheckedCreateNestedManyWithoutEventInput
    webhook_logs?: WebhookLogUncheckedCreateNestedManyWithoutEventInput
    checkin_logs?: CheckinLogUncheckedCreateNestedManyWithoutEventInput
    tracking_visits?: TrackingVisitUncheckedCreateNestedManyWithoutEventInput
    image_links?: ImageLinkUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutEvent_settingsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutEvent_settingsInput, EventUncheckedCreateWithoutEvent_settingsInput>
  }

  export type EventUpsertWithoutEvent_settingsInput = {
    update: XOR<EventUpdateWithoutEvent_settingsInput, EventUncheckedUpdateWithoutEvent_settingsInput>
    create: XOR<EventCreateWithoutEvent_settingsInput, EventUncheckedCreateWithoutEvent_settingsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutEvent_settingsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutEvent_settingsInput, EventUncheckedUpdateWithoutEvent_settingsInput>
  }

  export type EventUpdateWithoutEvent_settingsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutEventsNestedInput
    tickets?: TicketUpdateManyWithoutEventNestedInput
    email_logs?: EmailLogUpdateManyWithoutEventNestedInput
    webhook_logs?: WebhookLogUpdateManyWithoutEventNestedInput
    checkin_logs?: CheckinLogUpdateManyWithoutEventNestedInput
    tracking_visits?: TrackingVisitUpdateManyWithoutEventNestedInput
    image_links?: ImageLinkUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutEvent_settingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    organization_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: TicketUncheckedUpdateManyWithoutEventNestedInput
    email_logs?: EmailLogUncheckedUpdateManyWithoutEventNestedInput
    webhook_logs?: WebhookLogUncheckedUpdateManyWithoutEventNestedInput
    checkin_logs?: CheckinLogUncheckedUpdateManyWithoutEventNestedInput
    tracking_visits?: TrackingVisitUncheckedUpdateManyWithoutEventNestedInput
    image_links?: ImageLinkUncheckedUpdateManyWithoutEventNestedInput
  }

  export type UserCreateWithoutImagesInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    is_verified?: boolean
    supabase_id?: string | null
    phone?: string | null
    avatar_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    referral_codes?: ReferralCodeCreateNestedManyWithoutUserInput
    email_logs?: EmailLogCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    checkin_logs?: CheckinLogCreateNestedManyWithoutUserInput
    user_organizations?: UserOrganizationCreateNestedManyWithoutUserInput
    tracking_visits?: TrackingVisitCreateNestedManyWithoutUserInput
    webhook_logs?: WebhookLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutImagesInput = {
    id?: string
    email: string
    name?: string | null
    role?: $Enums.UserRole
    is_verified?: boolean
    supabase_id?: string | null
    phone?: string | null
    avatar_url?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    referral_codes?: ReferralCodeUncheckedCreateNestedManyWithoutUserInput
    email_logs?: EmailLogUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    checkin_logs?: CheckinLogUncheckedCreateNestedManyWithoutUserInput
    user_organizations?: UserOrganizationUncheckedCreateNestedManyWithoutUserInput
    tracking_visits?: TrackingVisitUncheckedCreateNestedManyWithoutUserInput
    webhook_logs?: WebhookLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutImagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutImagesInput, UserUncheckedCreateWithoutImagesInput>
  }

  export type ImageLinkCreateWithoutImageInput = {
    entity_type: string
    entity_id: number
    usage_type: string
    linked_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    organization?: OrganizationCreateNestedOneWithoutImage_linksInput
    event?: EventCreateNestedOneWithoutImage_linksInput
  }

  export type ImageLinkUncheckedCreateWithoutImageInput = {
    id?: number
    entity_type: string
    entity_id: number
    organization_id?: number | null
    event_id?: number | null
    usage_type: string
    linked_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ImageLinkCreateOrConnectWithoutImageInput = {
    where: ImageLinkWhereUniqueInput
    create: XOR<ImageLinkCreateWithoutImageInput, ImageLinkUncheckedCreateWithoutImageInput>
  }

  export type ImageLinkCreateManyImageInputEnvelope = {
    data: ImageLinkCreateManyImageInput | ImageLinkCreateManyImageInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutImagesInput = {
    update: XOR<UserUpdateWithoutImagesInput, UserUncheckedUpdateWithoutImagesInput>
    create: XOR<UserCreateWithoutImagesInput, UserUncheckedCreateWithoutImagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutImagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutImagesInput, UserUncheckedUpdateWithoutImagesInput>
  }

  export type UserUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    supabase_id?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    referral_codes?: ReferralCodeUpdateManyWithoutUserNestedInput
    email_logs?: EmailLogUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    checkin_logs?: CheckinLogUpdateManyWithoutUserNestedInput
    user_organizations?: UserOrganizationUpdateManyWithoutUserNestedInput
    tracking_visits?: TrackingVisitUpdateManyWithoutUserNestedInput
    webhook_logs?: WebhookLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    is_verified?: BoolFieldUpdateOperationsInput | boolean
    supabase_id?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    referral_codes?: ReferralCodeUncheckedUpdateManyWithoutUserNestedInput
    email_logs?: EmailLogUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    checkin_logs?: CheckinLogUncheckedUpdateManyWithoutUserNestedInput
    user_organizations?: UserOrganizationUncheckedUpdateManyWithoutUserNestedInput
    tracking_visits?: TrackingVisitUncheckedUpdateManyWithoutUserNestedInput
    webhook_logs?: WebhookLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ImageLinkUpsertWithWhereUniqueWithoutImageInput = {
    where: ImageLinkWhereUniqueInput
    update: XOR<ImageLinkUpdateWithoutImageInput, ImageLinkUncheckedUpdateWithoutImageInput>
    create: XOR<ImageLinkCreateWithoutImageInput, ImageLinkUncheckedCreateWithoutImageInput>
  }

  export type ImageLinkUpdateWithWhereUniqueWithoutImageInput = {
    where: ImageLinkWhereUniqueInput
    data: XOR<ImageLinkUpdateWithoutImageInput, ImageLinkUncheckedUpdateWithoutImageInput>
  }

  export type ImageLinkUpdateManyWithWhereWithoutImageInput = {
    where: ImageLinkScalarWhereInput
    data: XOR<ImageLinkUpdateManyMutationInput, ImageLinkUncheckedUpdateManyWithoutImageInput>
  }

  export type ImageCreateWithoutImage_linksInput = {
    file_path: string
    file_name?: string | null
    file_type?: string | null
    file_size?: number | null
    alt_text?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutImagesInput
  }

  export type ImageUncheckedCreateWithoutImage_linksInput = {
    id?: number
    file_path: string
    file_name?: string | null
    file_type?: string | null
    file_size?: number | null
    alt_text?: string | null
    uploaded_by: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ImageCreateOrConnectWithoutImage_linksInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutImage_linksInput, ImageUncheckedCreateWithoutImage_linksInput>
  }

  export type OrganizationCreateWithoutImage_linksInput = {
    name: string
    contact_email?: string | null
    phone?: string | null
    address?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    events?: EventCreateNestedManyWithoutOrganizationInput
    webhook_subscriptions?: WebhookSubscriptionCreateNestedManyWithoutOrganizationInput
    user_organizations?: UserOrganizationCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutImage_linksInput = {
    id?: number
    name: string
    contact_email?: string | null
    phone?: string | null
    address?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutOrganizationInput
    webhook_subscriptions?: WebhookSubscriptionUncheckedCreateNestedManyWithoutOrganizationInput
    user_organizations?: UserOrganizationUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutImage_linksInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutImage_linksInput, OrganizationUncheckedCreateWithoutImage_linksInput>
  }

  export type EventCreateWithoutImage_linksInput = {
    name: string
    description?: string | null
    date: Date | string
    location?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    organization: OrganizationCreateNestedOneWithoutEventsInput
    tickets?: TicketCreateNestedManyWithoutEventInput
    email_logs?: EmailLogCreateNestedManyWithoutEventInput
    webhook_logs?: WebhookLogCreateNestedManyWithoutEventInput
    checkin_logs?: CheckinLogCreateNestedManyWithoutEventInput
    tracking_visits?: TrackingVisitCreateNestedManyWithoutEventInput
    event_settings?: EventSettingCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutImage_linksInput = {
    id?: number
    organization_id: number
    name: string
    description?: string | null
    date: Date | string
    location?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    tickets?: TicketUncheckedCreateNestedManyWithoutEventInput
    email_logs?: EmailLogUncheckedCreateNestedManyWithoutEventInput
    webhook_logs?: WebhookLogUncheckedCreateNestedManyWithoutEventInput
    checkin_logs?: CheckinLogUncheckedCreateNestedManyWithoutEventInput
    tracking_visits?: TrackingVisitUncheckedCreateNestedManyWithoutEventInput
    event_settings?: EventSettingUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutImage_linksInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutImage_linksInput, EventUncheckedCreateWithoutImage_linksInput>
  }

  export type ImageUpsertWithoutImage_linksInput = {
    update: XOR<ImageUpdateWithoutImage_linksInput, ImageUncheckedUpdateWithoutImage_linksInput>
    create: XOR<ImageCreateWithoutImage_linksInput, ImageUncheckedCreateWithoutImage_linksInput>
    where?: ImageWhereInput
  }

  export type ImageUpdateToOneWithWhereWithoutImage_linksInput = {
    where?: ImageWhereInput
    data: XOR<ImageUpdateWithoutImage_linksInput, ImageUncheckedUpdateWithoutImage_linksInput>
  }

  export type ImageUpdateWithoutImage_linksInput = {
    file_path?: StringFieldUpdateOperationsInput | string
    file_name?: NullableStringFieldUpdateOperationsInput | string | null
    file_type?: NullableStringFieldUpdateOperationsInput | string | null
    file_size?: NullableIntFieldUpdateOperationsInput | number | null
    alt_text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutImagesNestedInput
  }

  export type ImageUncheckedUpdateWithoutImage_linksInput = {
    id?: IntFieldUpdateOperationsInput | number
    file_path?: StringFieldUpdateOperationsInput | string
    file_name?: NullableStringFieldUpdateOperationsInput | string | null
    file_type?: NullableStringFieldUpdateOperationsInput | string | null
    file_size?: NullableIntFieldUpdateOperationsInput | number | null
    alt_text?: NullableStringFieldUpdateOperationsInput | string | null
    uploaded_by?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationUpsertWithoutImage_linksInput = {
    update: XOR<OrganizationUpdateWithoutImage_linksInput, OrganizationUncheckedUpdateWithoutImage_linksInput>
    create: XOR<OrganizationCreateWithoutImage_linksInput, OrganizationUncheckedCreateWithoutImage_linksInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutImage_linksInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutImage_linksInput, OrganizationUncheckedUpdateWithoutImage_linksInput>
  }

  export type OrganizationUpdateWithoutImage_linksInput = {
    name?: StringFieldUpdateOperationsInput | string
    contact_email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutOrganizationNestedInput
    webhook_subscriptions?: WebhookSubscriptionUpdateManyWithoutOrganizationNestedInput
    user_organizations?: UserOrganizationUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutImage_linksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contact_email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutOrganizationNestedInput
    webhook_subscriptions?: WebhookSubscriptionUncheckedUpdateManyWithoutOrganizationNestedInput
    user_organizations?: UserOrganizationUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type EventUpsertWithoutImage_linksInput = {
    update: XOR<EventUpdateWithoutImage_linksInput, EventUncheckedUpdateWithoutImage_linksInput>
    create: XOR<EventCreateWithoutImage_linksInput, EventUncheckedCreateWithoutImage_linksInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutImage_linksInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutImage_linksInput, EventUncheckedUpdateWithoutImage_linksInput>
  }

  export type EventUpdateWithoutImage_linksInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutEventsNestedInput
    tickets?: TicketUpdateManyWithoutEventNestedInput
    email_logs?: EmailLogUpdateManyWithoutEventNestedInput
    webhook_logs?: WebhookLogUpdateManyWithoutEventNestedInput
    checkin_logs?: CheckinLogUpdateManyWithoutEventNestedInput
    tracking_visits?: TrackingVisitUpdateManyWithoutEventNestedInput
    event_settings?: EventSettingUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutImage_linksInput = {
    id?: IntFieldUpdateOperationsInput | number
    organization_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: TicketUncheckedUpdateManyWithoutEventNestedInput
    email_logs?: EmailLogUncheckedUpdateManyWithoutEventNestedInput
    webhook_logs?: WebhookLogUncheckedUpdateManyWithoutEventNestedInput
    checkin_logs?: CheckinLogUncheckedUpdateManyWithoutEventNestedInput
    tracking_visits?: TrackingVisitUncheckedUpdateManyWithoutEventNestedInput
    event_settings?: EventSettingUncheckedUpdateManyWithoutEventNestedInput
  }

  export type ReferralCodeCreateManyUserInput = {
    id?: number
    code: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type EmailLogCreateManyUserInput = {
    id?: number
    event_id?: number | null
    email_type: string
    subject: string
    status: string
    sent_at?: Date | string | null
    error_message?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type OrderCreateManyUserInput = {
    id?: number
    status: string
    payment_method: string
    amount: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CheckinLogCreateManyUserInput = {
    id?: number
    ticket_id: number
    event_id: number
    checkin_time: Date | string
    verified_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserOrganizationCreateManyUserInput = {
    id?: number
    organization_id: number
    role: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TrackingVisitCreateManyUserInput = {
    id?: number
    event_id: number
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_content?: string | null
    referrer_url?: string | null
    landing_page?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WebhookLogCreateManyUserInput = {
    id?: number
    target_url: string
    event_type: string
    order_id?: number | null
    event_id?: number | null
    payload: string
    status_code: number
    response_text?: string | null
    triggered_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ImageCreateManyUserInput = {
    id?: number
    file_path: string
    file_name?: string | null
    file_type?: string | null
    file_size?: number | null
    alt_text?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ReferralCodeUpdateWithoutUserInput = {
    code?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralCodeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralCodeUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailLogUpdateWithoutUserInput = {
    email_type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    sent_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error_message?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneWithoutEmail_logsNestedInput
  }

  export type EmailLogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    email_type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    sent_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error_message?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailLogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    email_type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    sent_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error_message?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUpdateWithoutUserInput = {
    status?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order_items?: OrderItemUpdateManyWithoutOrderNestedInput
    order_promos?: OrderPromoUpdateManyWithoutOrderNestedInput
    payments?: PaymentUpdateManyWithoutOrderNestedInput
    webhook_logs?: WebhookLogUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order_items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    order_promos?: OrderPromoUncheckedUpdateManyWithoutOrderNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutOrderNestedInput
    webhook_logs?: WebhookLogUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    payment_method?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CheckinLogUpdateWithoutUserInput = {
    checkin_time?: DateTimeFieldUpdateOperationsInput | Date | string
    verified_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: TicketUpdateOneRequiredWithoutCheckin_logsNestedInput
    event?: EventUpdateOneRequiredWithoutCheckin_logsNestedInput
  }

  export type CheckinLogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    checkin_time?: DateTimeFieldUpdateOperationsInput | Date | string
    verified_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CheckinLogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    checkin_time?: DateTimeFieldUpdateOperationsInput | Date | string
    verified_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserOrganizationUpdateWithoutUserInput = {
    role?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUser_organizationsNestedInput
  }

  export type UserOrganizationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    organization_id?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserOrganizationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    organization_id?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackingVisitUpdateWithoutUserInput = {
    utm_source?: NullableStringFieldUpdateOperationsInput | string | null
    utm_medium?: NullableStringFieldUpdateOperationsInput | string | null
    utm_campaign?: NullableStringFieldUpdateOperationsInput | string | null
    utm_content?: NullableStringFieldUpdateOperationsInput | string | null
    referrer_url?: NullableStringFieldUpdateOperationsInput | string | null
    landing_page?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutTracking_visitsNestedInput
  }

  export type TrackingVisitUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    utm_source?: NullableStringFieldUpdateOperationsInput | string | null
    utm_medium?: NullableStringFieldUpdateOperationsInput | string | null
    utm_campaign?: NullableStringFieldUpdateOperationsInput | string | null
    utm_content?: NullableStringFieldUpdateOperationsInput | string | null
    referrer_url?: NullableStringFieldUpdateOperationsInput | string | null
    landing_page?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackingVisitUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    utm_source?: NullableStringFieldUpdateOperationsInput | string | null
    utm_medium?: NullableStringFieldUpdateOperationsInput | string | null
    utm_campaign?: NullableStringFieldUpdateOperationsInput | string | null
    utm_content?: NullableStringFieldUpdateOperationsInput | string | null
    referrer_url?: NullableStringFieldUpdateOperationsInput | string | null
    landing_page?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookLogUpdateWithoutUserInput = {
    target_url?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    status_code?: IntFieldUpdateOperationsInput | number
    response_text?: NullableStringFieldUpdateOperationsInput | string | null
    triggered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneWithoutWebhook_logsNestedInput
    event?: EventUpdateOneWithoutWebhook_logsNestedInput
  }

  export type WebhookLogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    target_url?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    payload?: StringFieldUpdateOperationsInput | string
    status_code?: IntFieldUpdateOperationsInput | number
    response_text?: NullableStringFieldUpdateOperationsInput | string | null
    triggered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookLogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    target_url?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    payload?: StringFieldUpdateOperationsInput | string
    status_code?: IntFieldUpdateOperationsInput | number
    response_text?: NullableStringFieldUpdateOperationsInput | string | null
    triggered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageUpdateWithoutUserInput = {
    file_path?: StringFieldUpdateOperationsInput | string
    file_name?: NullableStringFieldUpdateOperationsInput | string | null
    file_type?: NullableStringFieldUpdateOperationsInput | string | null
    file_size?: NullableIntFieldUpdateOperationsInput | number | null
    alt_text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image_links?: ImageLinkUpdateManyWithoutImageNestedInput
  }

  export type ImageUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    file_path?: StringFieldUpdateOperationsInput | string
    file_name?: NullableStringFieldUpdateOperationsInput | string | null
    file_type?: NullableStringFieldUpdateOperationsInput | string | null
    file_size?: NullableIntFieldUpdateOperationsInput | number | null
    alt_text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image_links?: ImageLinkUncheckedUpdateManyWithoutImageNestedInput
  }

  export type ImageUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    file_path?: StringFieldUpdateOperationsInput | string
    file_name?: NullableStringFieldUpdateOperationsInput | string | null
    file_type?: NullableStringFieldUpdateOperationsInput | string | null
    file_size?: NullableIntFieldUpdateOperationsInput | number | null
    alt_text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateManyOrganizationInput = {
    id?: number
    name: string
    description?: string | null
    date: Date | string
    location?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WebhookSubscriptionCreateManyOrganizationInput = {
    id?: number
    target_url: string
    event_type: string
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserOrganizationCreateManyOrganizationInput = {
    id?: number
    user_id: string
    role: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ImageLinkCreateManyOrganizationInput = {
    id?: number
    image_id: number
    entity_type: string
    entity_id: number
    event_id?: number | null
    usage_type: string
    linked_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type EventUpdateWithoutOrganizationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: TicketUpdateManyWithoutEventNestedInput
    email_logs?: EmailLogUpdateManyWithoutEventNestedInput
    webhook_logs?: WebhookLogUpdateManyWithoutEventNestedInput
    checkin_logs?: CheckinLogUpdateManyWithoutEventNestedInput
    tracking_visits?: TrackingVisitUpdateManyWithoutEventNestedInput
    event_settings?: EventSettingUpdateManyWithoutEventNestedInput
    image_links?: ImageLinkUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: TicketUncheckedUpdateManyWithoutEventNestedInput
    email_logs?: EmailLogUncheckedUpdateManyWithoutEventNestedInput
    webhook_logs?: WebhookLogUncheckedUpdateManyWithoutEventNestedInput
    checkin_logs?: CheckinLogUncheckedUpdateManyWithoutEventNestedInput
    tracking_visits?: TrackingVisitUncheckedUpdateManyWithoutEventNestedInput
    event_settings?: EventSettingUncheckedUpdateManyWithoutEventNestedInput
    image_links?: ImageLinkUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookSubscriptionUpdateWithoutOrganizationInput = {
    target_url?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookSubscriptionUncheckedUpdateWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    target_url?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookSubscriptionUncheckedUpdateManyWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    target_url?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserOrganizationUpdateWithoutOrganizationInput = {
    role?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUser_organizationsNestedInput
  }

  export type UserOrganizationUncheckedUpdateWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserOrganizationUncheckedUpdateManyWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageLinkUpdateWithoutOrganizationInput = {
    entity_type?: StringFieldUpdateOperationsInput | string
    entity_id?: IntFieldUpdateOperationsInput | number
    usage_type?: StringFieldUpdateOperationsInput | string
    linked_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: ImageUpdateOneRequiredWithoutImage_linksNestedInput
    event?: EventUpdateOneWithoutImage_linksNestedInput
  }

  export type ImageLinkUncheckedUpdateWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_id?: IntFieldUpdateOperationsInput | number
    entity_type?: StringFieldUpdateOperationsInput | string
    entity_id?: IntFieldUpdateOperationsInput | number
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    usage_type?: StringFieldUpdateOperationsInput | string
    linked_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageLinkUncheckedUpdateManyWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_id?: IntFieldUpdateOperationsInput | number
    entity_type?: StringFieldUpdateOperationsInput | string
    entity_id?: IntFieldUpdateOperationsInput | number
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    usage_type?: StringFieldUpdateOperationsInput | string
    linked_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderPromoCreateManyPromo_codeInput = {
    id?: number
    order_id: number
    discount_applied: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type OrderPromoUpdateWithoutPromo_codeInput = {
    discount_applied?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutOrder_promosNestedInput
  }

  export type OrderPromoUncheckedUpdateWithoutPromo_codeInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    discount_applied?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderPromoUncheckedUpdateManyWithoutPromo_codeInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    discount_applied?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketCreateManyEventInput = {
    id?: number
    name: string
    price: Decimal | DecimalJsLike | number | string
    type: string
    total: number
    sold: number
    start_sale_date?: Date | string | null
    end_sale_date?: Date | string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type EmailLogCreateManyEventInput = {
    id?: number
    user_id: string
    email_type: string
    subject: string
    status: string
    sent_at?: Date | string | null
    error_message?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WebhookLogCreateManyEventInput = {
    id?: number
    target_url: string
    event_type: string
    order_id?: number | null
    user_id?: string | null
    payload: string
    status_code: number
    response_text?: string | null
    triggered_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CheckinLogCreateManyEventInput = {
    id?: number
    user_id: string
    ticket_id: number
    checkin_time: Date | string
    verified_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TrackingVisitCreateManyEventInput = {
    id?: number
    user_id?: string | null
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_content?: string | null
    referrer_url?: string | null
    landing_page?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type EventSettingCreateManyEventInput = {
    id?: number
    setting_key: string
    setting_value: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ImageLinkCreateManyEventInput = {
    id?: number
    image_id: number
    entity_type: string
    entity_id: number
    organization_id?: number | null
    usage_type: string
    linked_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TicketUpdateWithoutEventInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    type?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    sold?: IntFieldUpdateOperationsInput | number
    start_sale_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_sale_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order_items?: OrderItemUpdateManyWithoutTicketNestedInput
    checkin_logs?: CheckinLogUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    type?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    sold?: IntFieldUpdateOperationsInput | number
    start_sale_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_sale_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order_items?: OrderItemUncheckedUpdateManyWithoutTicketNestedInput
    checkin_logs?: CheckinLogUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    type?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    sold?: IntFieldUpdateOperationsInput | number
    start_sale_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_sale_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailLogUpdateWithoutEventInput = {
    email_type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    sent_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error_message?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEmail_logsNestedInput
  }

  export type EmailLogUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    email_type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    sent_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error_message?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailLogUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    email_type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    sent_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error_message?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookLogUpdateWithoutEventInput = {
    target_url?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    status_code?: IntFieldUpdateOperationsInput | number
    response_text?: NullableStringFieldUpdateOperationsInput | string | null
    triggered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneWithoutWebhook_logsNestedInput
    user?: UserUpdateOneWithoutWebhook_logsNestedInput
  }

  export type WebhookLogUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    target_url?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: StringFieldUpdateOperationsInput | string
    status_code?: IntFieldUpdateOperationsInput | number
    response_text?: NullableStringFieldUpdateOperationsInput | string | null
    triggered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookLogUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    target_url?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: StringFieldUpdateOperationsInput | string
    status_code?: IntFieldUpdateOperationsInput | number
    response_text?: NullableStringFieldUpdateOperationsInput | string | null
    triggered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CheckinLogUpdateWithoutEventInput = {
    checkin_time?: DateTimeFieldUpdateOperationsInput | Date | string
    verified_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCheckin_logsNestedInput
    ticket?: TicketUpdateOneRequiredWithoutCheckin_logsNestedInput
  }

  export type CheckinLogUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    ticket_id?: IntFieldUpdateOperationsInput | number
    checkin_time?: DateTimeFieldUpdateOperationsInput | Date | string
    verified_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CheckinLogUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    ticket_id?: IntFieldUpdateOperationsInput | number
    checkin_time?: DateTimeFieldUpdateOperationsInput | Date | string
    verified_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackingVisitUpdateWithoutEventInput = {
    utm_source?: NullableStringFieldUpdateOperationsInput | string | null
    utm_medium?: NullableStringFieldUpdateOperationsInput | string | null
    utm_campaign?: NullableStringFieldUpdateOperationsInput | string | null
    utm_content?: NullableStringFieldUpdateOperationsInput | string | null
    referrer_url?: NullableStringFieldUpdateOperationsInput | string | null
    landing_page?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTracking_visitsNestedInput
  }

  export type TrackingVisitUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    utm_source?: NullableStringFieldUpdateOperationsInput | string | null
    utm_medium?: NullableStringFieldUpdateOperationsInput | string | null
    utm_campaign?: NullableStringFieldUpdateOperationsInput | string | null
    utm_content?: NullableStringFieldUpdateOperationsInput | string | null
    referrer_url?: NullableStringFieldUpdateOperationsInput | string | null
    landing_page?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackingVisitUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    utm_source?: NullableStringFieldUpdateOperationsInput | string | null
    utm_medium?: NullableStringFieldUpdateOperationsInput | string | null
    utm_campaign?: NullableStringFieldUpdateOperationsInput | string | null
    utm_content?: NullableStringFieldUpdateOperationsInput | string | null
    referrer_url?: NullableStringFieldUpdateOperationsInput | string | null
    landing_page?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventSettingUpdateWithoutEventInput = {
    setting_key?: StringFieldUpdateOperationsInput | string
    setting_value?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventSettingUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    setting_key?: StringFieldUpdateOperationsInput | string
    setting_value?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventSettingUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    setting_key?: StringFieldUpdateOperationsInput | string
    setting_value?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageLinkUpdateWithoutEventInput = {
    entity_type?: StringFieldUpdateOperationsInput | string
    entity_id?: IntFieldUpdateOperationsInput | number
    usage_type?: StringFieldUpdateOperationsInput | string
    linked_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: ImageUpdateOneRequiredWithoutImage_linksNestedInput
    organization?: OrganizationUpdateOneWithoutImage_linksNestedInput
  }

  export type ImageLinkUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_id?: IntFieldUpdateOperationsInput | number
    entity_type?: StringFieldUpdateOperationsInput | string
    entity_id?: IntFieldUpdateOperationsInput | number
    organization_id?: NullableIntFieldUpdateOperationsInput | number | null
    usage_type?: StringFieldUpdateOperationsInput | string
    linked_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageLinkUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_id?: IntFieldUpdateOperationsInput | number
    entity_type?: StringFieldUpdateOperationsInput | string
    entity_id?: IntFieldUpdateOperationsInput | number
    organization_id?: NullableIntFieldUpdateOperationsInput | number | null
    usage_type?: StringFieldUpdateOperationsInput | string
    linked_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemCreateManyTicketInput = {
    id?: number
    order_id: number
    quantity: number
    price_snapshot: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CheckinLogCreateManyTicketInput = {
    id?: number
    user_id: string
    event_id: number
    checkin_time: Date | string
    verified_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type OrderItemUpdateWithoutTicketInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price_snapshot?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutOrder_itemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutTicketInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price_snapshot?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemUncheckedUpdateManyWithoutTicketInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price_snapshot?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CheckinLogUpdateWithoutTicketInput = {
    checkin_time?: DateTimeFieldUpdateOperationsInput | Date | string
    verified_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCheckin_logsNestedInput
    event?: EventUpdateOneRequiredWithoutCheckin_logsNestedInput
  }

  export type CheckinLogUncheckedUpdateWithoutTicketInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    event_id?: IntFieldUpdateOperationsInput | number
    checkin_time?: DateTimeFieldUpdateOperationsInput | Date | string
    verified_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CheckinLogUncheckedUpdateManyWithoutTicketInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    event_id?: IntFieldUpdateOperationsInput | number
    checkin_time?: DateTimeFieldUpdateOperationsInput | Date | string
    verified_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemCreateManyOrderInput = {
    id?: number
    ticket_id: number
    quantity: number
    price_snapshot: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type OrderPromoCreateManyOrderInput = {
    id?: number
    promo_code_id: number
    discount_applied: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PaymentCreateManyOrderInput = {
    id?: number
    gateway: string
    status: string
    txn_code?: string | null
    paid_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type WebhookLogCreateManyOrderInput = {
    id?: number
    target_url: string
    event_type: string
    event_id?: number | null
    user_id?: string | null
    payload: string
    status_code: number
    response_text?: string | null
    triggered_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type OrderItemUpdateWithoutOrderInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price_snapshot?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: TicketUpdateOneRequiredWithoutOrder_itemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price_snapshot?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price_snapshot?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderPromoUpdateWithoutOrderInput = {
    discount_applied?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    promo_code?: PromoCodeUpdateOneRequiredWithoutOrder_promosNestedInput
  }

  export type OrderPromoUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    promo_code_id?: IntFieldUpdateOperationsInput | number
    discount_applied?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderPromoUncheckedUpdateManyWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    promo_code_id?: IntFieldUpdateOperationsInput | number
    discount_applied?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUpdateWithoutOrderInput = {
    gateway?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    txn_code?: NullableStringFieldUpdateOperationsInput | string | null
    paid_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    gateway?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    txn_code?: NullableStringFieldUpdateOperationsInput | string | null
    paid_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    gateway?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    txn_code?: NullableStringFieldUpdateOperationsInput | string | null
    paid_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookLogUpdateWithoutOrderInput = {
    target_url?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    status_code?: IntFieldUpdateOperationsInput | number
    response_text?: NullableStringFieldUpdateOperationsInput | string | null
    triggered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneWithoutWebhook_logsNestedInput
    user?: UserUpdateOneWithoutWebhook_logsNestedInput
  }

  export type WebhookLogUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    target_url?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: StringFieldUpdateOperationsInput | string
    status_code?: IntFieldUpdateOperationsInput | number
    response_text?: NullableStringFieldUpdateOperationsInput | string | null
    triggered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookLogUncheckedUpdateManyWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    target_url?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: StringFieldUpdateOperationsInput | string
    status_code?: IntFieldUpdateOperationsInput | number
    response_text?: NullableStringFieldUpdateOperationsInput | string | null
    triggered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageLinkCreateManyImageInput = {
    id?: number
    entity_type: string
    entity_id: number
    organization_id?: number | null
    event_id?: number | null
    usage_type: string
    linked_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ImageLinkUpdateWithoutImageInput = {
    entity_type?: StringFieldUpdateOperationsInput | string
    entity_id?: IntFieldUpdateOperationsInput | number
    usage_type?: StringFieldUpdateOperationsInput | string
    linked_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneWithoutImage_linksNestedInput
    event?: EventUpdateOneWithoutImage_linksNestedInput
  }

  export type ImageLinkUncheckedUpdateWithoutImageInput = {
    id?: IntFieldUpdateOperationsInput | number
    entity_type?: StringFieldUpdateOperationsInput | string
    entity_id?: IntFieldUpdateOperationsInput | number
    organization_id?: NullableIntFieldUpdateOperationsInput | number | null
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    usage_type?: StringFieldUpdateOperationsInput | string
    linked_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageLinkUncheckedUpdateManyWithoutImageInput = {
    id?: IntFieldUpdateOperationsInput | number
    entity_type?: StringFieldUpdateOperationsInput | string
    entity_id?: IntFieldUpdateOperationsInput | number
    organization_id?: NullableIntFieldUpdateOperationsInput | number | null
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    usage_type?: StringFieldUpdateOperationsInput | string
    linked_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}