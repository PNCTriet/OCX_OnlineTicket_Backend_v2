import { Controller, Get, Put, Delete, Param, Body, UseGuards, Request } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger';
import { UsersService } from './users.service';
import { UpdateUserDto, UserResponseDto } from './dto/user.dto';
import { JwtAuthGuard } from '@/common/guards/jwt-auth.guard';

@ApiTags('üë• Users')
@ApiBearerAuth()
@UseGuards(JwtAuthGuard)
@Controller('users')
export class UsersController {
  constructor(private readonly usersService: UsersService) {}

  @Get('me')
  @ApiOperation({ summary: 'L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th√¥ng tin ng∆∞·ªùi d√πng',
    type: UserResponseDto 
  })
  async getCurrentUser(@Request() req): Promise<UserResponseDto> {
    return this.usersService.findById(req.user.id);
  }

  @Get()
  @ApiOperation({ summary: 'L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng (Admin only)' })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch ng∆∞·ªùi d√πng',
    type: [UserResponseDto] 
  })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
  async findAll(@Request() req): Promise<UserResponseDto[]> {
    return this.usersService.findAll(req.user);
  }

  @Get(':id')
  @ApiOperation({ summary: 'L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo ID' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th√¥ng tin ng∆∞·ªùi d√πng',
    type: UserResponseDto 
  })
  @ApiResponse({ status: 404, description: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' })
  async findById(@Param('id') id: string): Promise<UserResponseDto> {
    return this.usersService.findById(id);
  }

  @Put(':id')
  @ApiOperation({ summary: 'C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng' })
  @ApiResponse({ 
    status: 200, 
    description: 'C·∫≠p nh·∫≠t th√†nh c√¥ng',
    type: UserResponseDto 
  })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t' })
  @ApiResponse({ status: 404, description: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' })
  async update(
    @Param('id') id: string,
    @Body() updateUserDto: UpdateUserDto,
    @Request() req,
  ): Promise<UserResponseDto> {
    return this.usersService.update(id, updateUserDto, req.user);
  }

  @Delete(':id')
  @ApiOperation({ summary: 'X√≥a ng∆∞·ªùi d√πng (Admin only)' })
  @ApiResponse({ status: 200, description: 'X√≥a th√†nh c√¥ng' })
  @ApiResponse({ status: 403, description: 'Kh√¥ng c√≥ quy·ªÅn x√≥a' })
  @ApiResponse({ status: 404, description: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' })
  async delete(@Param('id') id: string, @Request() req): Promise<void> {
    return this.usersService.delete(id, req.user);
  }
} 